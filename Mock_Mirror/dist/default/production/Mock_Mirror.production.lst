

Microchip Technology PIC18 LITE Macro Assembler V1.38 build -256452561 
                                                                                               Thu Nov 24 04:03:00 2016

Microchip Technology Omniscient Code Generator v1.38 (Free mode) build 201607010351
     1                           	processor	18F2480
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	smallconst,global,reloc=2,class=SMALLCONST,delta=1
     6                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     7                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1
     8                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
     9                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    10                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1
    11                           	psect	text0,global,reloc=2,class=CODE,delta=1
    12                           	psect	text1,global,reloc=2,class=CODE,delta=1
    13                           	psect	text2,global,reloc=2,class=CODE,delta=1
    14                           	psect	text3,global,reloc=2,class=CODE,delta=1
    15                           	psect	text4,global,reloc=2,class=CODE,delta=1
    16                           	psect	text5,global,reloc=2,class=CODE,delta=1
    17                           	psect	text6,global,reloc=2,class=CODE,delta=1
    18                           	psect	text7,global,reloc=2,class=CODE,delta=1
    19                           	psect	text8,global,reloc=2,class=CODE,delta=1
    20                           	psect	text9,global,reloc=2,class=CODE,delta=1
    21                           	psect	text10,global,reloc=2,class=CODE,delta=1
    22                           	psect	text11,global,reloc=2,class=CODE,delta=1
    23                           	psect	text12,global,reloc=2,class=CODE,delta=1
    24                           	psect	text13,global,reloc=2,class=CODE,delta=1
    25                           	psect	text14,global,reloc=2,class=CODE,delta=1
    26                           	psect	text15,global,reloc=2,class=CODE,delta=1
    27                           	psect	text16,global,reloc=2,class=CODE,delta=1
    28                           	psect	text17,global,reloc=2,class=CODE,delta=1
    29                           	psect	text18,global,reloc=2,class=CODE,delta=1
    30                           	psect	text19,global,reloc=2,class=CODE,delta=1
    31                           	psect	text20,global,reloc=2,class=CODE,delta=1
    32                           	psect	text21,global,reloc=2,class=CODE,delta=1
    33                           	psect	text22,global,reloc=2,class=CODE,delta=1
    34                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    35                           	psect	intcode_body,global,reloc=2,class=CODE,delta=1
    36                           	psect	text24,global,reloc=2,class=CODE,delta=1
    37                           	psect	text25,global,reloc=2,class=CODE,delta=1
    38                           	psect	text26,global,reloc=2,class=CODE,delta=1
    39                           	psect	text27,global,reloc=2,class=CODE,delta=1
    40                           	psect	text28,global,reloc=2,class=CODE,delta=1
    41                           	psect	text29,global,reloc=2,class=CODE,delta=1
    42                           	psect	text30,global,reloc=2,class=CODE,delta=1
    43                           	psect	text31,global,reloc=2,class=CODE,delta=1
    44                           	psect	text32,global,reloc=2,class=CODE,delta=1
    45                           	psect	text33,global,reloc=2,class=CODE,delta=1
    46                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1
    47                           	psect	text34,global,reloc=2,class=CODE,delta=1
    48                           	psect	rparam,global,class=COMRAM,space=1,delta=1
    49                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1
    50  0000                     
    51                           	psect	smallconst
    52  000300                     __psmallconst:
    53                           	opt stack 0
    54  000300  00                 	db	0
    55  000301                     _BitNum2SetMask:
    56                           	opt stack 0
    57  000301  0001               	dw	1
    58  000303  0002               	dw	2
    59  000305  0004               	dw	4
    60  000307  0008               	dw	8
    61  000309  0010               	dw	16
    62  00030B  0020               	dw	32
    63  00030D  0040               	dw	64
    64  00030F  0080               	dw	128
    65  000311  0100               	dw	256
    66  000313  0200               	dw	512
    67  000315  0400               	dw	1024
    68  000317  0800               	dw	2048
    69  000319  1000               	dw	4096
    70  00031B  2000               	dw	8192
    71  00031D  4000               	dw	16384
    72  00031F  8000               	dw	32768
    73  000321                     __end_of_BitNum2SetMask:
    74                           	opt stack 0
    75  000321                     _Timer2PostFunc:
    76                           	opt stack 0
    77  000321  00                 	db	0
    78  000322  00                 	db	0
    79  000323  00                 	db	0
    80  000324  00                 	db	0
    81  000325  00                 	db	0
    82  000326  00                 	db	0
    83  000327  00                 	db	0
    84  000328  00                 	db	0
    85  000329  00                 	db	0
    86  00032A  00                 	db	0
    87  00032B  00                 	db	0
    88  00032C  00                 	db	0
    89  00032D  00                 	db	0
    90  00032E  00                 	db	0
    91  00032F  00                 	db	0
    92  000330  00                 	db	0
    93  000331  00                 	db	0
    94  000332  00                 	db	0
    95  000333  00                 	db	0
    96  000334  00                 	db	0
    97  000335  00                 	db	0
    98  000336  00                 	db	0
    99  000337  00                 	db	0
   100  000338  00                 	db	0
   101  000339  00                 	db	0
   102  00033A  00                 	db	0
   103  00033B  00                 	db	0
   104  00033C  00                 	db	0
   105  00033D  00                 	db	0
   106  00033E  00                 	db	0
   107  00033F  00                 	db	0
   108  000340  00                 	db	0
   109  000341                     __end_of_Timer2PostFunc:
   110                           	opt stack 0
   111  000341                     _Nybble2MSBitNum:
   112                           	opt stack 0
   113  000341  00                 	db	0
   114  000342  01                 	db	1
   115  000343  01                 	db	1
   116  000344  02                 	db	2
   117  000345  02                 	db	2
   118  000346  02                 	db	2
   119  000347  02                 	db	2
   120  000348  03                 	db	3
   121  000349  03                 	db	3
   122  00034A  03                 	db	3
   123  00034B  03                 	db	3
   124  00034C  03                 	db	3
   125  00034D  03                 	db	3
   126  00034E  03                 	db	3
   127  00034F  03                 	db	3
   128  000350                     __end_of_Nybble2MSBitNum:
   129                           	opt stack 0
   130  000350                     _ServDescList:
   131                           	opt stack 0
   132  000350  F8                 	db	low _InitCanRX_Service
   133  000351  0F                 	db	high _InitCanRX_Service
   134  000352  F4                 	db	low _RunCanRX_Service
   135  000353  09                 	db	high _RunCanRX_Service
   136  000354                     __end_of_ServDescList:
   137                           	opt stack 0
   138  000354                     _EventQueues:
   139                           	opt stack 0
   140  000354  3C                 	db	low _Queue0
   141  000355  00                 	db	high _Queue0
   142  000356  04                 	db	4
   143  000357                     __end_of_EventQueues:
   144                           	opt stack 0
   145  000357                     _ES_EventList:
   146                           	opt stack 0
   147  000357  FA                 	db	low _Check4Keystroke
   148  000358  10                 	db	high _Check4Keystroke
   149  000359                     __end_of_ES_EventList:
   150                           	opt stack 0
   151  000359                     _DistList00:
   152                           	opt stack 0
   153  000359  C4                 	db	low _PostCanRX_Service
   154  00035A  10                 	db	high _PostCanRX_Service
   155  00035B                     __end_of_DistList00:
   156                           	opt stack 0
   157  0000                     _RXF0EIDH	set	3842
   158  0000                     _RXF0EIDL	set	3843
   159  0000                     _RXF0SIDH	set	3840
   160  0000                     _RXF0SIDL	set	3841
   161  0000                     _RXM0EIDH	set	3866
   162  0000                     _RXM0EIDL	set	3867
   163  0000                     _RXM0SIDH	set	3864
   164  0000                     _RXM0SIDL	set	3865
   165  0000                     _TXB0CONbits	set	3904
   166  0000                     _ADCON1	set	4033
   167  0000                     _BRGCON1bits	set	3952
   168  0000                     _BRGCON2bits	set	3953
   169  0000                     _BRGCON3bits	set	3954
   170  0000                     _CANCON	set	3951
   171  0000                     _CANSTATbits	set	3950
   172  0000                     _CCP1CON	set	4029
   173  0000                     _CCPR1H	set	4031
   174  0000                     _CCPR1L	set	4030
   175  0000                     _CIOCON	set	3955
   176  0000                     _ECANCON	set	3959
   177  0000                     _INTCON	set	4082
   178  0000                     _LATA	set	3977
   179  0000                     _LATB	set	3978
   180  0000                     _PIE1	set	3997
   181  0000                     _PORTA	set	3968
   182  0000                     _PORTB	set	3969
   183  0000                     _RXB0CONbits	set	3936
   184  0000                     _RXB0D0	set	3942
   185  0000                     _RXB0D1	set	3943
   186  0000                     _RXB0EIDH	set	3939
   187  0000                     _RXB0EIDL	set	3940
   188  0000                     _RXB0SIDH	set	3937
   189  0000                     _RXB0SIDL	set	3938
   190  0000                     _T1CON	set	4045
   191  0000                     _TRISA	set	3986
   192  0000                     _TRISBbits	set	3987
   193  0000                     _CCP1IF	set	31986
   194  0000                     _ERRIE	set	32029
   195  0000                     _ERRIF	set	32037
   196  0000                     _GIE	set	32663
   197  0000                     _IRCF0	set	32412
   198  0000                     _IRCF1	set	32413
   199  0000                     _IRCF2	set	32414
   200  0000                     _IRXIE	set	32031
   201  0000                     _IRXIF	set	32039
   202  0000                     _LATA0	set	31816
   203  0000                     _LATA1	set	31817
   204  0000                     _LATA2	set	31818
   205  0000                     _LATA3	set	31819
   206  0000                     _LATA4	set	31820
   207  0000                     _LATA5	set	31821
   208  0000                     _LATB0	set	31824
   209  0000                     _PEIE	set	32662
   210  0000                     _RXB0IE	set	32024
   211  0000                     _RXB0IF	set	32032
   212  0000                     _SCS1	set	32409
   213  0000                     _TXB0IE	set	32026
   214  0000                     _TXB0IF	set	32034
   215  00035B                     STR_1:
   216  00035B  46                 	db	70	;'F'
   217  00035C  61                 	db	97	;'a'
   218  00035D  69                 	db	105	;'i'
   219  00035E  6C                 	db	108	;'l'
   220  00035F  65                 	db	101	;'e'
   221  000360  64                 	db	100	;'d'
   222  000361  20                 	db	32
   223  000362  6F                 	db	111	;'o'
   224  000363  6E                 	db	110	;'n'
   225  000364  20                 	db	32
   226  000365  61                 	db	97	;'a'
   227  000366  74                 	db	116	;'t'
   228  000367  74                 	db	116	;'t'
   229  000368  65                 	db	101	;'e'
   230  000369  6D                 	db	109	;'m'
   231  00036A  70                 	db	112	;'p'
   232  00036B  74                 	db	116	;'t'
   233  00036C  20                 	db	32
   234  00036D  74                 	db	116	;'t'
   235  00036E  6F                 	db	111	;'o'
   236  00036F  20                 	db	32
   237  000370  50                 	db	80	;'P'
   238  000371  6F                 	db	111	;'o'
   239  000372  73                 	db	115	;'s'
   240  000373  74                 	db	116	;'t'
   241  000374  0A                 	db	10
   242  000375  00                 	db	0
   243  000376                     STR_2:
   244  000376  46                 	db	70	;'F'
   245  000377  61                 	db	97	;'a'
   246  000378  69                 	db	105	;'i'
   247  000379  6C                 	db	108	;'l'
   248  00037A  65                 	db	101	;'e'
   249  00037B  64                 	db	100	;'d'
   250  00037C  20                 	db	32
   251  00037D  6F                 	db	111	;'o'
   252  00037E  6E                 	db	110	;'n'
   253  00037F  20                 	db	32
   254  000380  4E                 	db	78	;'N'
   255  000381  55                 	db	85	;'U'
   256  000382  4C                 	db	76	;'L'
   257  000383  4C                 	db	76	;'L'
   258  000384  20                 	db	32
   259  000385  70                 	db	112	;'p'
   260  000386  6F                 	db	111	;'o'
   261  000387  69                 	db	105	;'i'
   262  000388  6E                 	db	110	;'n'
   263  000389  74                 	db	116	;'t'
   264  00038A  65                 	db	101	;'e'
   265  00038B  72                 	db	114	;'r'
   266  00038C  0A                 	db	10
   267  00038D  00                 	db	0
   268  00038E                     STR_3:
   269  00038E  46                 	db	70	;'F'
   270  00038F  61                 	db	97	;'a'
   271  000390  69                 	db	105	;'i'
   272  000391  6C                 	db	108	;'l'
   273  000392  65                 	db	101	;'e'
   274  000393  64                 	db	100	;'d'
   275  000394  20                 	db	32
   276  000395  49                 	db	73	;'I'
   277  000396  6E                 	db	110	;'n'
   278  000397  69                 	db	105	;'i'
   279  000398  74                 	db	116	;'t'
   280  000399  69                 	db	105	;'i'
   281  00039A  61                 	db	97	;'a'
   282  00039B  6C                 	db	108	;'l'
   283  00039C  69                 	db	105	;'i'
   284  00039D  7A                 	db	122	;'z'
   285  00039E  61                 	db	97	;'a'
   286  00039F  74                 	db	116	;'t'
   287  0003A0  69                 	db	105	;'i'
   288  0003A1  6F                 	db	111	;'o'
   289  0003A2  6E                 	db	110	;'n'
   290  0003A3  0A                 	db	10
   291  0003A4  00                 	db	0
   292  0003A5                     STR_4:
   293  0003A5  4F                 	db	79	;'O'
   294  0003A6  74                 	db	116	;'t'
   295  0003A7  68                 	db	104	;'h'
   296  0003A8  65                 	db	101	;'e'
   297  0003A9  72                 	db	114	;'r'
   298  0003AA  20                 	db	32
   299  0003AB  46                 	db	70	;'F'
   300  0003AC  61                 	db	97	;'a'
   301  0003AD  69                 	db	105	;'i'
   302  0003AE  6C                 	db	108	;'l'
   303  0003AF  75                 	db	117	;'u'
   304  0003B0  72                 	db	114	;'r'
   305  0003B1  65                 	db	101	;'e'
   306  0003B2  0A                 	db	10
   307  0003B3  00                 	db	0
   308                           
   309                           ; #config settings
   310  0003B4  00                 	db	0	; dummy byte at the end
   311  0000                     
   312                           	psect	cinit
   313  001028                     __pcinit:
   314                           	opt stack 0
   315  001028                     start_initialization:
   316                           	opt stack 0
   317  001028                     __initialization:
   318                           	opt stack 0
   319                           
   320                           ; Clear objects allocated to BANK0 (47 bytes)
   321  001028  EE00  F060         	lfsr	0,__pbssBANK0
   322  00102C  0E2F               	movlw	47
   323  00102E                     clear_0:
   324  00102E  6AEE               	clrf	postinc0,c
   325  001030  06E8               	decf	wreg,f,c
   326  001032  E1FD               	bnz	clear_0
   327                           
   328                           ; Clear objects allocated to COMRAM (20 bytes)
   329  001034  EE00  F034         	lfsr	0,__pbssCOMRAM
   330  001038  0E14               	movlw	20
   331  00103A                     clear_1:
   332  00103A  6AEE               	clrf	postinc0,c
   333  00103C  06E8               	decf	wreg,f,c
   334  00103E  E1FD               	bnz	clear_1
   335  001040                     end_of_initialization:
   336                           	opt stack 0
   337  001040                     __end_of__initialization:
   338                           	opt stack 0
   339  001040  9048               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
   340  001042  9248               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
   341  001044  0E00               	movlw	low (__Lmediumconst shr (0+16))
   342  001046  6EF8               	movwf	tblptru,c
   343  001048  0100               	movlb	0
   344  00104A  EFF0  F005         	goto	_main	;jump to C main() function
   345                           tblptru	equ	0xFF8
   346                           postinc0	equ	0xFEE
   347                           wreg	equ	0xFE8
   348                           
   349                           	psect	bssCOMRAM
   350  000034                     __pbssCOMRAM:
   351                           	opt stack 0
   352  000034                     ISR@LastTime:
   353                           	opt stack 0
   354  000034                     	ds	2
   355  000036                     ISR@NextTime:
   356                           	opt stack 0
   357  000036                     	ds	2
   358  000038                     _SysTickCounter:
   359                           	opt stack 0
   360  000038                     	ds	2
   361  00003A                     __PRIMASK_temp:
   362                           	opt stack 0
   363  00003A                     	ds	2
   364  00003C                     _Queue0:
   365                           	opt stack 0
   366  00003C                     	ds	12
   367                           tblptru	equ	0xFF8
   368                           postinc0	equ	0xFEE
   369                           wreg	equ	0xFE8
   370                           
   371                           	psect	bssBANK0
   372  000060                     __pbssBANK0:
   373                           	opt stack 0
   374  000060                     _TMR_TimerArray:
   375                           	opt stack 0
   376  000060                     	ds	32
   377  000080                     ES_Timer_Tick_Resp@NewEvent:
   378                           	opt stack 0
   379  000080                     	ds	3
   380  000083                     ES_Timer_Tick_Resp@NeedsProcessing:
   381                           	opt stack 0
   382  000083                     	ds	2
   383  000085                     _Ready:
   384                           	opt stack 0
   385  000085                     	ds	2
   386  000087                     _TMR_ActiveFlags:
   387                           	opt stack 0
   388  000087                     	ds	2
   389  000089                     ES_Timer_Tick_Resp@NextTimer2Process:
   390                           	opt stack 0
   391  000089                     	ds	1
   392  00008A                     _MyPriority:
   393                           	opt stack 0
   394  00008A                     	ds	1
   395  00008B                     _TickCount:
   396                           	opt stack 0
   397  00008B                     	ds	1
   398  00008C                     ES_Run@ThisEvent:
   399                           	opt stack 0
   400  00008C                     	ds	3
   401                           tblptru	equ	0xFF8
   402                           postinc0	equ	0xFEE
   403                           wreg	equ	0xFE8
   404                           
   405                           	psect	cstackBANK0
   406  00008F                     __pcstackBANK0:
   407                           	opt stack 0
   408  00008F                     ?_printf:
   409                           	opt stack 0
   410  00008F                     ?___awmod:
   411                           	opt stack 0
   412  00008F                     ?_RunCanRX_Service:
   413                           	opt stack 0
   414  00008F                     ES_CheckUserEvents@i:
   415                           	opt stack 0
   416  00008F                     ___lbmod@divisor:
   417                           	opt stack 0
   418  00008F                     ES_GetMSBitSet@Val2Check:
   419                           	opt stack 0
   420  00008F                     __HW_Timer_Init@Rate:
   421                           	opt stack 0
   422  00008F                     ES_InitQueue@pBlock:
   423                           	opt stack 0
   424  00008F                     printf@f:
   425                           	opt stack 0
   426  00008F                     ___awmod@dividend:
   427                           	opt stack 0
   428  00008F                     RunCanRX_Service@ThisEvent:
   429                           	opt stack 0
   430                           
   431                           ; 3 bytes @ 0x0
   432  00008F                     	ds	1
   433  000090                     ___lbmod@dividend:
   434                           	opt stack 0
   435                           
   436                           ; 1 bytes @ 0x1
   437  000090                     	ds	1
   438  000091                     ??_ES_GetMSBitSet:
   439  000091                     ES_InitQueue@BlockSize:
   440                           	opt stack 0
   441  000091                     ___lbmod@counter:
   442                           	opt stack 0
   443  000091                     ES_Timer_Init@Rate:
   444                           	opt stack 0
   445  000091                     printf@ap:
   446                           	opt stack 0
   447  000091                     ___awmod@divisor:
   448                           	opt stack 0
   449                           
   450                           ; 2 bytes @ 0x2
   451  000091                     	ds	1
   452  000092                     ___lbmod@rem:
   453                           	opt stack 0
   454  000092                     ES_InitQueue@pThisQueue:
   455                           	opt stack 0
   456  000092                     RunCanRX_Service@ReturnEvent:
   457                           	opt stack 0
   458                           
   459                           ; 3 bytes @ 0x3
   460  000092                     	ds	1
   461  000093                     printf@c:
   462                           	opt stack 0
   463  000093                     ___awmod@counter:
   464                           	opt stack 0
   465                           
   466                           ; 1 bytes @ 0x4
   467  000093                     	ds	1
   468  000094                     ___awmod@sign:
   469                           	opt stack 0
   470                           
   471                           ; 1 bytes @ 0x5
   472  000094                     	ds	1
   473  000095                     ?___wmul:
   474                           	opt stack 0
   475  000095                     ___wmul@multiplier:
   476                           	opt stack 0
   477                           
   478                           ; 2 bytes @ 0x6
   479  000095                     	ds	1
   480  000096                     ES_GetMSBitSet@ReturnVal:
   481                           	opt stack 0
   482                           
   483                           ; 1 bytes @ 0x7
   484  000096                     	ds	1
   485  000097                     ES_GetMSBitSet@Nybble2Test:
   486                           	opt stack 0
   487  000097                     ___wmul@multiplicand:
   488                           	opt stack 0
   489                           
   490                           ; 2 bytes @ 0x8
   491  000097                     	ds	1
   492  000098                     ES_GetMSBitSet@LoopCntr:
   493                           	opt stack 0
   494                           
   495                           ; 1 bytes @ 0x9
   496  000098                     	ds	1
   497  000099                     ??_ES_Timer_Tick_Resp:
   498  000099                     ___wmul@product:
   499                           	opt stack 0
   500                           
   501                           ; 2 bytes @ 0xA
   502  000099                     	ds	2
   503  00009B                     ES_EnQueueFIFO@pBlock:
   504                           	opt stack 0
   505  00009B                     ES_DeQueue@pBlock:
   506                           	opt stack 0
   507                           
   508                           ; 2 bytes @ 0xC
   509  00009B                     	ds	2
   510  00009D                     ES_DeQueue@pReturnEvent:
   511                           	opt stack 0
   512  00009D                     ES_EnQueueFIFO@Event2Add:
   513                           	opt stack 0
   514                           
   515                           ; 3 bytes @ 0xE
   516  00009D                     	ds	2
   517  00009F                     ??_ES_DeQueue:
   518                           
   519                           ; 1 bytes @ 0x10
   520  00009F                     	ds	1
   521  0000A0                     ??_ES_EnQueueFIFO:
   522                           
   523                           ; 1 bytes @ 0x11
   524  0000A0                     	ds	1
   525  0000A1                     ES_DeQueue@SaveCrit:
   526                           	opt stack 0
   527                           
   528                           ; 1 bytes @ 0x12
   529  0000A1                     	ds	1
   530  0000A2                     ES_DeQueue@NumLeft:
   531                           	opt stack 0
   532                           
   533                           ; 1 bytes @ 0x13
   534  0000A2                     	ds	1
   535  0000A3                     ES_EnQueueFIFO@SaveCrit:
   536                           	opt stack 0
   537  0000A3                     ES_DeQueue@pThisQueue:
   538                           	opt stack 0
   539                           
   540                           ; 2 bytes @ 0x14
   541  0000A3                     	ds	1
   542  0000A4                     ES_EnQueueFIFO@pThisQueue:
   543                           	opt stack 0
   544                           
   545                           ; 2 bytes @ 0x15
   546  0000A4                     	ds	1
   547  0000A5                     ??_ES_Run:
   548                           
   549                           ; 1 bytes @ 0x16
   550  0000A5                     	ds	1
   551  0000A6                     ES_PostToService@TheEvent:
   552                           	opt stack 0
   553                           
   554                           ; 3 bytes @ 0x17
   555  0000A6                     	ds	3
   556  0000A9                     ??_ES_PostToService:
   557  0000A9                     ES_Run@HighestPrior:
   558                           	opt stack 0
   559                           
   560                           ; 1 bytes @ 0x1A
   561  0000A9                     	ds	2
   562  0000AB                     ES_PostToService@WhichService:
   563                           	opt stack 0
   564                           
   565                           ; 1 bytes @ 0x1C
   566  0000AB                     	ds	1
   567  0000AC                     InitCanRX_Service@ThisEvent:
   568                           	opt stack 0
   569                           
   570                           ; 3 bytes @ 0x1D
   571  0000AC                     	ds	3
   572  0000AF                     InitCanRX_Service@Priority:
   573                           	opt stack 0
   574                           
   575                           ; 1 bytes @ 0x20
   576  0000AF                     	ds	1
   577  0000B0                     ES_Initialize@NewRate:
   578                           	opt stack 0
   579                           
   580                           ; 2 bytes @ 0x21
   581  0000B0                     	ds	2
   582  0000B2                     ES_Initialize@i:
   583                           	opt stack 0
   584                           
   585                           ; 1 bytes @ 0x23
   586  0000B2                     	ds	1
   587  0000B3                     main@ErrorType:
   588                           	opt stack 0
   589                           
   590                           ; 1 bytes @ 0x24
   591  0000B3                     	ds	1
   592                           tblptru	equ	0xFF8
   593                           postinc0	equ	0xFEE
   594                           wreg	equ	0xFE8
   595                           
   596                           	psect	cstackCOMRAM
   597  000001                     __pcstackCOMRAM:
   598                           	opt stack 0
   599  000001                     ?i2___awmod:
   600                           	opt stack 0
   601  000001                     i2___awmod@dividend:
   602                           	opt stack 0
   603                           
   604                           ; 2 bytes @ 0x0
   605  000001                     	ds	2
   606  000003                     i2___awmod@divisor:
   607                           	opt stack 0
   608                           
   609                           ; 2 bytes @ 0x2
   610  000003                     	ds	2
   611  000005                     i2___awmod@counter:
   612                           	opt stack 0
   613                           
   614                           ; 1 bytes @ 0x4
   615  000005                     	ds	1
   616  000006                     i2___awmod@sign:
   617                           	opt stack 0
   618                           
   619                           ; 1 bytes @ 0x5
   620  000006                     	ds	1
   621  000007                     ?i2___wmul:
   622                           	opt stack 0
   623  000007                     i2___wmul@multiplier:
   624                           	opt stack 0
   625                           
   626                           ; 2 bytes @ 0x6
   627  000007                     	ds	2
   628  000009                     i2___wmul@multiplicand:
   629                           	opt stack 0
   630                           
   631                           ; 2 bytes @ 0x8
   632  000009                     	ds	2
   633  00000B                     i2___wmul@product:
   634                           	opt stack 0
   635                           
   636                           ; 2 bytes @ 0xA
   637  00000B                     	ds	2
   638  00000D                     i2ES_EnQueueFIFO@pBlock:
   639                           	opt stack 0
   640                           
   641                           ; 2 bytes @ 0xC
   642  00000D                     	ds	2
   643  00000F                     i2ES_EnQueueFIFO@Event2Add:
   644                           	opt stack 0
   645                           
   646                           ; 3 bytes @ 0xE
   647  00000F                     	ds	3
   648  000012                     ??i2_ES_EnQueueFIFO:
   649                           
   650                           ; 1 bytes @ 0x11
   651  000012                     	ds	3
   652  000015                     i2ES_EnQueueFIFO@SaveCrit:
   653                           	opt stack 0
   654                           
   655                           ; 1 bytes @ 0x14
   656  000015                     	ds	1
   657  000016                     i2ES_EnQueueFIFO@pThisQueue:
   658                           	opt stack 0
   659                           
   660                           ; 2 bytes @ 0x15
   661  000016                     	ds	2
   662  000018                     i2ES_PostToService@TheEvent:
   663                           	opt stack 0
   664                           
   665                           ; 3 bytes @ 0x17
   666  000018                     	ds	3
   667  00001B                     ??i2_ES_PostToService:
   668                           
   669                           ; 1 bytes @ 0x1A
   670  00001B                     	ds	2
   671  00001D                     i2ES_PostToService@WhichService:
   672                           	opt stack 0
   673                           
   674                           ; 1 bytes @ 0x1C
   675  00001D                     	ds	1
   676  00001E                     PostCanRX_Service@ThisEvent:
   677                           	opt stack 0
   678                           
   679                           ; 3 bytes @ 0x1D
   680  00001E                     	ds	3
   681  000021                     ProcessReceive@Event2Post:
   682                           	opt stack 0
   683                           
   684                           ; 3 bytes @ 0x20
   685  000021                     	ds	3
   686  000024                     ??_ISR:
   687                           
   688                           ; 1 bytes @ 0x23
   689  000024                     	ds	16
   690                           tblptru	equ	0xFF8
   691                           postinc0	equ	0xFEE
   692                           wreg	equ	0xFE8
   693                           
   694 ;;
   695 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
   696 ;;
   697 ;; *************** function _main *****************
   698 ;; Defined at:
   699 ;;		line 25 in file "main.c"
   700 ;; Parameters:    Size  Location     Type
   701 ;;		None
   702 ;; Auto vars:     Size  Location     Type
   703 ;;  ErrorType       1   36[BANK0 ] enum E15649
   704 ;; Return value:  Size  Location     Type
   705 ;;                  2  299[None  ] int 
   706 ;; Registers used:
   707 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclat, tosl, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
   708 ;; Tracked objects:
   709 ;;		On entry : 0/0
   710 ;;		On exit  : 0/0
   711 ;;		Unchanged: 0/0
   712 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
   713 ;;      Params:         0       0       0       0
   714 ;;      Locals:         0       1       0       0
   715 ;;      Temps:          0       0       0       0
   716 ;;      Totals:         0       1       0       0
   717 ;;Total ram usage:        1 bytes
   718 ;; Hardware stack levels required when called:   12
   719 ;; This function calls:
   720 ;;		_ES_Initialize
   721 ;;		_ES_Run
   722 ;;		_printf
   723 ;; This function is called by:
   724 ;;		Startup code after reset
   725 ;; This function uses a non-reentrant model
   726 ;;
   727                           
   728                           	psect	text0
   729  000BE0                     __ptext0:
   730                           	opt stack 0
   731  000BE0                     _main:
   732                           	opt stack 19
   733                           
   734                           ;main.c: 28: IRCF0 = 1;
   735                           
   736                           ;incstack = 0
   737  000BE0  88D3               	bsf	4051,4,c	;volatile
   738                           
   739                           ;main.c: 29: IRCF1 = 1;
   740  000BE2  8AD3               	bsf	4051,5,c	;volatile
   741                           
   742                           ;main.c: 30: IRCF2 = 1;
   743  000BE4  8CD3               	bsf	4051,6,c	;volatile
   744                           
   745                           ;main.c: 31: SCS1 = 1;
   746  000BE6  82D3               	bsf	4051,1,c	;volatile
   747                           
   748                           ;main.c: 32: ADCON1 = 0x0F;
   749  000BE8  0E0F               	movlw	15
   750  000BEA  6EC1               	movwf	4033,c	;volatile
   751                           
   752                           ;main.c: 40: ES_Return_t ErrorType;
   753                           ;main.c: 56: ErrorType = ES_Initialize(ES_Timer_RATE_1mS);
   754  000BEC  0E9C               	movlw	156
   755  000BEE  0100               	movlb	0	; () banked
   756  000BF0  6FB1               	movwf	(ES_Initialize@NewRate+1)& (0+255),b
   757  000BF2  0E3F               	movlw	63
   758  000BF4  6FB0               	movwf	ES_Initialize@NewRate& (0+255),b
   759  000BF6  ECE9  F002         	call	_ES_Initialize	;wreg free
   760  000BFA  0100               	movlb	0	; () banked
   761  000BFC  6FB3               	movwf	main@ErrorType& (0+255),b
   762                           
   763                           ; BSR set to: 0
   764                           ;main.c: 57: if ( ErrorType == Success ) {
   765  000BFE  0100               	movlb	0	; () banked
   766  000C00  51B3               	movf	main@ErrorType& (0+255),w,b
   767  000C02  0100               	movlb	0	; () banked
   768  000C04  A4D8               	btfss	status,2,c
   769  000C06  D029               	goto	l2448
   770                           
   771                           ; BSR set to: 0
   772                           ;main.c: 59: ErrorType = ES_Run();
   773  000C08  EC6F  F002         	call	_ES_Run	;wreg free
   774  000C0C  0100               	movlb	0	; () banked
   775  000C0E  6FB3               	movwf	main@ErrorType& (0+255),b
   776                           
   777                           ; BSR set to: 0
   778                           ;main.c: 61: }
   779                           ;main.c: 63: switch (ErrorType){
   780  000C10  D024               	goto	l2448
   781  000C12                     l2438:
   782                           
   783                           ; BSR set to: 0
   784                           ;main.c: 65: printf("Failed on attempt to Post\n");
   785  000C12  0E5B               	movlw	low STR_1
   786  000C14  0100               	movlb	0	; () banked
   787  000C16  6F8F               	movwf	printf@f& (0+255),b
   788  000C18  0E03               	movlw	high STR_1
   789  000C1A  0100               	movlb	0	; () banked
   790  000C1C  6F90               	movwf	(printf@f+1)& (0+255),b
   791  000C1E  ECE2  F007         	call	_printf	;wreg free
   792                           
   793                           ;main.c: 66: break;
   794  000C22  D027               	goto	l307
   795  000C24                     l2440:
   796                           
   797                           ;main.c: 68: printf("Failed on NULL pointer\n");
   798  000C24  0E76               	movlw	low STR_2
   799  000C26  0100               	movlb	0	; () banked
   800  000C28  6F8F               	movwf	printf@f& (0+255),b
   801  000C2A  0E03               	movlw	high STR_2
   802  000C2C  0100               	movlb	0	; () banked
   803  000C2E  6F90               	movwf	(printf@f+1)& (0+255),b
   804  000C30  ECE2  F007         	call	_printf	;wreg free
   805                           
   806                           ;main.c: 69: break;
   807  000C34  D01E               	goto	l307
   808  000C36                     l2442:
   809                           
   810                           ;main.c: 71: printf("Failed Initialization\n");
   811  000C36  0E8E               	movlw	low STR_3
   812  000C38  0100               	movlb	0	; () banked
   813  000C3A  6F8F               	movwf	printf@f& (0+255),b
   814  000C3C  0E03               	movlw	high STR_3
   815  000C3E  0100               	movlb	0	; () banked
   816  000C40  6F90               	movwf	(printf@f+1)& (0+255),b
   817  000C42  ECE2  F007         	call	_printf	;wreg free
   818                           
   819                           ;main.c: 72: break;
   820  000C46  D015               	goto	l307
   821  000C48                     l2444:
   822                           
   823                           ;main.c: 74: printf("Other Failure\n");
   824  000C48  0EA5               	movlw	low STR_4
   825  000C4A  0100               	movlb	0	; () banked
   826  000C4C  6F8F               	movwf	printf@f& (0+255),b
   827  000C4E  0E03               	movlw	high STR_4
   828  000C50  0100               	movlb	0	; () banked
   829  000C52  6F90               	movwf	(printf@f+1)& (0+255),b
   830  000C54  ECE2  F007         	call	_printf	;wreg free
   831                           
   832                           ;main.c: 76: }
   833                           
   834                           ;main.c: 75: break;
   835  000C58  D00C               	goto	l307
   836  000C5A                     l2448:
   837  000C5A  0100               	movlb	0	; () banked
   838  000C5C  51B3               	movf	main@ErrorType& (0+255),w,b
   839                           
   840                           ; Switch size 1, requested type "space"
   841                           ; Number of cases is 3, Range of values is 1 to 5
   842                           ; switch strategies available:
   843                           ; Name         Instructions Cycles
   844                           ; simple_byte           10     6 (average)
   845                           ;	Chosen strategy is simple_byte
   846  000C5E  0A01               	xorlw	1	; case 1
   847  000C60  B4D8               	btfsc	status,2,c
   848  000C62  D7D7               	goto	l2438
   849  000C64  0A02               	xorlw	2	; case 3
   850  000C66  B4D8               	btfsc	status,2,c
   851  000C68  D7DD               	goto	l2440
   852  000C6A  0A06               	xorlw	6	; case 5
   853  000C6C  B4D8               	btfsc	status,2,c
   854  000C6E  D7E3               	goto	l2442
   855  000C70  D7EB               	goto	l2444
   856  000C72                     l307:
   857                           
   858                           ;main.c: 78: ;
   859  000C72  D7FF               	goto	l307
   860  000C74                     __end_of_main:
   861                           	opt stack 0
   862                           tblptru	equ	0xFF8
   863                           postinc0	equ	0xFEE
   864                           wreg	equ	0xFE8
   865                           status	equ	0xFD8
   866                           
   867 ;; *************** function _printf *****************
   868 ;; Defined at:
   869 ;;		line 464 in file "/Applications/microchip/xc8/v1.38/sources/common/doprnt.c"
   870 ;; Parameters:    Size  Location     Type
   871 ;;  f               2    0[BANK0 ] PTR const unsigned char 
   872 ;;		 -> STR_4(15), STR_3(23), STR_2(24), STR_1(27), 
   873 ;; Auto vars:     Size  Location     Type
   874 ;;  tmpval          4    0        struct .
   875 ;;  cp              3    0        PTR const unsigned char 
   876 ;;  ap              2    2[BANK0 ] PTR void [1]
   877 ;;		 -> ?_printf(2), 
   878 ;;  len             2    0        unsigned int 
   879 ;;  val             2    0        unsigned int 
   880 ;;  c               1    4[BANK0 ] char 
   881 ;;  flag            1    0        unsigned char 
   882 ;;  prec            1    0        char 
   883 ;; Return value:  Size  Location     Type
   884 ;;                  2    0[BANK0 ] int 
   885 ;; Registers used:
   886 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
   887 ;; Tracked objects:
   888 ;;		On entry : 0/0
   889 ;;		On exit  : 0/0
   890 ;;		Unchanged: 0/0
   891 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
   892 ;;      Params:         0       2       0       0
   893 ;;      Locals:         0       3       0       0
   894 ;;      Temps:          0       0       0       0
   895 ;;      Totals:         0       5       0       0
   896 ;;Total ram usage:        5 bytes
   897 ;; Hardware stack levels used:    1
   898 ;; Hardware stack levels required when called:    8
   899 ;; This function calls:
   900 ;;		_putch
   901 ;; This function is called by:
   902 ;;		_main
   903 ;; This function uses a non-reentrant model
   904 ;;
   905                           
   906                           	psect	text1
   907  000FC4                     __ptext1:
   908                           	opt stack 0
   909  000FC4                     _printf:
   910                           	opt stack 22
   911                           
   912                           ;doprnt.c: 466: va_list ap;
   913                           ;doprnt.c: 499: signed char c;
   914                           ;doprnt.c: 506: signed char prec;
   915                           ;doprnt.c: 508: unsigned char flag;
   916                           ;doprnt.c: 523: union {
   917                           ;doprnt.c: 524: unsigned long vd;
   918                           ;doprnt.c: 525: double integ;
   919                           ;doprnt.c: 526: } tmpval;
   920                           ;doprnt.c: 528: unsigned int val;
   921                           ;doprnt.c: 529: unsigned len;
   922                           ;doprnt.c: 530: const char * cp;
   923                           ;doprnt.c: 533: *ap = __va_start();
   924                           
   925                           ;incstack = 0
   926  000FC4  0E91               	movlw	low (?_printf+2)
   927  000FC6  0100               	movlb	0	; () banked
   928  000FC8  6F91               	movwf	printf@ap& (0+255),b
   929  000FCA  0E00               	movlw	high (?_printf+2)
   930  000FCC  0100               	movlb	0	; () banked
   931  000FCE  6F92               	movwf	(printf@ap+1)& (0+255),b
   932                           
   933                           ;doprnt.c: 536: while(c = *f++) {
   934  000FD0  D004               	goto	l2254
   935  000FD2                     l2252:
   936                           
   937                           ; BSR set to: 0
   938                           ;doprnt.c: 540: {
   939                           ;doprnt.c: 541: (putch(c) );
   940  000FD2  0100               	movlb	0	; () banked
   941  000FD4  5193               	movf	printf@c& (0+255),w,b
   942  000FD6  EC7F  F008         	call	_putch
   943  000FDA                     l2254:
   944  000FDA  C08F  FFF6         	movff	printf@f,tblptrl
   945  000FDE  C090  FFF7         	movff	printf@f+1,tblptrh
   946  000FE2  0100               	movlb	0	; () banked
   947  000FE4  4B8F               	infsnz	printf@f& (0+255),f,b
   948  000FE6  2B90               	incf	(printf@f+1)& (0+255),f,b
   949  000FE8                     	if	0	;tblptru may be non-zero
   950  000FE8                     	endif
   951  000FE8                     	if	0	;tblptru may be non-zero
   952  000FE8                     	endif
   953  000FE8  0008               	tblrd		*
   954  000FEA  CFF5 F093          	movff	tablat,printf@c
   955  000FEE  0100               	movlb	0	; () banked
   956  000FF0  5193               	movf	printf@c& (0+255),w,b
   957  000FF2  B4D8               	btfsc	status,2,c
   958  000FF4  0012               	return	
   959  000FF6  D7ED               	goto	l2252
   960  000FF8                     __end_of_printf:
   961                           	opt stack 0
   962                           tblptru	equ	0xFF8
   963                           tblptrh	equ	0xFF7
   964                           tblptrl	equ	0xFF6
   965                           tablat	equ	0xFF5
   966                           postinc0	equ	0xFEE
   967                           wreg	equ	0xFE8
   968                           status	equ	0xFD8
   969                           
   970 ;; *************** function _putch *****************
   971 ;; Defined at:
   972 ;;		line 7 in file "/Applications/microchip/xc8/v1.38/sources/common/putch.c"
   973 ;; Parameters:    Size  Location     Type
   974 ;;  c               1    wreg     unsigned char 
   975 ;; Auto vars:     Size  Location     Type
   976 ;;  c               1    0[COMRAM] unsigned char 
   977 ;; Return value:  Size  Location     Type
   978 ;;                  1    wreg      void 
   979 ;; Registers used:
   980 ;;		wreg
   981 ;; Tracked objects:
   982 ;;		On entry : 0/0
   983 ;;		On exit  : 0/0
   984 ;;		Unchanged: 0/0
   985 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
   986 ;;      Params:         0       0       0       0
   987 ;;      Locals:         0       0       0       0
   988 ;;      Temps:          0       0       0       0
   989 ;;      Totals:         0       0       0       0
   990 ;;Total ram usage:        0 bytes
   991 ;; Hardware stack levels used:    1
   992 ;; Hardware stack levels required when called:    7
   993 ;; This function calls:
   994 ;;		Nothing
   995 ;; This function is called by:
   996 ;;		_printf
   997 ;; This function uses a non-reentrant model
   998 ;;
   999                           
  1000                           	psect	text2
  1001  0010FE                     __ptext2:
  1002                           	opt stack 0
  1003  0010FE                     _putch:
  1004                           	opt stack 22
  1005                           
  1006                           ; BSR set to: 0
  1007                           ;incstack = 0
  1008  0010FE  0012               	return		;funcret
  1009  001100                     __end_of_putch:
  1010                           	opt stack 0
  1011                           tblptru	equ	0xFF8
  1012                           tblptrh	equ	0xFF7
  1013                           tblptrl	equ	0xFF6
  1014                           tablat	equ	0xFF5
  1015                           postinc0	equ	0xFEE
  1016                           wreg	equ	0xFE8
  1017                           status	equ	0xFD8
  1018                           
  1019 ;; *************** function _ES_Run *****************
  1020 ;; Defined at:
  1021 ;;		line 277 in file "ES_Framework.c"
  1022 ;; Parameters:    Size  Location     Type
  1023 ;;		None
  1024 ;; Auto vars:     Size  Location     Type
  1025 ;;  HighestPrior    1   26[BANK0 ] unsigned char 
  1026 ;; Return value:  Size  Location     Type
  1027 ;;                  1    wreg      enum E15497
  1028 ;; Registers used:
  1029 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclat, tosl, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1030 ;; Tracked objects:
  1031 ;;		On entry : 0/0
  1032 ;;		On exit  : 0/0
  1033 ;;		Unchanged: 0/0
  1034 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  1035 ;;      Params:         0       0       0       0
  1036 ;;      Locals:         0       1       0       0
  1037 ;;      Temps:          0       4       0       0
  1038 ;;      Totals:         0       5       0       0
  1039 ;;Total ram usage:        5 bytes
  1040 ;; Hardware stack levels used:    1
  1041 ;; Hardware stack levels required when called:   10
  1042 ;; This function calls:
  1043 ;;		_ES_CheckUserEvents
  1044 ;;		_ES_DeQueue
  1045 ;;		_ES_GetMSBitSet
  1046 ;;		_RunCanRX_Service
  1047 ;;		__HW_Process_Pending_Ints
  1048 ;; This function is called by:
  1049 ;;		_main
  1050 ;; This function uses a non-reentrant model
  1051 ;;
  1052                           
  1053                           	psect	text3
  1054  0004DE                     __ptext3:
  1055                           	opt stack 0
  1056  0004DE                     _ES_Run:
  1057                           	opt stack 20
  1058                           
  1059                           ;ES_Framework.c: 287: while( (_HW_Process_Pending_Ints()) && (Ready != 0)){
  1060                           
  1061                           ;incstack = 0
  1062                           ;ES_Framework.c: 279: uint8_t HighestPrior;
  1063                           ;ES_Framework.c: 280: static ES_Event ThisEvent;
  1064                           ;ES_Framework.c: 282: while(1){
  1065  0004DE  D06B               	goto	l2232
  1066  0004E0                     l2220:
  1067                           
  1068                           ;ES_Framework.c: 288: HighestPrior = ES_GetMSBitSet(Ready);
  1069  0004E0  C085  F08F         	movff	_Ready,ES_GetMSBitSet@Val2Check
  1070  0004E4  C086  F090         	movff	_Ready+1,ES_GetMSBitSet@Val2Check+1
  1071  0004E8  EC4D  F005         	call	_ES_GetMSBitSet	;wreg free
  1072  0004EC  0100               	movlb	0	; () banked
  1073  0004EE  6FA9               	movwf	ES_Run@HighestPrior& (0+255),b
  1074                           
  1075                           ; BSR set to: 0
  1076                           ;ES_Framework.c: 289: if ( ES_DeQueue( EventQueues[HighestPrior].pMem, &ThisEvent ) == 0
      +                           ){
  1077  0004F0  0100               	movlb	0	; () banked
  1078  0004F2  51A9               	movf	ES_Run@HighestPrior& (0+255),w,b
  1079  0004F4  0D03               	mullw	3
  1080  0004F6  0E54               	movlw	low _EventQueues
  1081  0004F8  24F3               	addwf	prodl,w,c
  1082  0004FA  6EF6               	movwf	tblptrl,c
  1083  0004FC  0E03               	movlw	high _EventQueues
  1084  0004FE  20F4               	addwfc	prodh,w,c
  1085  000500  6EF7               	movwf	tblptrh,c
  1086  000502                     	if	0	;There are less than 3 active tblptr bytes
  1087  000502                     	endif
  1088  000502  0009               	tblrd		*+
  1089  000504  CFF5 F09B          	movff	tablat,ES_DeQueue@pBlock
  1090  000508  000A               	tblrd		*-
  1091  00050A  CFF5 F09C          	movff	tablat,ES_DeQueue@pBlock+1
  1092  00050E  0E8C               	movlw	low ES_Run@ThisEvent
  1093  000510  0100               	movlb	0	; () banked
  1094  000512  6F9D               	movwf	ES_DeQueue@pReturnEvent& (0+255),b
  1095  000514  0E00               	movlw	high ES_Run@ThisEvent
  1096  000516  0100               	movlb	0	; () banked
  1097  000518  6F9E               	movwf	(ES_DeQueue@pReturnEvent+1)& (0+255),b
  1098  00051A  ECDB  F001         	call	_ES_DeQueue	;wreg free
  1099  00051E  0900               	iorlw	0
  1100  000520  A4D8               	btfss	status,2,c
  1101  000522  D01F               	goto	l2226
  1102                           
  1103                           ;ES_Framework.c: 290: Ready &= ~BitNum2SetMask[HighestPrior];
  1104  000524  0100               	movlb	0	; () banked
  1105  000526  51A9               	movf	ES_Run@HighestPrior& (0+255),w,b
  1106  000528  0D02               	mullw	2
  1107  00052A  0E01               	movlw	low _BitNum2SetMask
  1108  00052C  24F3               	addwf	prodl,w,c
  1109  00052E  6EF6               	movwf	tblptrl,c
  1110  000530  0E03               	movlw	high _BitNum2SetMask
  1111  000532  20F4               	addwfc	prodh,w,c
  1112  000534  6EF7               	movwf	tblptrh,c
  1113  000536                     	if	0	;There are less than 3 active tblptr bytes
  1114  000536                     	endif
  1115  000536  0009               	tblrd		*+
  1116  000538  CFF5 F0A5          	movff	tablat,??_ES_Run
  1117  00053C  0009               	tblrd		*+
  1118  00053E  CFF5 F0A6          	movff	tablat,??_ES_Run+1
  1119  000542  0100               	movlb	0	; () banked
  1120  000544  1DA5               	comf	??_ES_Run& (0+255),w,b
  1121  000546  0100               	movlb	0	; () banked
  1122  000548  6FA7               	movwf	(??_ES_Run+2)& (0+255),b
  1123  00054A  0100               	movlb	0	; () banked
  1124  00054C  1DA6               	comf	(??_ES_Run+1)& (0+255),w,b
  1125  00054E  0100               	movlb	0	; () banked
  1126  000550  6FA8               	movwf	(??_ES_Run+3)& (0+255),b
  1127  000552  0100               	movlb	0	; () banked
  1128  000554  51A7               	movf	(??_ES_Run+2)& (0+255),w,b
  1129  000556  0100               	movlb	0	; () banked
  1130  000558  1785               	andwf	_Ready& (0+255),f,b
  1131  00055A  0100               	movlb	0	; () banked
  1132  00055C  51A8               	movf	(??_ES_Run+3)& (0+255),w,b
  1133  00055E  0100               	movlb	0	; () banked
  1134  000560  1786               	andwf	(_Ready+1)& (0+255),f,b
  1135  000562                     l2226:
  1136                           
  1137                           ;ES_Framework.c: 291: }
  1138                           ;ES_Framework.c: 292: if( ServDescList[HighestPrior].RunFunc(ThisEvent).EventType != ES_
      +                          NO_EVENT) {
  1139  000562  C08C  F08F         	movff	ES_Run@ThisEvent,RunCanRX_Service@ThisEvent
  1140  000566  C08D  F090         	movff	ES_Run@ThisEvent+1,RunCanRX_Service@ThisEvent+1
  1141  00056A  C08E  F091         	movff	ES_Run@ThisEvent+2,RunCanRX_Service@ThisEvent+2
  1142  00056E  0100               	movlb	0	; () banked
  1143  000570  51A9               	movf	ES_Run@HighestPrior& (0+255),w,b
  1144  000572  0D04               	mullw	4
  1145  000574  0E02               	movlw	2
  1146  000576  26F3               	addwf	prodl,f,c
  1147  000578  0E00               	movlw	0
  1148  00057A  22F4               	addwfc	prodh,f,c
  1149  00057C  0E50               	movlw	low _ServDescList
  1150  00057E  24F3               	addwf	prodl,w,c
  1151  000580  6EF6               	movwf	tblptrl,c
  1152  000582  0E03               	movlw	high _ServDescList
  1153  000584  20F4               	addwfc	prodh,w,c
  1154  000586  6EF7               	movwf	tblptrh,c
  1155  000588                     	if	0	;There are less than 3 active tblptr bytes
  1156  000588                     	endif
  1157  000588  D801               	call	u1358
  1158  00058A  D00C               	goto	u1359
  1159  00058C                     u1358:
  1160  00058C  0005               	push	
  1161  00058E  6EFA               	movwf	pclath,c
  1162  000590  0009               	tblrd		*+
  1163  000592  50F5               	movf	tablat,w,c
  1164  000594  6EFD               	movwf	tosl,c
  1165  000596  0009               	tblrd		*+
  1166  000598  50F5               	movf	tablat,w,c
  1167  00059A  6EFE               	movwf	tosh,c
  1168  00059C  50F8               	movf	tblptru,w,c
  1169  00059E  6EFF               	movwf	tosu,c
  1170  0005A0  50FA               	movf	pclath,w,c
  1171  0005A2  0012               	return		;indir
  1172  0005A4                     u1359:
  1173  0005A4  0E8F               	movlw	low ?_RunCanRX_Service
  1174  0005A6  6ED9               	movwf	fsr2l,c
  1175  0005A8  0E00               	movlw	high ?_RunCanRX_Service
  1176  0005AA  6EDA               	movwf	fsr2h,c
  1177  0005AC  50DF               	movf	indf2,w,c
  1178  0005AE  B4D8               	btfsc	status,2,c
  1179  0005B0  D002               	goto	l2232
  1180                           
  1181                           ;ES_Framework.c: 293: return FailedRun;
  1182  0005B2  0E02               	movlw	2
  1183  0005B4  0012               	return	
  1184  0005B6                     l2232:
  1185  0005B6  EC57  F008         	call	__HW_Process_Pending_Ints	;wreg free
  1186  0005BA  0900               	iorlw	0
  1187  0005BC  B4D8               	btfsc	status,2,c
  1188  0005BE  D006               	goto	l2236
  1189  0005C0  0100               	movlb	0	; () banked
  1190  0005C2  5185               	movf	_Ready& (0+255),w,b
  1191  0005C4  0100               	movlb	0	; () banked
  1192  0005C6  1186               	iorwf	(_Ready+1)& (0+255),w,b
  1193  0005C8  A4D8               	btfss	status,2,c
  1194  0005CA  D78A               	goto	l2220
  1195  0005CC                     l2236:
  1196                           
  1197                           ;ES_Framework.c: 294: }
  1198                           ;ES_Framework.c: 295: }
  1199                           ;ES_Framework.c: 298: ES_CheckUserEvents();
  1200  0005CC  EC62  F007         	call	_ES_CheckUserEvents	;wreg free
  1201  0005D0  D7F2               	goto	l2232
  1202  0005D2                     __end_of_ES_Run:
  1203                           	opt stack 0
  1204                           tosu	equ	0xFFF
  1205                           tosh	equ	0xFFE
  1206                           tosl	equ	0xFFD
  1207                           pclath	equ	0xFFA
  1208                           tblptru	equ	0xFF8
  1209                           tblptrh	equ	0xFF7
  1210                           tblptrl	equ	0xFF6
  1211                           tablat	equ	0xFF5
  1212                           prodh	equ	0xFF4
  1213                           prodl	equ	0xFF3
  1214                           postinc0	equ	0xFEE
  1215                           wreg	equ	0xFE8
  1216                           indf2	equ	0xFDF
  1217                           fsr2h	equ	0xFDA
  1218                           fsr2l	equ	0xFD9
  1219                           status	equ	0xFD8
  1220                           
  1221 ;; *************** function __HW_Process_Pending_Ints *****************
  1222 ;; Defined at:
  1223 ;;		line 220 in file "ES_Port.c"
  1224 ;; Parameters:    Size  Location     Type
  1225 ;;		None
  1226 ;; Auto vars:     Size  Location     Type
  1227 ;;		None
  1228 ;; Return value:  Size  Location     Type
  1229 ;;                  1    wreg      unsigned char 
  1230 ;; Registers used:
  1231 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1232 ;; Tracked objects:
  1233 ;;		On entry : 0/0
  1234 ;;		On exit  : 0/0
  1235 ;;		Unchanged: 0/0
  1236 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  1237 ;;      Params:         0       0       0       0
  1238 ;;      Locals:         0       0       0       0
  1239 ;;      Temps:          0       0       0       0
  1240 ;;      Totals:         0       0       0       0
  1241 ;;Total ram usage:        0 bytes
  1242 ;; Hardware stack levels used:    1
  1243 ;; Hardware stack levels required when called:    9
  1244 ;; This function calls:
  1245 ;;		_ES_Timer_Tick_Resp
  1246 ;; This function is called by:
  1247 ;;		_ES_Run
  1248 ;; This function uses a non-reentrant model
  1249 ;;
  1250                           
  1251                           	psect	text4
  1252  0010AE                     __ptext4:
  1253                           	opt stack 0
  1254  0010AE                     __HW_Process_Pending_Ints:
  1255                           	opt stack 20
  1256                           
  1257                           ;ES_Port.c: 222: while (TickCount > 0)
  1258                           
  1259                           ;incstack = 0
  1260  0010AE  D004               	goto	l2116
  1261  0010B0                     l2112:
  1262                           
  1263                           ;ES_Port.c: 223: {
  1264                           ;ES_Port.c: 225: ES_Timer_Tick_Resp();
  1265  0010B0  ECD0  F003         	call	_ES_Timer_Tick_Resp	;wreg free
  1266                           
  1267                           ;ES_Port.c: 226: TickCount--;
  1268  0010B4  0100               	movlb	0	; () banked
  1269  0010B6  078B               	decf	_TickCount& (0+255),f,b	;volatile
  1270  0010B8                     l2116:
  1271  0010B8  0100               	movlb	0	; () banked
  1272  0010BA  518B               	movf	_TickCount& (0+255),w,b	;volatile
  1273  0010BC  A4D8               	btfss	status,2,c
  1274  0010BE  D7F8               	goto	l2112
  1275                           
  1276                           ; BSR set to: 0
  1277                           ;ES_Port.c: 227: }
  1278                           ;ES_Port.c: 229: return 1;
  1279                           
  1280                           ; BSR set to: 0
  1281  0010C0  0E01               	movlw	1
  1282  0010C2  0012               	return	
  1283  0010C4                     __end_of__HW_Process_Pending_Ints:
  1284                           	opt stack 0
  1285                           tosu	equ	0xFFF
  1286                           tosh	equ	0xFFE
  1287                           tosl	equ	0xFFD
  1288                           pclath	equ	0xFFA
  1289                           tblptru	equ	0xFF8
  1290                           tblptrh	equ	0xFF7
  1291                           tblptrl	equ	0xFF6
  1292                           tablat	equ	0xFF5
  1293                           prodh	equ	0xFF4
  1294                           prodl	equ	0xFF3
  1295                           postinc0	equ	0xFEE
  1296                           wreg	equ	0xFE8
  1297                           indf2	equ	0xFDF
  1298                           fsr2h	equ	0xFDA
  1299                           fsr2l	equ	0xFD9
  1300                           status	equ	0xFD8
  1301                           
  1302 ;; *************** function _ES_Timer_Tick_Resp *****************
  1303 ;; Defined at:
  1304 ;;		line 284 in file "ES_Timers.c"
  1305 ;; Parameters:    Size  Location     Type
  1306 ;;		None
  1307 ;; Auto vars:     Size  Location     Type
  1308 ;;		None
  1309 ;; Return value:  Size  Location     Type
  1310 ;;                  1    wreg      void 
  1311 ;; Registers used:
  1312 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1313 ;; Tracked objects:
  1314 ;;		On entry : 0/0
  1315 ;;		On exit  : 0/0
  1316 ;;		Unchanged: 0/0
  1317 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  1318 ;;      Params:         0       0       0       0
  1319 ;;      Locals:         0       0       0       0
  1320 ;;      Temps:          0       4       0       0
  1321 ;;      Totals:         0       4       0       0
  1322 ;;Total ram usage:        4 bytes
  1323 ;; Hardware stack levels used:    1
  1324 ;; Hardware stack levels required when called:    8
  1325 ;; This function calls:
  1326 ;;		_ES_GetMSBitSet
  1327 ;; This function is called by:
  1328 ;;		__HW_Process_Pending_Ints
  1329 ;; This function uses a non-reentrant model
  1330 ;;
  1331                           
  1332                           	psect	text5
  1333  0007A0                     __ptext5:
  1334                           	opt stack 0
  1335  0007A0                     _ES_Timer_Tick_Resp:
  1336                           	opt stack 20
  1337                           
  1338                           ;ES_Timers.c: 286: static Tflag_t NeedsProcessing;
  1339                           ;ES_Timers.c: 287: static uint8_t NextTimer2Process;
  1340                           ;ES_Timers.c: 288: static ES_Event NewEvent;
  1341                           ;ES_Timers.c: 290: if (TMR_ActiveFlags != 0)
  1342                           
  1343                           ; BSR set to: 0
  1344                           ;incstack = 0
  1345  0007A0  0100               	movlb	0	; () banked
  1346  0007A2  5187               	movf	_TMR_ActiveFlags& (0+255),w,b
  1347  0007A4  0100               	movlb	0	; () banked
  1348  0007A6  1188               	iorwf	(_TMR_ActiveFlags+1)& (0+255),w,b
  1349  0007A8  B4D8               	btfsc	status,2,c
  1350  0007AA  0012               	return	
  1351                           
  1352                           ; BSR set to: 0
  1353                           ;ES_Timers.c: 291: {
  1354                           ;ES_Timers.c: 293: NeedsProcessing = TMR_ActiveFlags;
  1355  0007AC  C087  F083         	movff	_TMR_ActiveFlags,ES_Timer_Tick_Resp@NeedsProcessing
  1356  0007B0  C088  F084         	movff	_TMR_ActiveFlags+1,ES_Timer_Tick_Resp@NeedsProcessing+1
  1357  0007B4                     l1968:
  1358                           
  1359                           ; BSR set to: 0
  1360                           ;ES_Timers.c: 296: NextTimer2Process = ES_GetMSBitSet(NeedsProcessing);
  1361  0007B4  C083  F08F         	movff	ES_Timer_Tick_Resp@NeedsProcessing,ES_GetMSBitSet@Val2Check
  1362  0007B8  C084  F090         	movff	ES_Timer_Tick_Resp@NeedsProcessing+1,ES_GetMSBitSet@Val2Check+1
  1363  0007BC  EC4D  F005         	call	_ES_GetMSBitSet	;wreg free
  1364  0007C0  0100               	movlb	0	; () banked
  1365  0007C2  6F89               	movwf	ES_Timer_Tick_Resp@NextTimer2Process& (0+255),b
  1366                           
  1367                           ; BSR set to: 0
  1368                           ;ES_Timers.c: 298: if(--TMR_TimerArray[NextTimer2Process] == 0)
  1369  0007C4  0100               	movlb	0	; () banked
  1370  0007C6  5189               	movf	ES_Timer_Tick_Resp@NextTimer2Process& (0+255),w,b
  1371  0007C8  0D02               	mullw	2
  1372  0007CA  0E60               	movlw	low _TMR_TimerArray
  1373  0007CC  24F3               	addwf	prodl,w,c
  1374  0007CE  6ED9               	movwf	fsr2l,c
  1375  0007D0  0E00               	movlw	high _TMR_TimerArray
  1376  0007D2  20F4               	addwfc	prodh,w,c
  1377  0007D4  6EDA               	movwf	fsr2h,c
  1378  0007D6  06DE               	decf	postinc2,f,c
  1379  0007D8  0E00               	movlw	0
  1380  0007DA  5ADD               	subwfb	postdec2,f,c
  1381  0007DC  50DE               	movf	postinc2,w,c
  1382  0007DE  10DE               	iorwf	postinc2,w,c
  1383  0007E0  A4D8               	btfss	status,2,c
  1384  0007E2  D026               	goto	l1978
  1385                           
  1386                           ; BSR set to: 0
  1387                           ;ES_Timers.c: 299: {
  1388                           ;ES_Timers.c: 300: NewEvent.EventType = ES_TIMEOUT;
  1389  0007E4  0E03               	movlw	3
  1390  0007E6  0100               	movlb	0	; () banked
  1391  0007E8  6F80               	movwf	ES_Timer_Tick_Resp@NewEvent& (0+255),b
  1392                           
  1393                           ; BSR set to: 0
  1394                           ;ES_Timers.c: 303: Timer2PostFunc[NextTimer2Process](NewEvent);
  1395  0007EA  C089  F081         	movff	ES_Timer_Tick_Resp@NextTimer2Process,ES_Timer_Tick_Resp@NewEvent+1
  1396  0007EE  0100               	movlb	0	; () banked
  1397  0007F0  6B82               	clrf	(ES_Timer_Tick_Resp@NewEvent+2)& (0+255),b
  1398                           
  1399                           ; BSR set to: 0
  1400                           ;ES_Timers.c: 305: TMR_ActiveFlags &= ~BitNum2SetMask[NextTimer2Process];
  1401  0007F2  0100               	movlb	0	; () banked
  1402  0007F4  5189               	movf	ES_Timer_Tick_Resp@NextTimer2Process& (0+255),w,b
  1403  0007F6  0D02               	mullw	2
  1404  0007F8  0E01               	movlw	low _BitNum2SetMask
  1405  0007FA  24F3               	addwf	prodl,w,c
  1406  0007FC  6EF6               	movwf	tblptrl,c
  1407  0007FE  0E03               	movlw	high _BitNum2SetMask
  1408  000800  20F4               	addwfc	prodh,w,c
  1409  000802  6EF7               	movwf	tblptrh,c
  1410  000804                     	if	0	;There are less than 3 active tblptr bytes
  1411  000804                     	endif
  1412  000804  0009               	tblrd		*+
  1413  000806  CFF5 F099          	movff	tablat,??_ES_Timer_Tick_Resp
  1414  00080A  0009               	tblrd		*+
  1415  00080C  CFF5 F09A          	movff	tablat,??_ES_Timer_Tick_Resp+1
  1416  000810  0100               	movlb	0	; () banked
  1417  000812  1D99               	comf	??_ES_Timer_Tick_Resp& (0+255),w,b
  1418  000814  0100               	movlb	0	; () banked
  1419  000816  6F9B               	movwf	(??_ES_Timer_Tick_Resp+2)& (0+255),b
  1420  000818  0100               	movlb	0	; () banked
  1421  00081A  1D9A               	comf	(??_ES_Timer_Tick_Resp+1)& (0+255),w,b
  1422  00081C  0100               	movlb	0	; () banked
  1423  00081E  6F9C               	movwf	(??_ES_Timer_Tick_Resp+3)& (0+255),b
  1424  000820  0100               	movlb	0	; () banked
  1425  000822  519B               	movf	(??_ES_Timer_Tick_Resp+2)& (0+255),w,b
  1426  000824  0100               	movlb	0	; () banked
  1427  000826  1787               	andwf	_TMR_ActiveFlags& (0+255),f,b
  1428  000828  0100               	movlb	0	; () banked
  1429  00082A  519C               	movf	(??_ES_Timer_Tick_Resp+3)& (0+255),w,b
  1430  00082C  0100               	movlb	0	; () banked
  1431  00082E  1788               	andwf	(_TMR_ActiveFlags+1)& (0+255),f,b
  1432  000830                     l1978:
  1433                           
  1434                           ; BSR set to: 0
  1435                           ;ES_Timers.c: 306: }
  1436                           ;ES_Timers.c: 308: NeedsProcessing &= ~BitNum2SetMask[NextTimer2Process];
  1437  000830  0100               	movlb	0	; () banked
  1438  000832  5189               	movf	ES_Timer_Tick_Resp@NextTimer2Process& (0+255),w,b
  1439  000834  0D02               	mullw	2
  1440  000836  0E01               	movlw	low _BitNum2SetMask
  1441  000838  24F3               	addwf	prodl,w,c
  1442  00083A  6EF6               	movwf	tblptrl,c
  1443  00083C  0E03               	movlw	high _BitNum2SetMask
  1444  00083E  20F4               	addwfc	prodh,w,c
  1445  000840  6EF7               	movwf	tblptrh,c
  1446  000842                     	if	0	;There are less than 3 active tblptr bytes
  1447  000842                     	endif
  1448  000842  0009               	tblrd		*+
  1449  000844  CFF5 F099          	movff	tablat,??_ES_Timer_Tick_Resp
  1450  000848  0009               	tblrd		*+
  1451  00084A  CFF5 F09A          	movff	tablat,??_ES_Timer_Tick_Resp+1
  1452  00084E  0100               	movlb	0	; () banked
  1453  000850  1D99               	comf	??_ES_Timer_Tick_Resp& (0+255),w,b
  1454  000852  0100               	movlb	0	; () banked
  1455  000854  6F9B               	movwf	(??_ES_Timer_Tick_Resp+2)& (0+255),b
  1456  000856  0100               	movlb	0	; () banked
  1457  000858  1D9A               	comf	(??_ES_Timer_Tick_Resp+1)& (0+255),w,b
  1458  00085A  0100               	movlb	0	; () banked
  1459  00085C  6F9C               	movwf	(??_ES_Timer_Tick_Resp+3)& (0+255),b
  1460  00085E  0100               	movlb	0	; () banked
  1461  000860  519B               	movf	(??_ES_Timer_Tick_Resp+2)& (0+255),w,b
  1462  000862  0100               	movlb	0	; () banked
  1463  000864  1783               	andwf	ES_Timer_Tick_Resp@NeedsProcessing& (0+255),f,b
  1464  000866  0100               	movlb	0	; () banked
  1465  000868  519C               	movf	(??_ES_Timer_Tick_Resp+3)& (0+255),w,b
  1466  00086A  0100               	movlb	0	; () banked
  1467  00086C  1784               	andwf	(ES_Timer_Tick_Resp@NeedsProcessing+1)& (0+255),f,b
  1468                           
  1469                           ; BSR set to: 0
  1470                           ;ES_Timers.c: 309: }while(NeedsProcessing != 0);
  1471  00086E  0100               	movlb	0	; () banked
  1472  000870  5183               	movf	ES_Timer_Tick_Resp@NeedsProcessing& (0+255),w,b
  1473  000872  0100               	movlb	0	; () banked
  1474  000874  1184               	iorwf	(ES_Timer_Tick_Resp@NeedsProcessing+1)& (0+255),w,b
  1475  000876  B4D8               	btfsc	status,2,c
  1476  000878  0012               	return	
  1477  00087A  D79C               	goto	l1968
  1478  00087C                     __end_of_ES_Timer_Tick_Resp:
  1479                           	opt stack 0
  1480                           tosu	equ	0xFFF
  1481                           tosh	equ	0xFFE
  1482                           tosl	equ	0xFFD
  1483                           pclath	equ	0xFFA
  1484                           tblptru	equ	0xFF8
  1485                           tblptrh	equ	0xFF7
  1486                           tblptrl	equ	0xFF6
  1487                           tablat	equ	0xFF5
  1488                           prodh	equ	0xFF4
  1489                           prodl	equ	0xFF3
  1490                           postinc0	equ	0xFEE
  1491                           wreg	equ	0xFE8
  1492                           indf2	equ	0xFDF
  1493                           postinc2	equ	0xFDE
  1494                           postdec2	equ	0xFDD
  1495                           fsr2h	equ	0xFDA
  1496                           fsr2l	equ	0xFD9
  1497                           status	equ	0xFD8
  1498                           
  1499 ;; *************** function _ES_GetMSBitSet *****************
  1500 ;; Defined at:
  1501 ;;		line 79 in file "ES_LookupTables.c"
  1502 ;; Parameters:    Size  Location     Type
  1503 ;;  Val2Check       2    0[BANK0 ] unsigned int 
  1504 ;; Auto vars:     Size  Location     Type
  1505 ;;  LoopCntr        1    9[BANK0 ] char 
  1506 ;;  Nybble2Test     1    8[BANK0 ] unsigned char 
  1507 ;;  ReturnVal       1    7[BANK0 ] unsigned char 
  1508 ;; Return value:  Size  Location     Type
  1509 ;;                  1    wreg      unsigned char 
  1510 ;; Registers used:
  1511 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh
  1512 ;; Tracked objects:
  1513 ;;		On entry : 0/0
  1514 ;;		On exit  : 0/0
  1515 ;;		Unchanged: 0/0
  1516 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  1517 ;;      Params:         0       2       0       0
  1518 ;;      Locals:         0       3       0       0
  1519 ;;      Temps:          0       5       0       0
  1520 ;;      Totals:         0      10       0       0
  1521 ;;Total ram usage:       10 bytes
  1522 ;; Hardware stack levels used:    1
  1523 ;; Hardware stack levels required when called:    7
  1524 ;; This function calls:
  1525 ;;		Nothing
  1526 ;; This function is called by:
  1527 ;;		_ES_Run
  1528 ;;		_ES_Timer_Tick_Resp
  1529 ;; This function uses a non-reentrant model
  1530 ;;
  1531                           
  1532                           	psect	text6
  1533  000A9A                     __ptext6:
  1534                           	opt stack 0
  1535  000A9A                     _ES_GetMSBitSet:
  1536                           	opt stack 20
  1537                           
  1538                           ;ES_LookupTables.c: 81: int8_t LoopCntr;
  1539                           ;ES_LookupTables.c: 82: uint8_t Nybble2Test;
  1540                           ;ES_LookupTables.c: 83: uint8_t ReturnVal = 128;
  1541                           
  1542                           ; BSR set to: 0
  1543                           ;incstack = 0
  1544  000A9A  0E80               	movlw	128
  1545  000A9C  0100               	movlb	0	; () banked
  1546  000A9E  6F96               	movwf	ES_GetMSBitSet@ReturnVal& (0+255),b
  1547                           
  1548                           ;ES_LookupTables.c: 86: for( LoopCntr = sizeof(Val2Check) * (8/4)-1;
  1549  000AA0  0E03               	movlw	3
  1550  000AA2  0100               	movlb	0	; () banked
  1551  000AA4  6F98               	movwf	ES_GetMSBitSet@LoopCntr& (0+255),b
  1552  000AA6                     l1888:
  1553                           
  1554                           ; BSR set to: 0
  1555                           ;ES_LookupTables.c: 87: LoopCntr >= 0; LoopCntr--) {
  1556  000AA6  0100               	movlb	0	; () banked
  1557  000AA8  BF98               	btfsc	ES_GetMSBitSet@LoopCntr& (0+255),7,b
  1558  000AAA  D046               	goto	l1902
  1559                           
  1560                           ; BSR set to: 0
  1561                           ;ES_LookupTables.c: 89: Nybble2Test = (uint8_t)
  1562                           ;ES_LookupTables.c: 90: ((Val2Check >> (uint8_t)(LoopCntr * 4)) &
  1563                           ;ES_LookupTables.c: 91: 0x0F);
  1564                           
  1565                           ; BSR set to: 0
  1566                           
  1567                           ; BSR set to: 0
  1568  000AAC  0100               	movlb	0	; () banked
  1569  000AAE  5198               	movf	ES_GetMSBitSet@LoopCntr& (0+255),w,b
  1570  000AB0  0D04               	mullw	4
  1571  000AB2  CFF3 F091          	movff	prodl,??_ES_GetMSBitSet
  1572  000AB6  C08F  F092         	movff	ES_GetMSBitSet@Val2Check,??_ES_GetMSBitSet+1
  1573  000ABA  C090  F093         	movff	ES_GetMSBitSet@Val2Check+1,??_ES_GetMSBitSet+2
  1574  000ABE  0100               	movlb	0	; () banked
  1575  000AC0  2B91               	incf	??_ES_GetMSBitSet& (0+255),f,b
  1576  000AC2  D004               	goto	u994
  1577  000AC4                     u995:
  1578  000AC4  0100               	movlb	0	; () banked
  1579  000AC6  90D8               	bcf	status,0,c
  1580  000AC8  3393               	rrcf	(??_ES_GetMSBitSet+2)& (0+255),f,b
  1581  000ACA  3392               	rrcf	(??_ES_GetMSBitSet+1)& (0+255),f,b
  1582  000ACC                     u994:
  1583  000ACC  0100               	movlb	0	; () banked
  1584  000ACE  2F91               	decfsz	??_ES_GetMSBitSet& (0+255),f,b
  1585  000AD0  D7F9               	goto	u995
  1586  000AD2  0100               	movlb	0	; () banked
  1587  000AD4  5192               	movf	(??_ES_GetMSBitSet+1)& (0+255),w,b
  1588  000AD6  0B0F               	andlw	15
  1589  000AD8  0100               	movlb	0	; () banked
  1590  000ADA  6F97               	movwf	ES_GetMSBitSet@Nybble2Test& (0+255),b
  1591                           
  1592                           ; BSR set to: 0
  1593                           ;ES_LookupTables.c: 92: if ( Nybble2Test != 0){
  1594  000ADC  0100               	movlb	0	; () banked
  1595  000ADE  5197               	movf	ES_GetMSBitSet@Nybble2Test& (0+255),w,b
  1596  000AE0  0100               	movlb	0	; () banked
  1597  000AE2  B4D8               	btfsc	status,2,c
  1598  000AE4  D026               	goto	l1898
  1599                           
  1600                           ; BSR set to: 0
  1601                           ;ES_LookupTables.c: 94: ReturnVal = Nybble2MSBitNum[Nybble2Test-1] +
  1602                           ;ES_LookupTables.c: 95: (LoopCntr * 4);
  1603  000AE6  0EFF               	movlw	255
  1604  000AE8  0100               	movlb	0	; () banked
  1605  000AEA  6F91               	movwf	??_ES_GetMSBitSet& (0+255),b
  1606  000AEC  0EFF               	movlw	255
  1607  000AEE  0100               	movlb	0	; () banked
  1608  000AF0  6F92               	movwf	(??_ES_GetMSBitSet+1)& (0+255),b
  1609  000AF2  0100               	movlb	0	; () banked
  1610  000AF4  5197               	movf	ES_GetMSBitSet@Nybble2Test& (0+255),w,b
  1611  000AF6  0100               	movlb	0	; () banked
  1612  000AF8  6F93               	movwf	(??_ES_GetMSBitSet+2)& (0+255),b
  1613  000AFA  6B94               	clrf	(??_ES_GetMSBitSet+3)& (0+255),b
  1614  000AFC  0100               	movlb	0	; () banked
  1615  000AFE  5191               	movf	??_ES_GetMSBitSet& (0+255),w,b
  1616  000B00  0100               	movlb	0	; () banked
  1617  000B02  2793               	addwf	(??_ES_GetMSBitSet+2)& (0+255),f,b
  1618  000B04  0100               	movlb	0	; () banked
  1619  000B06  5192               	movf	(??_ES_GetMSBitSet+1)& (0+255),w,b
  1620  000B08  0100               	movlb	0	; () banked
  1621  000B0A  2394               	addwfc	(??_ES_GetMSBitSet+3)& (0+255),f,b
  1622  000B0C  0E41               	movlw	low _Nybble2MSBitNum
  1623  000B0E  0100               	movlb	0	; () banked
  1624  000B10  2593               	addwf	(??_ES_GetMSBitSet+2)& (0+255),w,b
  1625  000B12  6EF6               	movwf	tblptrl,c
  1626  000B14  0E03               	movlw	high _Nybble2MSBitNum
  1627  000B16  2194               	addwfc	(??_ES_GetMSBitSet+3)& (0+255),w,b
  1628  000B18  6EF7               	movwf	tblptrh,c
  1629  000B1A                     	if	0	;There are less than 3 active tblptr bytes
  1630  000B1A                     	endif
  1631  000B1A  0008               	tblrd		*
  1632  000B1C  CFF5 F095          	movff	tablat,??_ES_GetMSBitSet+4
  1633  000B20  0100               	movlb	0	; () banked
  1634  000B22  5198               	movf	ES_GetMSBitSet@LoopCntr& (0+255),w,b
  1635  000B24  0D04               	mullw	4
  1636  000B26  50F3               	movf	prodl,w,c
  1637  000B28  0100               	movlb	0	; () banked
  1638  000B2A  2595               	addwf	(??_ES_GetMSBitSet+4)& (0+255),w,b
  1639  000B2C  0100               	movlb	0	; () banked
  1640  000B2E  6F96               	movwf	ES_GetMSBitSet@ReturnVal& (0+255),b
  1641                           
  1642                           ;ES_LookupTables.c: 96: break;
  1643  000B30  D003               	goto	l1902
  1644  000B32                     l1898:
  1645                           
  1646                           ; BSR set to: 0
  1647  000B32  0100               	movlb	0	; () banked
  1648  000B34  0798               	decf	ES_GetMSBitSet@LoopCntr& (0+255),f,b
  1649  000B36  D7B7               	goto	l1888
  1650  000B38                     l1902:
  1651                           
  1652                           ; BSR set to: 0
  1653                           ;ES_LookupTables.c: 97: }
  1654                           ;ES_LookupTables.c: 98: }
  1655                           ;ES_LookupTables.c: 99: return ReturnVal;
  1656  000B38  0100               	movlb	0	; () banked
  1657  000B3A  5196               	movf	ES_GetMSBitSet@ReturnVal& (0+255),w,b
  1658  000B3C  0012               	return	
  1659  000B3E                     __end_of_ES_GetMSBitSet:
  1660                           	opt stack 0
  1661                           tosu	equ	0xFFF
  1662                           tosh	equ	0xFFE
  1663                           tosl	equ	0xFFD
  1664                           pclath	equ	0xFFA
  1665                           tblptru	equ	0xFF8
  1666                           tblptrh	equ	0xFF7
  1667                           tblptrl	equ	0xFF6
  1668                           tablat	equ	0xFF5
  1669                           prodh	equ	0xFF4
  1670                           prodl	equ	0xFF3
  1671                           postinc0	equ	0xFEE
  1672                           wreg	equ	0xFE8
  1673                           indf2	equ	0xFDF
  1674                           postinc2	equ	0xFDE
  1675                           postdec2	equ	0xFDD
  1676                           fsr2h	equ	0xFDA
  1677                           fsr2l	equ	0xFD9
  1678                           status	equ	0xFD8
  1679                           
  1680 ;; *************** function _RunCanRX_Service *****************
  1681 ;; Defined at:
  1682 ;;		line 142 in file "CanRX_Service.c"
  1683 ;; Parameters:    Size  Location     Type
  1684 ;;  ThisEvent       3    0[BANK0 ] struct ES_Event_t
  1685 ;; Auto vars:     Size  Location     Type
  1686 ;;  ReturnEvent     3    3[BANK0 ] struct ES_Event_t
  1687 ;; Return value:  Size  Location     Type
  1688 ;;                  3    0[BANK0 ] struct ES_Event_t
  1689 ;; Registers used:
  1690 ;;		wreg, status,2, status,0, cstack
  1691 ;; Tracked objects:
  1692 ;;		On entry : 0/0
  1693 ;;		On exit  : 0/0
  1694 ;;		Unchanged: 0/0
  1695 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  1696 ;;      Params:         0       3       0       0
  1697 ;;      Locals:         0       3       0       0
  1698 ;;      Temps:          0       0       0       0
  1699 ;;      Totals:         0       6       0       0
  1700 ;;Total ram usage:        6 bytes
  1701 ;; Hardware stack levels used:    1
  1702 ;; Hardware stack levels required when called:    8
  1703 ;; This function calls:
  1704 ;;		_InitCanHardware
  1705 ;;		_InitPins
  1706 ;; This function is called by:
  1707 ;;		_ES_Run
  1708 ;; This function uses a non-reentrant model
  1709 ;;
  1710                           
  1711                           	psect	text7
  1712  0009F4                     __ptext7:
  1713                           	opt stack 0
  1714  0009F4                     _RunCanRX_Service:
  1715                           	opt stack 21
  1716                           
  1717                           ;CanRX_Service.c: 144: ES_Event ReturnEvent;
  1718                           ;CanRX_Service.c: 146: switch(ThisEvent.EventType) {
  1719                           
  1720                           ; BSR set to: 0
  1721                           ;incstack = 0
  1722  0009F4  D02E               	goto	l2144
  1723  0009F6                     l2140:
  1724                           
  1725                           ;CanRX_Service.c: 148: InitPins();
  1726  0009F6  EC49  F008         	call	_InitPins	;wreg free
  1727                           
  1728                           ;CanRX_Service.c: 149: InitCanHardware();
  1729  0009FA  EC3A  F006         	call	_InitCanHardware	;wreg free
  1730                           
  1731                           ;CanRX_Service.c: 150: break;
  1732  0009FE  D043               	goto	l2146
  1733  000A00                     l421:
  1734                           
  1735                           ; BSR set to: 0
  1736                           ;CanRX_Service.c: 152: LATA0 = 1;
  1737  000A00  8089               	bsf	3977,0,c	;volatile
  1738                           
  1739                           ;CanRX_Service.c: 153: LATA1 = 0;
  1740  000A02  9289               	bcf	3977,1,c	;volatile
  1741  000A04  D002               	goto	L1
  1742  000A06                     l422:
  1743                           
  1744                           ; BSR set to: 0
  1745                           ;CanRX_Service.c: 161: LATA0 = 0;
  1746  000A06  9089               	bcf	3977,0,c	;volatile
  1747                           
  1748                           ;CanRX_Service.c: 162: LATA1 = 1;
  1749  000A08  8289               	bsf	3977,1,c	;volatile
  1750  000A0A                     L1:
  1751                           
  1752                           ;CanRX_Service.c: 163: LATA2 = 0;
  1753  000A0A  9489               	bcf	3977,2,c	;volatile
  1754  000A0C  D003               	goto	L2
  1755  000A0E                     l423:
  1756                           
  1757                           ; BSR set to: 0
  1758                           ;CanRX_Service.c: 170: LATA0 = 0;
  1759  000A0E  9089               	bcf	3977,0,c	;volatile
  1760                           
  1761                           ;CanRX_Service.c: 171: LATA1 = 0;
  1762  000A10  9289               	bcf	3977,1,c	;volatile
  1763                           
  1764                           ;CanRX_Service.c: 172: LATA2 = 1;
  1765  000A12  8489               	bsf	3977,2,c	;volatile
  1766  000A14                     L2:
  1767                           
  1768                           ;CanRX_Service.c: 173: LATA3 = 0;
  1769  000A14  9689               	bcf	3977,3,c	;volatile
  1770  000A16  D004               	goto	L3
  1771  000A18                     l424:
  1772                           
  1773                           ; BSR set to: 0
  1774                           ;CanRX_Service.c: 179: LATA0 = 0;
  1775  000A18  9089               	bcf	3977,0,c	;volatile
  1776                           
  1777                           ;CanRX_Service.c: 180: LATA1 = 0;
  1778  000A1A  9289               	bcf	3977,1,c	;volatile
  1779                           
  1780                           ;CanRX_Service.c: 181: LATA2 = 0;
  1781  000A1C  9489               	bcf	3977,2,c	;volatile
  1782                           
  1783                           ;CanRX_Service.c: 182: LATA3 = 1;
  1784  000A1E  8689               	bsf	3977,3,c	;volatile
  1785  000A20                     L3:
  1786                           
  1787                           ;CanRX_Service.c: 183: LATA4 = 0;
  1788  000A20  9889               	bcf	3977,4,c	;volatile
  1789  000A22  D005               	goto	L4
  1790  000A24                     l425:
  1791                           
  1792                           ; BSR set to: 0
  1793                           ;CanRX_Service.c: 188: LATA0 = 0;
  1794  000A24  9089               	bcf	3977,0,c	;volatile
  1795                           
  1796                           ;CanRX_Service.c: 189: LATA1 = 0;
  1797  000A26  9289               	bcf	3977,1,c	;volatile
  1798                           
  1799                           ;CanRX_Service.c: 190: LATA2 = 0;
  1800  000A28  9489               	bcf	3977,2,c	;volatile
  1801                           
  1802                           ;CanRX_Service.c: 191: LATA3 = 1;
  1803  000A2A  8689               	bsf	3977,3,c	;volatile
  1804                           
  1805                           ;CanRX_Service.c: 192: LATA4 = 1;
  1806  000A2C  8889               	bsf	3977,4,c	;volatile
  1807  000A2E                     L4:
  1808                           
  1809                           ;CanRX_Service.c: 193: LATA5 = 0;
  1810  000A2E  9A89               	bcf	3977,5,c	;volatile
  1811  000A30  D006               	goto	L5
  1812  000A32                     l426:
  1813                           
  1814                           ; BSR set to: 0
  1815                           ;CanRX_Service.c: 197: LATA0 = 0;
  1816  000A32  9089               	bcf	3977,0,c	;volatile
  1817                           
  1818                           ;CanRX_Service.c: 198: LATA1 = 0;
  1819  000A34  9289               	bcf	3977,1,c	;volatile
  1820                           
  1821                           ;CanRX_Service.c: 199: LATA2 = 0;
  1822  000A36  9489               	bcf	3977,2,c	;volatile
  1823                           
  1824                           ;CanRX_Service.c: 200: LATA3 = 1;
  1825  000A38  8689               	bsf	3977,3,c	;volatile
  1826                           
  1827                           ;CanRX_Service.c: 201: LATA4 = 0;
  1828  000A3A  9889               	bcf	3977,4,c	;volatile
  1829                           
  1830                           ;CanRX_Service.c: 202: LATA5 = 1;
  1831  000A3C  8A89               	bsf	3977,5,c	;volatile
  1832  000A3E                     L5:
  1833                           
  1834                           ;CanRX_Service.c: 203: LATB0 = 0;
  1835  000A3E  908A               	bcf	3978,0,c	;volatile
  1836                           
  1837                           ;CanRX_Service.c: 204: break;
  1838  000A40  D022               	goto	l2146
  1839  000A42                     l427:
  1840                           
  1841                           ; BSR set to: 0
  1842                           ;CanRX_Service.c: 206: LATA0 = 0;
  1843  000A42  9089               	bcf	3977,0,c	;volatile
  1844                           
  1845                           ;CanRX_Service.c: 207: LATA1 = 0;
  1846  000A44  9289               	bcf	3977,1,c	;volatile
  1847                           
  1848                           ;CanRX_Service.c: 208: LATA2 = 0;
  1849  000A46  9489               	bcf	3977,2,c	;volatile
  1850                           
  1851                           ;CanRX_Service.c: 209: LATA3 = 1;
  1852  000A48  8689               	bsf	3977,3,c	;volatile
  1853                           
  1854                           ;CanRX_Service.c: 210: LATA4 = 0;
  1855  000A4A  9889               	bcf	3977,4,c	;volatile
  1856                           
  1857                           ;CanRX_Service.c: 211: LATA5 = 0;
  1858  000A4C  9A89               	bcf	3977,5,c	;volatile
  1859                           
  1860                           ;CanRX_Service.c: 212: LATB0 = 1;
  1861  000A4E  808A               	bsf	3978,0,c	;volatile
  1862                           
  1863                           ; BSR set to: 0
  1864                           ;CanRX_Service.c: 214: }
  1865                           
  1866                           ;CanRX_Service.c: 213: break;
  1867  000A50  D01A               	goto	l2146
  1868  000A52                     l2144:
  1869  000A52  0100               	movlb	0	; () banked
  1870  000A54  518F               	movf	RunCanRX_Service@ThisEvent& (0+255),w,b
  1871                           
  1872                           ; Switch size 1, requested type "space"
  1873                           ; Number of cases is 8, Range of values is 2 to 11
  1874                           ; switch strategies available:
  1875                           ; Name         Instructions Cycles
  1876                           ; simple_byte           25    13 (average)
  1877                           ;	Chosen strategy is simple_byte
  1878  000A56  0A02               	xorlw	2	; case 2
  1879  000A58  B4D8               	btfsc	status,2,c
  1880  000A5A  D7CD               	goto	l2140
  1881  000A5C  0A07               	xorlw	7	; case 5
  1882  000A5E  B4D8               	btfsc	status,2,c
  1883  000A60  D7CF               	goto	l421
  1884  000A62  0A03               	xorlw	3	; case 6
  1885  000A64  B4D8               	btfsc	status,2,c
  1886  000A66  D7D3               	goto	l423
  1887  000A68  0A01               	xorlw	1	; case 7
  1888  000A6A  B4D8               	btfsc	status,2,c
  1889  000A6C  D7CC               	goto	l422
  1890  000A6E  0A0F               	xorlw	15	; case 8
  1891  000A70  B4D8               	btfsc	status,2,c
  1892  000A72  D7D2               	goto	l424
  1893  000A74  0A01               	xorlw	1	; case 9
  1894  000A76  B4D8               	btfsc	status,2,c
  1895  000A78  D7D5               	goto	l425
  1896  000A7A  0A03               	xorlw	3	; case 10
  1897  000A7C  B4D8               	btfsc	status,2,c
  1898  000A7E  D7D9               	goto	l426
  1899  000A80  0A01               	xorlw	1	; case 11
  1900  000A82  B4D8               	btfsc	status,2,c
  1901  000A84  D7DE               	goto	l427
  1902  000A86                     l2146:
  1903                           
  1904                           ;CanRX_Service.c: 215: ReturnEvent.EventType = ES_NO_EVENT;
  1905  000A86  0E00               	movlw	0
  1906  000A88  0100               	movlb	0	; () banked
  1907  000A8A  6F92               	movwf	RunCanRX_Service@ReturnEvent& (0+255),b
  1908                           
  1909                           ; BSR set to: 0
  1910                           ;CanRX_Service.c: 216: return ReturnEvent;
  1911  000A8C  C092  F08F         	movff	RunCanRX_Service@ReturnEvent,?_RunCanRX_Service
  1912  000A90  C093  F090         	movff	RunCanRX_Service@ReturnEvent+1,?_RunCanRX_Service+1
  1913  000A94  C094  F091         	movff	RunCanRX_Service@ReturnEvent+2,?_RunCanRX_Service+2
  1914  000A98  0012               	return	
  1915  000A9A                     __end_of_RunCanRX_Service:
  1916                           	opt stack 0
  1917                           tosu	equ	0xFFF
  1918                           tosh	equ	0xFFE
  1919                           tosl	equ	0xFFD
  1920                           pclath	equ	0xFFA
  1921                           tblptru	equ	0xFF8
  1922                           tblptrh	equ	0xFF7
  1923                           tblptrl	equ	0xFF6
  1924                           tablat	equ	0xFF5
  1925                           prodh	equ	0xFF4
  1926                           prodl	equ	0xFF3
  1927                           postinc0	equ	0xFEE
  1928                           wreg	equ	0xFE8
  1929                           indf2	equ	0xFDF
  1930                           postinc2	equ	0xFDE
  1931                           postdec2	equ	0xFDD
  1932                           fsr2h	equ	0xFDA
  1933                           fsr2l	equ	0xFD9
  1934                           status	equ	0xFD8
  1935                           
  1936 ;; *************** function _InitPins *****************
  1937 ;; Defined at:
  1938 ;;		line 314 in file "CanRX_Service.c"
  1939 ;; Parameters:    Size  Location     Type
  1940 ;;		None
  1941 ;; Auto vars:     Size  Location     Type
  1942 ;;		None
  1943 ;; Return value:  Size  Location     Type
  1944 ;;                  1    wreg      void 
  1945 ;; Registers used:
  1946 ;;		wreg, status,2
  1947 ;; Tracked objects:
  1948 ;;		On entry : 0/0
  1949 ;;		On exit  : 0/0
  1950 ;;		Unchanged: 0/0
  1951 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  1952 ;;      Params:         0       0       0       0
  1953 ;;      Locals:         0       0       0       0
  1954 ;;      Temps:          0       0       0       0
  1955 ;;      Totals:         0       0       0       0
  1956 ;;Total ram usage:        0 bytes
  1957 ;; Hardware stack levels used:    1
  1958 ;; Hardware stack levels required when called:    7
  1959 ;; This function calls:
  1960 ;;		Nothing
  1961 ;; This function is called by:
  1962 ;;		_RunCanRX_Service
  1963 ;; This function uses a non-reentrant model
  1964 ;;
  1965                           
  1966                           	psect	text8
  1967  001092                     __ptext8:
  1968                           	opt stack 0
  1969  001092                     _InitPins:
  1970                           	opt stack 21
  1971                           
  1972                           ;CanRX_Service.c: 317: PORTB = 0x00;
  1973                           
  1974                           ; BSR set to: 0
  1975                           ;incstack = 0
  1976  001092  0E00               	movlw	0
  1977  001094  6E81               	movwf	3969,c	;volatile
  1978                           
  1979                           ;CanRX_Service.c: 318: LATB = 0x00;
  1980  001096  0E00               	movlw	0
  1981  001098  6E8A               	movwf	3978,c	;volatile
  1982                           
  1983                           ;CanRX_Service.c: 319: TRISBbits.TRISB2 = 0;
  1984  00109A  9493               	bcf	3987,2,c	;volatile
  1985                           
  1986                           ;CanRX_Service.c: 320: TRISBbits.TRISB3 = 1;
  1987  00109C  8693               	bsf	3987,3,c	;volatile
  1988                           
  1989                           ;CanRX_Service.c: 323: PORTA = 0x00;
  1990  00109E  0E00               	movlw	0
  1991  0010A0  6E80               	movwf	3968,c	;volatile
  1992                           
  1993                           ;CanRX_Service.c: 324: LATA = 0x00;
  1994  0010A2  0E00               	movlw	0
  1995  0010A4  6E89               	movwf	3977,c	;volatile
  1996                           
  1997                           ;CanRX_Service.c: 325: TRISA = 0x00;
  1998  0010A6  0E00               	movlw	0
  1999  0010A8  6E92               	movwf	3986,c	;volatile
  2000                           
  2001                           ;CanRX_Service.c: 326: TRISBbits.TRISB0 = 0;
  2002  0010AA  9093               	bcf	3987,0,c	;volatile
  2003  0010AC  0012               	return		;funcret
  2004  0010AE                     __end_of_InitPins:
  2005                           	opt stack 0
  2006                           tosu	equ	0xFFF
  2007                           tosh	equ	0xFFE
  2008                           tosl	equ	0xFFD
  2009                           pclath	equ	0xFFA
  2010                           tblptru	equ	0xFF8
  2011                           tblptrh	equ	0xFF7
  2012                           tblptrl	equ	0xFF6
  2013                           tablat	equ	0xFF5
  2014                           prodh	equ	0xFF4
  2015                           prodl	equ	0xFF3
  2016                           postinc0	equ	0xFEE
  2017                           wreg	equ	0xFE8
  2018                           indf2	equ	0xFDF
  2019                           postinc2	equ	0xFDE
  2020                           postdec2	equ	0xFDD
  2021                           fsr2h	equ	0xFDA
  2022                           fsr2l	equ	0xFD9
  2023                           status	equ	0xFD8
  2024                           
  2025 ;; *************** function _InitCanHardware *****************
  2026 ;; Defined at:
  2027 ;;		line 246 in file "CanRX_Service.c"
  2028 ;; Parameters:    Size  Location     Type
  2029 ;;		None
  2030 ;; Auto vars:     Size  Location     Type
  2031 ;;		None
  2032 ;; Return value:  Size  Location     Type
  2033 ;;                  1    wreg      void 
  2034 ;; Registers used:
  2035 ;;		wreg, status,2
  2036 ;; Tracked objects:
  2037 ;;		On entry : 0/0
  2038 ;;		On exit  : 0/0
  2039 ;;		Unchanged: 0/0
  2040 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  2041 ;;      Params:         0       0       0       0
  2042 ;;      Locals:         0       0       0       0
  2043 ;;      Temps:          0       0       0       0
  2044 ;;      Totals:         0       0       0       0
  2045 ;;Total ram usage:        0 bytes
  2046 ;; Hardware stack levels used:    1
  2047 ;; Hardware stack levels required when called:    7
  2048 ;; This function calls:
  2049 ;;		Nothing
  2050 ;; This function is called by:
  2051 ;;		_RunCanRX_Service
  2052 ;; This function uses a non-reentrant model
  2053 ;;
  2054                           
  2055                           	psect	text9
  2056  000C74                     __ptext9:
  2057                           	opt stack 0
  2058  000C74                     _InitCanHardware:
  2059                           	opt stack 21
  2060                           
  2061                           ;CanRX_Service.c: 250: CANCON = 0x80;
  2062                           
  2063                           ;incstack = 0
  2064  000C74  0E80               	movlw	128
  2065  000C76  6E6F               	movwf	3951,c	;volatile
  2066  000C78                     l444:
  2067  000C78  AE6E               	btfss	3950,7,c	;volatile
  2068  000C7A  D7FE               	goto	l444
  2069                           
  2070                           ;CanRX_Service.c: 253: CIOCON = 0x20;
  2071  000C7C  0E20               	movlw	32
  2072  000C7E  6E73               	movwf	3955,c	;volatile
  2073                           
  2074                           ;CanRX_Service.c: 256: BRGCON2bits.SEG2PHTS = 1;
  2075  000C80  8E71               	bsf	3953,7,c	;volatile
  2076                           
  2077                           ;CanRX_Service.c: 258: BRGCON1bits.BRP0 = 0;
  2078  000C82  9070               	bcf	3952,0,c	;volatile
  2079                           
  2080                           ;CanRX_Service.c: 259: BRGCON1bits.BRP1 = 1;
  2081  000C84  8270               	bsf	3952,1,c	;volatile
  2082                           
  2083                           ;CanRX_Service.c: 260: BRGCON1bits.BRP2 = 1;
  2084  000C86  8470               	bsf	3952,2,c	;volatile
  2085                           
  2086                           ;CanRX_Service.c: 261: BRGCON1bits.BRP3 = 0;
  2087  000C88  9670               	bcf	3952,3,c	;volatile
  2088                           
  2089                           ;CanRX_Service.c: 263: BRGCON2bits.PRSEG0 = 0;
  2090  000C8A  9071               	bcf	3953,0,c	;volatile
  2091                           
  2092                           ;CanRX_Service.c: 264: BRGCON2bits.PRSEG1 = 0;
  2093  000C8C  9271               	bcf	3953,1,c	;volatile
  2094                           
  2095                           ;CanRX_Service.c: 265: BRGCON2bits.PRSEG2 = 0;
  2096  000C8E  9471               	bcf	3953,2,c	;volatile
  2097                           
  2098                           ;CanRX_Service.c: 267: BRGCON2bits.SEG1PH0 = 0;
  2099  000C90  9671               	bcf	3953,3,c	;volatile
  2100                           
  2101                           ;CanRX_Service.c: 268: BRGCON2bits.SEG1PH1 = 0;
  2102  000C92  9871               	bcf	3953,4,c	;volatile
  2103                           
  2104                           ;CanRX_Service.c: 269: BRGCON2bits.SEG1PH2 = 0;
  2105  000C94  9A71               	bcf	3953,5,c	;volatile
  2106                           
  2107                           ;CanRX_Service.c: 271: BRGCON3bits.SEG2PH0 = 1;
  2108  000C96  8072               	bsf	3954,0,c	;volatile
  2109                           
  2110                           ;CanRX_Service.c: 272: BRGCON3bits.SEG2PH1 = 0;
  2111  000C98  9272               	bcf	3954,1,c	;volatile
  2112                           
  2113                           ;CanRX_Service.c: 273: BRGCON3bits.SEG2PH2 = 0;
  2114  000C9A  9472               	bcf	3954,2,c	;volatile
  2115                           
  2116                           ;CanRX_Service.c: 275: BRGCON1bits.SJW0 = 0;
  2117  000C9C  9C70               	bcf	3952,6,c	;volatile
  2118                           
  2119                           ;CanRX_Service.c: 279: RXB0CONbits.RXB0DBEN = 0;
  2120  000C9E  9460               	bcf	3936,2,c	;volatile
  2121                           
  2122                           ;CanRX_Service.c: 280: RXB0CONbits.RXM0 = 0;
  2123  000CA0  9A60               	bcf	3936,5,c	;volatile
  2124                           
  2125                           ;CanRX_Service.c: 281: RXB0CONbits.RXM1 = 0;
  2126  000CA2  9C60               	bcf	3936,6,c	;volatile
  2127                           
  2128                           ;CanRX_Service.c: 282: RXF0SIDH = 0x00;
  2129  000CA4  0E00               	movlw	0
  2130  000CA6  010F               	movlb	15	; () banked
  2131  000CA8  6F00               	movwf	0,b	;volatile
  2132                           
  2133                           ;CanRX_Service.c: 283: RXF0SIDL = 0x08;
  2134  000CAA  0E08               	movlw	8
  2135  000CAC  010F               	movlb	15	; () banked
  2136  000CAE  6F01               	movwf	1,b	;volatile
  2137                           
  2138                           ;CanRX_Service.c: 284: RXF0EIDH = 0x00;
  2139  000CB0  0E00               	movlw	0
  2140  000CB2  010F               	movlb	15	; () banked
  2141  000CB4  6F02               	movwf	2,b	;volatile
  2142                           
  2143                           ;CanRX_Service.c: 285: RXF0EIDL = 0x01;
  2144  000CB6  0E01               	movlw	1
  2145  000CB8  010F               	movlb	15	; () banked
  2146  000CBA  6F03               	movwf	3,b	;volatile
  2147                           
  2148                           ;CanRX_Service.c: 287: RXM0SIDH = 0x00;
  2149  000CBC  0E00               	movlw	0
  2150  000CBE  010F               	movlb	15	; () banked
  2151  000CC0  6F18               	movwf	24,b	;volatile
  2152                           
  2153                           ;CanRX_Service.c: 288: RXM0SIDL = 0x00;
  2154  000CC2  0E00               	movlw	0
  2155  000CC4  010F               	movlb	15	; () banked
  2156  000CC6  6F19               	movwf	25,b	;volatile
  2157                           
  2158                           ;CanRX_Service.c: 289: RXM0EIDH = 0x00;
  2159  000CC8  0E00               	movlw	0
  2160  000CCA  010F               	movlb	15	; () banked
  2161  000CCC  6F1A               	movwf	26,b	;volatile
  2162                           
  2163                           ;CanRX_Service.c: 290: RXM0EIDL = 0x01;
  2164  000CCE  0E01               	movlw	1
  2165  000CD0  010F               	movlb	15	; () banked
  2166  000CD2  6F1B               	movwf	27,b	;volatile
  2167                           
  2168                           ;CanRX_Service.c: 294: ECANCON = 0x00;
  2169  000CD4  0E00               	movlw	0
  2170  000CD6  6E77               	movwf	3959,c	;volatile
  2171                           
  2172                           ;CanRX_Service.c: 295: CANCON = 0b00010000;
  2173  000CD8  0E10               	movlw	16
  2174  000CDA  6E6F               	movwf	3951,c	;volatile
  2175  000CDC                     l447:
  2176  000CDC  BE6E               	btfsc	3950,7,c	;volatile
  2177  000CDE  D7FE               	goto	l447
  2178                           
  2179                           ;CanRX_Service.c: 299: RXB0IE = 1;
  2180  000CE0  80A3               	bsf	4003,0,c	;volatile
  2181                           
  2182                           ;CanRX_Service.c: 300: ERRIE = 1;
  2183  000CE2  8AA3               	bsf	4003,5,c	;volatile
  2184                           
  2185                           ;CanRX_Service.c: 301: IRXIE = 1;
  2186  000CE4  8EA3               	bsf	4003,7,c	;volatile
  2187                           
  2188                           ;CanRX_Service.c: 305: RXB0IF = 0;
  2189  000CE6  90A4               	bcf	4004,0,c	;volatile
  2190                           
  2191                           ;CanRX_Service.c: 306: ERRIF = 0;
  2192  000CE8  9AA4               	bcf	4004,5,c	;volatile
  2193                           
  2194                           ;CanRX_Service.c: 307: IRXIF = 0;
  2195  000CEA  9EA4               	bcf	4004,7,c	;volatile
  2196                           
  2197                           ;CanRX_Service.c: 308: TXB0IE = 1;
  2198  000CEC  84A3               	bsf	4003,2,c	;volatile
  2199                           
  2200                           ;CanRX_Service.c: 309: TXB0IF = 0;
  2201  000CEE  94A4               	bcf	4004,2,c	;volatile
  2202                           
  2203                           ;CanRX_Service.c: 310: TXB0CONbits.TXREQ = 0;
  2204  000CF0  010F               	movlb	15	; () banked
  2205  000CF2  9740               	bcf	64,3,b	;volatile
  2206                           
  2207                           ;CanRX_Service.c: 311: RXB0CONbits.RXFUL = 0;
  2208  000CF4  9E60               	bcf	3936,7,c	;volatile
  2209                           
  2210                           ; BSR set to: 15
  2211  000CF6  0012               	return		;funcret
  2212  000CF8                     __end_of_InitCanHardware:
  2213                           	opt stack 0
  2214                           tosu	equ	0xFFF
  2215                           tosh	equ	0xFFE
  2216                           tosl	equ	0xFFD
  2217                           pclath	equ	0xFFA
  2218                           tblptru	equ	0xFF8
  2219                           tblptrh	equ	0xFF7
  2220                           tblptrl	equ	0xFF6
  2221                           tablat	equ	0xFF5
  2222                           prodh	equ	0xFF4
  2223                           prodl	equ	0xFF3
  2224                           postinc0	equ	0xFEE
  2225                           wreg	equ	0xFE8
  2226                           indf2	equ	0xFDF
  2227                           postinc2	equ	0xFDE
  2228                           postdec2	equ	0xFDD
  2229                           fsr2h	equ	0xFDA
  2230                           fsr2l	equ	0xFD9
  2231                           status	equ	0xFD8
  2232                           
  2233 ;; *************** function _ES_DeQueue *****************
  2234 ;; Defined at:
  2235 ;;		line 164 in file "ES_Queue.c"
  2236 ;; Parameters:    Size  Location     Type
  2237 ;;  pBlock          2   12[BANK0 ] PTR struct ES_Event_t
  2238 ;;		 -> Queue0(12), 
  2239 ;;  pReturnEvent    2   14[BANK0 ] PTR struct ES_Event_t
  2240 ;;		 -> ES_Run@ThisEvent(3), ES_RecallEvents@RecalledEvent(3), 
  2241 ;; Auto vars:     Size  Location     Type
  2242 ;;  pThisQueue      2   20[BANK0 ] PTR struct .
  2243 ;;		 -> Queue0(12), 
  2244 ;;  NumLeft         1   19[BANK0 ] unsigned char 
  2245 ;;  SaveCrit        1   18[BANK0 ] unsigned char 
  2246 ;; Return value:  Size  Location     Type
  2247 ;;                  1    wreg      unsigned char 
  2248 ;; Registers used:
  2249 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  2250 ;; Tracked objects:
  2251 ;;		On entry : 0/0
  2252 ;;		On exit  : 0/0
  2253 ;;		Unchanged: 0/0
  2254 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  2255 ;;      Params:         0       4       0       0
  2256 ;;      Locals:         0       4       0       0
  2257 ;;      Temps:          0       2       0       0
  2258 ;;      Totals:         0      10       0       0
  2259 ;;Total ram usage:       10 bytes
  2260 ;; Hardware stack levels used:    1
  2261 ;; Hardware stack levels required when called:    8
  2262 ;; This function calls:
  2263 ;;		___lbmod
  2264 ;;		___wmul
  2265 ;; This function is called by:
  2266 ;;		_ES_Run
  2267 ;;		_ES_RecallEvents
  2268 ;; This function uses a non-reentrant model
  2269 ;;
  2270                           
  2271                           	psect	text10
  2272  0003B6                     __ptext10:
  2273                           	opt stack 0
  2274  0003B6                     _ES_DeQueue:
  2275                           	opt stack 21
  2276                           
  2277                           ;ES_Queue.c: 166: unsigned char SaveCrit;
  2278                           ;ES_Queue.c: 167: pQueue_t pThisQueue;
  2279                           ;ES_Queue.c: 168: uint8_t NumLeft;
  2280                           ;ES_Queue.c: 170: pThisQueue = (pQueue_t)pBlock;
  2281                           
  2282                           ; BSR set to: 15
  2283                           ;incstack = 0
  2284  0003B6  C09B  F0A3         	movff	ES_DeQueue@pBlock,ES_DeQueue@pThisQueue
  2285  0003BA  C09C  F0A4         	movff	ES_DeQueue@pBlock+1,ES_DeQueue@pThisQueue+1
  2286                           
  2287                           ;ES_Queue.c: 171: if ( pThisQueue->NumEntries > 0)
  2288  0003BE  0100               	movlb	0	; () banked
  2289  0003C0  EE20 F002          	lfsr	2,2
  2290  0003C4  51A3               	movf	ES_DeQueue@pThisQueue& (0+255),w,b
  2291  0003C6  26D9               	addwf	fsr2l,f,c
  2292  0003C8  51A4               	movf	(ES_DeQueue@pThisQueue+1)& (0+255),w,b
  2293  0003CA  22DA               	addwfc	fsr2h,f,c
  2294  0003CC  50DF               	movf	indf2,w,c
  2295  0003CE  B4D8               	btfsc	status,2,c
  2296  0003D0  D06F               	goto	l2088
  2297                           
  2298                           ; BSR set to: 0
  2299                           
  2300                           ;ES_Queue.c: 172: {
  2301                           ;ES_Queue.c: 173: do{ SaveCrit = INTCON; GIE = 0;}while(0);
  2302  0003D2  CFF2 F0A1          	movff	intcon,ES_DeQueue@SaveCrit	;volatile
  2303  0003D6  9EF2               	bcf	intcon,7,c	;volatile
  2304                           
  2305                           ; BSR set to: 0
  2306                           ;ES_Queue.c: 174: *pReturnEvent = pBlock[ 1 + pThisQueue->CurrentIndex ];
  2307                           
  2308                           ; BSR set to: 0
  2309  0003D8  0100               	movlb	0	; () banked
  2310  0003DA  EE20 F001          	lfsr	2,1
  2311  0003DE  51A3               	movf	ES_DeQueue@pThisQueue& (0+255),w,b
  2312  0003E0  26D9               	addwf	fsr2l,f,c
  2313  0003E2  51A4               	movf	(ES_DeQueue@pThisQueue+1)& (0+255),w,b
  2314  0003E4  22DA               	addwfc	fsr2h,f,c
  2315  0003E6  50DF               	movf	indf2,w,c
  2316  0003E8  0100               	movlb	0	; () banked
  2317  0003EA  6F9F               	movwf	??_ES_DeQueue& (0+255),b
  2318  0003EC  0E01               	movlw	1
  2319  0003EE  0100               	movlb	0	; () banked
  2320  0003F0  259F               	addwf	??_ES_DeQueue& (0+255),w,b
  2321  0003F2  0100               	movlb	0	; () banked
  2322  0003F4  6F95               	movwf	___wmul@multiplier& (0+255),b
  2323  0003F6  0100               	movlb	0	; () banked
  2324  0003F8  6B96               	clrf	(___wmul@multiplier+1)& (0+255),b
  2325  0003FA  0E00               	movlw	0
  2326  0003FC  2396               	addwfc	(___wmul@multiplier+1)& (0+255),f,b
  2327  0003FE  0E00               	movlw	0
  2328  000400  0100               	movlb	0	; () banked
  2329  000402  6F98               	movwf	(___wmul@multiplicand+1)& (0+255),b
  2330  000404  0E03               	movlw	3
  2331  000406  6F97               	movwf	___wmul@multiplicand& (0+255),b
  2332  000408  ECC7  F007         	call	___wmul	;wreg free
  2333  00040C  0100               	movlb	0	; () banked
  2334  00040E  5195               	movf	?___wmul& (0+255),w,b
  2335  000410  0100               	movlb	0	; () banked
  2336  000412  259B               	addwf	ES_DeQueue@pBlock& (0+255),w,b
  2337  000414  6ED9               	movwf	fsr2l,c
  2338  000416  0100               	movlb	0	; () banked
  2339  000418  5196               	movf	(?___wmul+1)& (0+255),w,b
  2340  00041A  0100               	movlb	0	; () banked
  2341  00041C  219C               	addwfc	(ES_DeQueue@pBlock+1)& (0+255),w,b
  2342  00041E  6EDA               	movwf	fsr2h,c
  2343  000420  C09D  FFE1         	movff	ES_DeQueue@pReturnEvent,fsr1l
  2344  000424  C09E  FFE2         	movff	ES_DeQueue@pReturnEvent+1,fsr1h
  2345  000428  CFDE FFE6          	movff	postinc2,postinc1
  2346  00042C  CFDE FFE6          	movff	postinc2,postinc1
  2347  000430  CFDE FFE6          	movff	postinc2,postinc1
  2348                           
  2349                           ; BSR set to: 0
  2350                           ;ES_Queue.c: 176: pThisQueue->CurrentIndex++;
  2351  000434  0100               	movlb	0	; () banked
  2352  000436  EE20 F001          	lfsr	2,1
  2353  00043A  51A3               	movf	ES_DeQueue@pThisQueue& (0+255),w,b
  2354  00043C  26D9               	addwf	fsr2l,f,c
  2355  00043E  51A4               	movf	(ES_DeQueue@pThisQueue+1)& (0+255),w,b
  2356  000440  22DA               	addwfc	fsr2h,f,c
  2357  000442  2ADF               	incf	indf2,f,c
  2358                           
  2359                           ; BSR set to: 0
  2360                           ;ES_Queue.c: 178: if (pThisQueue->CurrentIndex >= pThisQueue->QueueSize)
  2361  000444  C0A3  FFD9         	movff	ES_DeQueue@pThisQueue,fsr2l
  2362  000448  C0A4  FFDA         	movff	ES_DeQueue@pThisQueue+1,fsr2h
  2363  00044C  0100               	movlb	0	; () banked
  2364  00044E  EE10 F001          	lfsr	1,1
  2365  000452  51A3               	movf	ES_DeQueue@pThisQueue& (0+255),w,b
  2366  000454  26E1               	addwf	fsr1l,f,c
  2367  000456  51A4               	movf	(ES_DeQueue@pThisQueue+1)& (0+255),w,b
  2368  000458  22E2               	addwfc	fsr1h,f,c
  2369  00045A  50DE               	movf	postinc2,w,c
  2370  00045C  5CE6               	subwf	postinc1,w,c
  2371  00045E  A0D8               	btfss	status,0,c
  2372  000460  D019               	goto	l2084
  2373                           
  2374                           ; BSR set to: 0
  2375                           ;ES_Queue.c: 179: pThisQueue->CurrentIndex = (uint8_t)(pThisQueue->CurrentIndex % pThisQ
      +                          ueue->QueueSize);
  2376  000462  0100               	movlb	0	; () banked
  2377  000464  EE20 F001          	lfsr	2,1
  2378  000468  51A3               	movf	ES_DeQueue@pThisQueue& (0+255),w,b
  2379  00046A  26D9               	addwf	fsr2l,f,c
  2380  00046C  51A4               	movf	(ES_DeQueue@pThisQueue+1)& (0+255),w,b
  2381  00046E  22DA               	addwfc	fsr2h,f,c
  2382  000470  C0A3  FFE1         	movff	ES_DeQueue@pThisQueue,fsr1l
  2383  000474  C0A4  FFE2         	movff	ES_DeQueue@pThisQueue+1,fsr1h
  2384  000478  50E7               	movf	indf1,w,c
  2385  00047A  0100               	movlb	0	; () banked
  2386  00047C  6F8F               	movwf	___lbmod@divisor& (0+255),b
  2387  00047E  0100               	movlb	0	; () banked
  2388  000480  EE10 F001          	lfsr	1,1
  2389  000484  51A3               	movf	ES_DeQueue@pThisQueue& (0+255),w,b
  2390  000486  26E1               	addwf	fsr1l,f,c
  2391  000488  51A4               	movf	(ES_DeQueue@pThisQueue+1)& (0+255),w,b
  2392  00048A  22E2               	addwfc	fsr1h,f,c
  2393  00048C  50E7               	movf	indf1,w,c
  2394  00048E  EC87  F007         	call	___lbmod
  2395  000492  6EDF               	movwf	indf2,c
  2396  000494                     l2084:
  2397                           
  2398                           ;ES_Queue.c: 181: NumLeft = --pThisQueue->NumEntries;
  2399  000494  0100               	movlb	0	; () banked
  2400  000496  EE20 F002          	lfsr	2,2
  2401  00049A  51A3               	movf	ES_DeQueue@pThisQueue& (0+255),w,b
  2402  00049C  26D9               	addwf	fsr2l,f,c
  2403  00049E  51A4               	movf	(ES_DeQueue@pThisQueue+1)& (0+255),w,b
  2404  0004A0  22DA               	addwfc	fsr2h,f,c
  2405  0004A2  06DF               	decf	indf2,f,c
  2406  0004A4  50DF               	movf	indf2,w,c
  2407  0004A6  0100               	movlb	0	; () banked
  2408  0004A8  6FA2               	movwf	ES_DeQueue@NumLeft& (0+255),b
  2409                           
  2410                           ; BSR set to: 0
  2411                           ;ES_Queue.c: 182: {INTCON = SaveCrit;};
  2412  0004AA  C0A1  FFF2         	movff	ES_DeQueue@SaveCrit,intcon	;volatile
  2413                           
  2414                           ;ES_Queue.c: 183: }else {
  2415  0004AE  D014               	goto	l2094
  2416  0004B0                     l2088:
  2417                           
  2418                           ; BSR set to: 0
  2419                           ;ES_Queue.c: 184: (*pReturnEvent).EventType = ES_NO_EVENT;
  2420  0004B0  C09D  FFD9         	movff	ES_DeQueue@pReturnEvent,fsr2l
  2421  0004B4  C09E  FFDA         	movff	ES_DeQueue@pReturnEvent+1,fsr2h
  2422  0004B8  0E00               	movlw	0
  2423  0004BA  6EDF               	movwf	indf2,c
  2424                           
  2425                           ; BSR set to: 0
  2426                           ;ES_Queue.c: 185: (*pReturnEvent).EventParam = 0;
  2427  0004BC  0100               	movlb	0	; () banked
  2428  0004BE  EE20 F001          	lfsr	2,1
  2429  0004C2  519D               	movf	ES_DeQueue@pReturnEvent& (0+255),w,b
  2430  0004C4  26D9               	addwf	fsr2l,f,c
  2431  0004C6  519E               	movf	(ES_DeQueue@pReturnEvent+1)& (0+255),w,b
  2432  0004C8  22DA               	addwfc	fsr2h,f,c
  2433  0004CA  0E00               	movlw	0
  2434  0004CC  6EDE               	movwf	postinc2,c
  2435  0004CE  0E00               	movlw	0
  2436  0004D0  6EDD               	movwf	postdec2,c
  2437                           
  2438                           ; BSR set to: 0
  2439                           ;ES_Queue.c: 186: NumLeft = 0;
  2440  0004D2  0E00               	movlw	0
  2441  0004D4  0100               	movlb	0	; () banked
  2442  0004D6  6FA2               	movwf	ES_DeQueue@NumLeft& (0+255),b
  2443  0004D8                     l2094:
  2444                           
  2445                           ; BSR set to: 0
  2446                           ;ES_Queue.c: 187: }
  2447                           ;ES_Queue.c: 188: return NumLeft;
  2448  0004D8  0100               	movlb	0	; () banked
  2449  0004DA  51A2               	movf	ES_DeQueue@NumLeft& (0+255),w,b
  2450  0004DC  0012               	return	
  2451  0004DE                     __end_of_ES_DeQueue:
  2452                           	opt stack 0
  2453                           tosu	equ	0xFFF
  2454                           tosh	equ	0xFFE
  2455                           tosl	equ	0xFFD
  2456                           pclath	equ	0xFFA
  2457                           tblptru	equ	0xFF8
  2458                           tblptrh	equ	0xFF7
  2459                           tblptrl	equ	0xFF6
  2460                           tablat	equ	0xFF5
  2461                           prodh	equ	0xFF4
  2462                           prodl	equ	0xFF3
  2463                           intcon	equ	0xFF2
  2464                           postinc0	equ	0xFEE
  2465                           wreg	equ	0xFE8
  2466                           indf1	equ	0xFE7
  2467                           postinc1	equ	0xFE6
  2468                           fsr1h	equ	0xFE2
  2469                           fsr1l	equ	0xFE1
  2470                           indf2	equ	0xFDF
  2471                           postinc2	equ	0xFDE
  2472                           postdec2	equ	0xFDD
  2473                           fsr2h	equ	0xFDA
  2474                           fsr2l	equ	0xFD9
  2475                           status	equ	0xFD8
  2476                           
  2477 ;; *************** function ___lbmod *****************
  2478 ;; Defined at:
  2479 ;;		line 4 in file "/Applications/microchip/xc8/v1.38/sources/common/lbmod.c"
  2480 ;; Parameters:    Size  Location     Type
  2481 ;;  dividend        1    wreg     unsigned char 
  2482 ;;  divisor         1    0[BANK0 ] unsigned char 
  2483 ;; Auto vars:     Size  Location     Type
  2484 ;;  dividend        1    1[BANK0 ] unsigned char 
  2485 ;;  rem             1    3[BANK0 ] unsigned char 
  2486 ;;  counter         1    2[BANK0 ] unsigned char 
  2487 ;; Return value:  Size  Location     Type
  2488 ;;                  1    wreg      unsigned char 
  2489 ;; Registers used:
  2490 ;;		wreg, status,2, status,0
  2491 ;; Tracked objects:
  2492 ;;		On entry : 0/0
  2493 ;;		On exit  : 0/0
  2494 ;;		Unchanged: 0/0
  2495 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  2496 ;;      Params:         0       1       0       0
  2497 ;;      Locals:         0       3       0       0
  2498 ;;      Temps:          0       0       0       0
  2499 ;;      Totals:         0       4       0       0
  2500 ;;Total ram usage:        4 bytes
  2501 ;; Hardware stack levels used:    1
  2502 ;; Hardware stack levels required when called:    7
  2503 ;; This function calls:
  2504 ;;		Nothing
  2505 ;; This function is called by:
  2506 ;;		_ES_DeQueue
  2507 ;; This function uses a non-reentrant model
  2508 ;;
  2509                           
  2510                           	psect	text11
  2511  000F0E                     __ptext11:
  2512                           	opt stack 0
  2513  000F0E                     ___lbmod:
  2514                           	opt stack 21
  2515                           
  2516                           ; BSR set to: 0
  2517                           ;incstack = 0
  2518                           ;___lbmod@dividend stored from wreg
  2519  000F0E  0100               	movlb	0	; () banked
  2520  000F10  6F90               	movwf	___lbmod@dividend& (0+255),b
  2521  000F12  0E08               	movlw	8
  2522  000F14  0100               	movlb	0	; () banked
  2523  000F16  6F91               	movwf	___lbmod@counter& (0+255),b
  2524  000F18  0E00               	movlw	0
  2525  000F1A  0100               	movlb	0	; () banked
  2526  000F1C  6F92               	movwf	___lbmod@rem& (0+255),b
  2527  000F1E                     l2040:
  2528                           
  2529                           ; BSR set to: 0
  2530  000F1E  90D8               	bcf	status,0,c
  2531  000F20  0100               	movlb	0	; () banked
  2532  000F22  3590               	rlcf	___lbmod@dividend& (0+255),w,b
  2533  000F24  0100               	movlb	0	; () banked
  2534  000F26  3592               	rlcf	___lbmod@rem& (0+255),w,b
  2535  000F28  0100               	movlb	0	; () banked
  2536  000F2A  6F92               	movwf	___lbmod@rem& (0+255),b
  2537                           
  2538                           ; BSR set to: 0
  2539  000F2C  0100               	movlb	0	; () banked
  2540  000F2E  90D8               	bcf	status,0,c
  2541  000F30  3790               	rlcf	___lbmod@dividend& (0+255),f,b
  2542                           
  2543                           ; BSR set to: 0
  2544  000F32  0100               	movlb	0	; () banked
  2545  000F34  518F               	movf	___lbmod@divisor& (0+255),w,b
  2546  000F36  0100               	movlb	0	; () banked
  2547  000F38  5D92               	subwf	___lbmod@rem& (0+255),w,b
  2548  000F3A  A0D8               	btfss	status,0,c
  2549  000F3C  D004               	goto	l2048
  2550                           
  2551                           ; BSR set to: 0
  2552  000F3E  0100               	movlb	0	; () banked
  2553  000F40  518F               	movf	___lbmod@divisor& (0+255),w,b
  2554  000F42  0100               	movlb	0	; () banked
  2555  000F44  5F92               	subwf	___lbmod@rem& (0+255),f,b
  2556  000F46                     l2048:
  2557                           
  2558                           ; BSR set to: 0
  2559  000F46  0100               	movlb	0	; () banked
  2560  000F48  2F91               	decfsz	___lbmod@counter& (0+255),f,b
  2561  000F4A  D7E9               	goto	l2040
  2562                           
  2563                           ; BSR set to: 0
  2564                           
  2565                           ; BSR set to: 0
  2566  000F4C  0100               	movlb	0	; () banked
  2567  000F4E  5192               	movf	___lbmod@rem& (0+255),w,b
  2568  000F50  0012               	return	
  2569  000F52                     __end_of___lbmod:
  2570                           	opt stack 0
  2571                           tosu	equ	0xFFF
  2572                           tosh	equ	0xFFE
  2573                           tosl	equ	0xFFD
  2574                           pclath	equ	0xFFA
  2575                           tblptru	equ	0xFF8
  2576                           tblptrh	equ	0xFF7
  2577                           tblptrl	equ	0xFF6
  2578                           tablat	equ	0xFF5
  2579                           prodh	equ	0xFF4
  2580                           prodl	equ	0xFF3
  2581                           intcon	equ	0xFF2
  2582                           postinc0	equ	0xFEE
  2583                           wreg	equ	0xFE8
  2584                           indf1	equ	0xFE7
  2585                           postinc1	equ	0xFE6
  2586                           fsr1h	equ	0xFE2
  2587                           fsr1l	equ	0xFE1
  2588                           indf2	equ	0xFDF
  2589                           postinc2	equ	0xFDE
  2590                           postdec2	equ	0xFDD
  2591                           fsr2h	equ	0xFDA
  2592                           fsr2l	equ	0xFD9
  2593                           status	equ	0xFD8
  2594                           
  2595 ;; *************** function _ES_CheckUserEvents *****************
  2596 ;; Defined at:
  2597 ;;		line 46 in file "ES_CheckEvents.c"
  2598 ;; Parameters:    Size  Location     Type
  2599 ;;		None
  2600 ;; Auto vars:     Size  Location     Type
  2601 ;;  i               1    0[BANK0 ] unsigned char 
  2602 ;; Return value:  Size  Location     Type
  2603 ;;                  1    wreg      unsigned char 
  2604 ;; Registers used:
  2605 ;;		wreg, status,2, status,0, pclat, tosl, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2606 ;; Tracked objects:
  2607 ;;		On entry : 0/0
  2608 ;;		On exit  : 0/0
  2609 ;;		Unchanged: 0/0
  2610 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  2611 ;;      Params:         0       0       0       0
  2612 ;;      Locals:         0       1       0       0
  2613 ;;      Temps:          0       0       0       0
  2614 ;;      Totals:         0       1       0       0
  2615 ;;Total ram usage:        1 bytes
  2616 ;; Hardware stack levels used:    1
  2617 ;; Hardware stack levels required when called:    8
  2618 ;; This function calls:
  2619 ;;		_Check4Keystroke
  2620 ;; This function is called by:
  2621 ;;		_ES_Run
  2622 ;; This function uses a non-reentrant model
  2623 ;;
  2624                           
  2625                           	psect	text12
  2626  000EC4                     __ptext12:
  2627                           	opt stack 0
  2628  000EC4                     _ES_CheckUserEvents:
  2629                           	opt stack 21
  2630                           
  2631                           ;ES_CheckEvents.c: 48: uint8_t i;
  2632                           ;ES_CheckEvents.c: 50: for ( i=0; i< (sizeof(ES_EventList)/sizeof(ES_EventList[0])); i++
      +                          ) {
  2633                           
  2634                           ; BSR set to: 0
  2635                           ;incstack = 0
  2636  000EC4  0E00               	movlw	0
  2637  000EC6  0100               	movlb	0	; () banked
  2638  000EC8  6F8F               	movwf	ES_CheckUserEvents@i& (0+255),b
  2639  000ECA  0100               	movlb	0	; () banked
  2640  000ECC  518F               	movf	ES_CheckUserEvents@i& (0+255),w,b
  2641  000ECE  0100               	movlb	0	; () banked
  2642  000ED0  A4D8               	btfss	status,2,c
  2643  000ED2  0012               	return	
  2644                           
  2645                           ; BSR set to: 0
  2646                           ;ES_CheckEvents.c: 51: if ( ES_EventList[i]() == 1 )
  2647                           
  2648                           ; BSR set to: 0
  2649                           
  2650                           ; BSR set to: 0
  2651  000ED4  0100               	movlb	0	; () banked
  2652  000ED6  518F               	movf	ES_CheckUserEvents@i& (0+255),w,b
  2653  000ED8  0D02               	mullw	2
  2654  000EDA  0E57               	movlw	low _ES_EventList
  2655  000EDC  24F3               	addwf	prodl,w,c
  2656  000EDE  6EF6               	movwf	tblptrl,c
  2657  000EE0  0E03               	movlw	high _ES_EventList
  2658  000EE2  20F4               	addwfc	prodh,w,c
  2659  000EE4  6EF7               	movwf	tblptrh,c
  2660  000EE6                     	if	0	;There are less than 3 active tblptr bytes
  2661  000EE6                     	endif
  2662  000EE6  D801               	call	u1148
  2663  000EE8  D00C               	goto	u1149
  2664  000EEA                     u1148:
  2665  000EEA  0005               	push	
  2666  000EEC  6EFA               	movwf	pclath,c
  2667  000EEE  0009               	tblrd		*+
  2668  000EF0  50F5               	movf	tablat,w,c
  2669  000EF2  6EFD               	movwf	tosl,c
  2670  000EF4  0009               	tblrd		*+
  2671  000EF6  50F5               	movf	tablat,w,c
  2672  000EF8  6EFE               	movwf	tosh,c
  2673  000EFA  50F8               	movf	tblptru,w,c
  2674  000EFC  6EFF               	movwf	tosu,c
  2675  000EFE  50FA               	movf	pclath,w,c
  2676  000F00  0012               	return		;indir
  2677  000F02                     u1149:
  2678  000F02  06E8               	decf	wreg,f,c
  2679  000F04  B4D8               	btfsc	status,2,c
  2680  000F06  0012               	return	
  2681                           
  2682                           ;ES_CheckEvents.c: 52: break;
  2683  000F08  0100               	movlb	0	; () banked
  2684  000F0A  2B8F               	incf	ES_CheckUserEvents@i& (0+255),f,b
  2685  000F0C  D7DE               	goto	L6
  2686  000F0E                     __end_of_ES_CheckUserEvents:
  2687                           	opt stack 0
  2688                           tosu	equ	0xFFF
  2689                           tosh	equ	0xFFE
  2690                           tosl	equ	0xFFD
  2691                           pclath	equ	0xFFA
  2692                           tblptru	equ	0xFF8
  2693                           tblptrh	equ	0xFF7
  2694                           tblptrl	equ	0xFF6
  2695                           tablat	equ	0xFF5
  2696                           prodh	equ	0xFF4
  2697                           prodl	equ	0xFF3
  2698                           intcon	equ	0xFF2
  2699                           postinc0	equ	0xFEE
  2700                           wreg	equ	0xFE8
  2701                           indf1	equ	0xFE7
  2702                           postinc1	equ	0xFE6
  2703                           fsr1h	equ	0xFE2
  2704                           fsr1l	equ	0xFE1
  2705                           indf2	equ	0xFDF
  2706                           postinc2	equ	0xFDE
  2707                           postdec2	equ	0xFDD
  2708                           fsr2h	equ	0xFDA
  2709                           fsr2l	equ	0xFD9
  2710                           status	equ	0xFD8
  2711                           
  2712 ;; *************** function _Check4Keystroke *****************
  2713 ;; Defined at:
  2714 ;;		line 62 in file "EventCheckers.c"
  2715 ;; Parameters:    Size  Location     Type
  2716 ;;		None
  2717 ;; Auto vars:     Size  Location     Type
  2718 ;;		None
  2719 ;; Return value:  Size  Location     Type
  2720 ;;                  1    wreg      unsigned char 
  2721 ;; Registers used:
  2722 ;;		wreg
  2723 ;; Tracked objects:
  2724 ;;		On entry : 0/0
  2725 ;;		On exit  : 0/0
  2726 ;;		Unchanged: 0/0
  2727 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  2728 ;;      Params:         0       0       0       0
  2729 ;;      Locals:         0       0       0       0
  2730 ;;      Temps:          0       0       0       0
  2731 ;;      Totals:         0       0       0       0
  2732 ;;Total ram usage:        0 bytes
  2733 ;; Hardware stack levels used:    1
  2734 ;; Hardware stack levels required when called:    7
  2735 ;; This function calls:
  2736 ;;		Nothing
  2737 ;; This function is called by:
  2738 ;;		_ES_CheckUserEvents
  2739 ;; This function uses a non-reentrant model
  2740 ;;
  2741                           
  2742                           	psect	text13
  2743  0010FA                     __ptext13:
  2744                           	opt stack 0
  2745  0010FA                     _Check4Keystroke:
  2746                           	opt stack 21
  2747                           
  2748                           ;EventCheckers.c: 78: return 0;
  2749                           
  2750                           ;incstack = 0
  2751  0010FA  0E00               	movlw	0
  2752  0010FC  0012               	return	
  2753  0010FE                     __end_of_Check4Keystroke:
  2754                           	opt stack 0
  2755                           tosu	equ	0xFFF
  2756                           tosh	equ	0xFFE
  2757                           tosl	equ	0xFFD
  2758                           pclath	equ	0xFFA
  2759                           tblptru	equ	0xFF8
  2760                           tblptrh	equ	0xFF7
  2761                           tblptrl	equ	0xFF6
  2762                           tablat	equ	0xFF5
  2763                           prodh	equ	0xFF4
  2764                           prodl	equ	0xFF3
  2765                           intcon	equ	0xFF2
  2766                           postinc0	equ	0xFEE
  2767                           wreg	equ	0xFE8
  2768                           indf1	equ	0xFE7
  2769                           postinc1	equ	0xFE6
  2770                           fsr1h	equ	0xFE2
  2771                           fsr1l	equ	0xFE1
  2772                           indf2	equ	0xFDF
  2773                           postinc2	equ	0xFDE
  2774                           postdec2	equ	0xFDD
  2775                           fsr2h	equ	0xFDA
  2776                           fsr2l	equ	0xFD9
  2777                           status	equ	0xFD8
  2778                           
  2779 ;; *************** function _ES_Initialize *****************
  2780 ;; Defined at:
  2781 ;;		line 242 in file "ES_Framework.c"
  2782 ;; Parameters:    Size  Location     Type
  2783 ;;  NewRate         2   33[BANK0 ] enum E15426
  2784 ;; Auto vars:     Size  Location     Type
  2785 ;;  i               1   35[BANK0 ] unsigned char 
  2786 ;; Return value:  Size  Location     Type
  2787 ;;                  1    wreg      enum E15497
  2788 ;; Registers used:
  2789 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclat, tosl, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2790 ;; Tracked objects:
  2791 ;;		On entry : 0/0
  2792 ;;		On exit  : 0/0
  2793 ;;		Unchanged: 0/0
  2794 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  2795 ;;      Params:         0       2       0       0
  2796 ;;      Locals:         0       1       0       0
  2797 ;;      Temps:          0       0       0       0
  2798 ;;      Totals:         0       3       0       0
  2799 ;;Total ram usage:        3 bytes
  2800 ;; Hardware stack levels used:    1
  2801 ;; Hardware stack levels required when called:   11
  2802 ;; This function calls:
  2803 ;;		_ES_InitQueue
  2804 ;;		_ES_Timer_Init
  2805 ;;		_InitCanRX_Service
  2806 ;; This function is called by:
  2807 ;;		_main
  2808 ;; This function uses a non-reentrant model
  2809 ;;
  2810                           
  2811                           	psect	text14
  2812  0005D2                     __ptext14:
  2813                           	opt stack 0
  2814  0005D2                     _ES_Initialize:
  2815                           	opt stack 19
  2816                           
  2817                           ;ES_Framework.c: 243: uint8_t i;
  2818                           ;ES_Framework.c: 244: ES_Timer_Init( NewRate);
  2819                           
  2820                           ;incstack = 0
  2821  0005D2  C0B0  F091         	movff	ES_Initialize@NewRate,ES_Timer_Init@Rate
  2822  0005D6  C0B1  F092         	movff	ES_Initialize@NewRate+1,ES_Timer_Init@Rate+1
  2823  0005DA  EC6D  F008         	call	_ES_Timer_Init	;wreg free
  2824                           
  2825                           ;ES_Framework.c: 246: for ( i=0; i< (sizeof(ServDescList)/sizeof(ServDescList[0])); i++)
      +                           {
  2826  0005DE  0E00               	movlw	0
  2827  0005E0  0100               	movlb	0	; () banked
  2828  0005E2  6FB2               	movwf	ES_Initialize@i& (0+255),b
  2829  0005E4                     l2192:
  2830                           
  2831                           ; BSR set to: 0
  2832  0005E4  0100               	movlb	0	; () banked
  2833  0005E6  51B2               	movf	ES_Initialize@i& (0+255),w,b
  2834  0005E8  0100               	movlb	0	; () banked
  2835  0005EA  A4D8               	btfss	status,2,c
  2836  0005EC  D066               	goto	l2216
  2837                           
  2838                           ; BSR set to: 0
  2839                           ;ES_Framework.c: 247: if ( (ServDescList[i].InitFunc == (pInitFunc)0) ||
  2840                           ;ES_Framework.c: 248: (ServDescList[i].RunFunc == (pRunFunc)0) )
  2841                           
  2842                           ; BSR set to: 0
  2843                           
  2844                           ; BSR set to: 0
  2845  0005EE  0100               	movlb	0	; () banked
  2846  0005F0  51B2               	movf	ES_Initialize@i& (0+255),w,b
  2847  0005F2  0D04               	mullw	4
  2848  0005F4  0E50               	movlw	low _ServDescList
  2849  0005F6  24F3               	addwf	prodl,w,c
  2850  0005F8  6EF6               	movwf	tblptrl,c
  2851  0005FA  0E03               	movlw	high _ServDescList
  2852  0005FC  20F4               	addwfc	prodh,w,c
  2853  0005FE  6EF7               	movwf	tblptrh,c
  2854  000600                     	if	0	;There are less than 3 active tblptr bytes
  2855  000600                     	endif
  2856  000600  0009               	tblrd		*+
  2857  000602  50F5               	movf	tablat,w,c
  2858  000604  0009               	tblrd		*+
  2859  000606  10F5               	iorwf	tablat,w,c
  2860  000608  B4D8               	btfsc	status,2,c
  2861  00060A  D013               	goto	l2200
  2862                           
  2863                           ; BSR set to: 0
  2864  00060C  0100               	movlb	0	; () banked
  2865  00060E  51B2               	movf	ES_Initialize@i& (0+255),w,b
  2866  000610  0D04               	mullw	4
  2867  000612  0E02               	movlw	2
  2868  000614  26F3               	addwf	prodl,f,c
  2869  000616  0E00               	movlw	0
  2870  000618  22F4               	addwfc	prodh,f,c
  2871  00061A  0E50               	movlw	low _ServDescList
  2872  00061C  24F3               	addwf	prodl,w,c
  2873  00061E  6EF6               	movwf	tblptrl,c
  2874  000620  0E03               	movlw	high _ServDescList
  2875  000622  20F4               	addwfc	prodh,w,c
  2876  000624  6EF7               	movwf	tblptrh,c
  2877  000626                     	if	0	;There are less than 3 active tblptr bytes
  2878  000626                     	endif
  2879  000626  0009               	tblrd		*+
  2880  000628  50F5               	movf	tablat,w,c
  2881  00062A  0009               	tblrd		*+
  2882  00062C  10F5               	iorwf	tablat,w,c
  2883  00062E  A4D8               	btfss	status,2,c
  2884  000630  D002               	goto	l2204
  2885  000632                     l2200:
  2886                           
  2887                           ; BSR set to: 0
  2888                           ;ES_Framework.c: 249: return FailedPointer;
  2889  000632  0E03               	movlw	3
  2890                           
  2891                           ; BSR set to: 0
  2892  000634  0012               	return	
  2893  000636                     l2204:
  2894                           
  2895                           ; BSR set to: 0
  2896                           ;ES_Framework.c: 251: ES_InitQueue( EventQueues[i].pMem, EventQueues[i].Size );
  2897  000636  0100               	movlb	0	; () banked
  2898  000638  51B2               	movf	ES_Initialize@i& (0+255),w,b
  2899  00063A  0D03               	mullw	3
  2900  00063C  0E54               	movlw	low _EventQueues
  2901  00063E  24F3               	addwf	prodl,w,c
  2902  000640  6EF6               	movwf	tblptrl,c
  2903  000642  0E03               	movlw	high _EventQueues
  2904  000644  20F4               	addwfc	prodh,w,c
  2905  000646  6EF7               	movwf	tblptrh,c
  2906  000648                     	if	0	;There are less than 3 active tblptr bytes
  2907  000648                     	endif
  2908  000648  0009               	tblrd		*+
  2909  00064A  CFF5 F08F          	movff	tablat,ES_InitQueue@pBlock
  2910  00064E  000A               	tblrd		*-
  2911  000650  CFF5 F090          	movff	tablat,ES_InitQueue@pBlock+1
  2912  000654  0100               	movlb	0	; () banked
  2913  000656  51B2               	movf	ES_Initialize@i& (0+255),w,b
  2914  000658  0D03               	mullw	3
  2915  00065A  0E02               	movlw	2
  2916  00065C  26F3               	addwf	prodl,f,c
  2917  00065E  0E00               	movlw	0
  2918  000660  22F4               	addwfc	prodh,f,c
  2919  000662  0E54               	movlw	low _EventQueues
  2920  000664  24F3               	addwf	prodl,w,c
  2921  000666  6EF6               	movwf	tblptrl,c
  2922  000668  0E03               	movlw	high _EventQueues
  2923  00066A  20F4               	addwfc	prodh,w,c
  2924  00066C  6EF7               	movwf	tblptrh,c
  2925  00066E                     	if	0	;There are less than 3 active tblptr bytes
  2926  00066E                     	endif
  2927  00066E  0008               	tblrd		*
  2928  000670  CFF5 F091          	movff	tablat,ES_InitQueue@BlockSize
  2929  000674  ECA9  F007         	call	_ES_InitQueue	;wreg free
  2930                           
  2931                           ;ES_Framework.c: 253: if ( ServDescList[i].InitFunc(i) != 1 )
  2932  000678  0100               	movlb	0	; () banked
  2933  00067A  51B2               	movf	ES_Initialize@i& (0+255),w,b
  2934  00067C  0D04               	mullw	4
  2935  00067E  0E50               	movlw	low _ServDescList
  2936  000680  24F3               	addwf	prodl,w,c
  2937  000682  6EF6               	movwf	tblptrl,c
  2938  000684  0E03               	movlw	high _ServDescList
  2939  000686  20F4               	addwfc	prodh,w,c
  2940  000688  6EF7               	movwf	tblptrh,c
  2941  00068A                     	if	0	;There are less than 3 active tblptr bytes
  2942  00068A                     	endif
  2943  00068A  D801               	call	u1318
  2944  00068C  D00E               	goto	u1319
  2945  00068E                     u1318:
  2946  00068E  0005               	push	
  2947  000690  6EFA               	movwf	pclath,c
  2948  000692  0009               	tblrd		*+
  2949  000694  50F5               	movf	tablat,w,c
  2950  000696  6EFD               	movwf	tosl,c
  2951  000698  0009               	tblrd		*+
  2952  00069A  50F5               	movf	tablat,w,c
  2953  00069C  6EFE               	movwf	tosh,c
  2954  00069E  50F8               	movf	tblptru,w,c
  2955  0006A0  6EFF               	movwf	tosu,c
  2956  0006A2  50FA               	movf	pclath,w,c
  2957  0006A4  0100               	movlb	0	; () banked
  2958  0006A6  51B2               	movf	ES_Initialize@i& (0+255),w,b
  2959  0006A8  0012               	return		;indir
  2960  0006AA                     u1319:
  2961  0006AA  06E8               	decf	wreg,f,c
  2962  0006AC  B4D8               	btfsc	status,2,c
  2963  0006AE  D002               	goto	l2212
  2964                           
  2965                           ;ES_Framework.c: 254: return FailedInit;
  2966  0006B0  0E05               	movlw	5
  2967  0006B2  0012               	return	
  2968  0006B4                     l2212:
  2969  0006B4  0100               	movlb	0	; () banked
  2970  0006B6  2BB2               	incf	ES_Initialize@i& (0+255),f,b
  2971  0006B8  D795               	goto	l2192
  2972  0006BA                     l2216:
  2973                           
  2974                           ; BSR set to: 0
  2975                           ;ES_Framework.c: 255: }
  2976                           ;ES_Framework.c: 256: return Success;
  2977  0006BA  0E00               	movlw	0
  2978  0006BC  0012               	return	
  2979  0006BE                     __end_of_ES_Initialize:
  2980                           	opt stack 0
  2981                           tosu	equ	0xFFF
  2982                           tosh	equ	0xFFE
  2983                           tosl	equ	0xFFD
  2984                           pclath	equ	0xFFA
  2985                           tblptru	equ	0xFF8
  2986                           tblptrh	equ	0xFF7
  2987                           tblptrl	equ	0xFF6
  2988                           tablat	equ	0xFF5
  2989                           prodh	equ	0xFF4
  2990                           prodl	equ	0xFF3
  2991                           intcon	equ	0xFF2
  2992                           postinc0	equ	0xFEE
  2993                           wreg	equ	0xFE8
  2994                           indf1	equ	0xFE7
  2995                           postinc1	equ	0xFE6
  2996                           fsr1h	equ	0xFE2
  2997                           fsr1l	equ	0xFE1
  2998                           indf2	equ	0xFDF
  2999                           postinc2	equ	0xFDE
  3000                           postdec2	equ	0xFDD
  3001                           fsr2h	equ	0xFDA
  3002                           fsr2l	equ	0xFD9
  3003                           status	equ	0xFD8
  3004                           
  3005 ;; *************** function _InitCanRX_Service *****************
  3006 ;; Defined at:
  3007 ;;		line 91 in file "CanRX_Service.c"
  3008 ;; Parameters:    Size  Location     Type
  3009 ;;  Priority        1    wreg     unsigned char 
  3010 ;; Auto vars:     Size  Location     Type
  3011 ;;  Priority        1   32[BANK0 ] unsigned char 
  3012 ;;  ThisEvent       3   29[BANK0 ] struct ES_Event_t
  3013 ;; Return value:  Size  Location     Type
  3014 ;;                  1    wreg      unsigned char 
  3015 ;; Registers used:
  3016 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  3017 ;; Tracked objects:
  3018 ;;		On entry : 0/0
  3019 ;;		On exit  : 0/0
  3020 ;;		Unchanged: 0/0
  3021 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  3022 ;;      Params:         0       0       0       0
  3023 ;;      Locals:         0       4       0       0
  3024 ;;      Temps:          0       0       0       0
  3025 ;;      Totals:         0       4       0       0
  3026 ;;Total ram usage:        4 bytes
  3027 ;; Hardware stack levels used:    1
  3028 ;; Hardware stack levels required when called:   10
  3029 ;; This function calls:
  3030 ;;		_ES_PostToService
  3031 ;; This function is called by:
  3032 ;;		_ES_Initialize
  3033 ;; This function uses a non-reentrant model
  3034 ;;
  3035                           
  3036                           	psect	text15
  3037  000FF8                     __ptext15:
  3038                           	opt stack 0
  3039  000FF8                     _InitCanRX_Service:
  3040                           	opt stack 19
  3041                           
  3042                           ;incstack = 0
  3043                           ;InitCanRX_Service@Priority stored from wreg
  3044  000FF8  0100               	movlb	0	; () banked
  3045  000FFA  6FAF               	movwf	InitCanRX_Service@Priority& (0+255),b
  3046                           
  3047                           ;CanRX_Service.c: 93: ES_Event ThisEvent;
  3048                           ;CanRX_Service.c: 95: MyPriority = Priority;
  3049  000FFC  C0AF  F08A         	movff	InitCanRX_Service@Priority,_MyPriority
  3050                           
  3051                           ;CanRX_Service.c: 98: ThisEvent.EventType = ES_INIT;
  3052  001000  0E02               	movlw	2
  3053  001002  0100               	movlb	0	; () banked
  3054  001004  6FAC               	movwf	InitCanRX_Service@ThisEvent& (0+255),b
  3055                           
  3056                           ; BSR set to: 0
  3057                           ;CanRX_Service.c: 99: if (ES_PostToService( MyPriority, ThisEvent) == 1)
  3058  001006  C0AC  F0A6         	movff	InitCanRX_Service@ThisEvent,ES_PostToService@TheEvent
  3059  00100A  C0AD  F0A7         	movff	InitCanRX_Service@ThisEvent+1,ES_PostToService@TheEvent+1
  3060  00100E  C0AE  F0A8         	movff	InitCanRX_Service@ThisEvent+2,ES_PostToService@TheEvent+2
  3061  001012  0100               	movlb	0	; () banked
  3062  001014  518A               	movf	_MyPriority& (0+255),w,b
  3063  001016  ECB9  F006         	call	_ES_PostToService
  3064  00101A  06E8               	decf	wreg,f,c
  3065  00101C  A4D8               	btfss	status,2,c
  3066  00101E  D002               	goto	l2134
  3067                           
  3068                           ;CanRX_Service.c: 100: {
  3069                           ;CanRX_Service.c: 101: return 1;
  3070  001020  0E01               	movlw	1
  3071                           
  3072                           ;CanRX_Service.c: 102: }else
  3073  001022  0012               	return	
  3074  001024                     l2134:
  3075                           
  3076                           ;CanRX_Service.c: 103: {
  3077                           ;CanRX_Service.c: 104: return 0;
  3078  001024  0E00               	movlw	0
  3079  001026  0012               	return	
  3080  001028                     __end_of_InitCanRX_Service:
  3081                           	opt stack 0
  3082                           tosu	equ	0xFFF
  3083                           tosh	equ	0xFFE
  3084                           tosl	equ	0xFFD
  3085                           pclath	equ	0xFFA
  3086                           tblptru	equ	0xFF8
  3087                           tblptrh	equ	0xFF7
  3088                           tblptrl	equ	0xFF6
  3089                           tablat	equ	0xFF5
  3090                           prodh	equ	0xFF4
  3091                           prodl	equ	0xFF3
  3092                           intcon	equ	0xFF2
  3093                           postinc0	equ	0xFEE
  3094                           wreg	equ	0xFE8
  3095                           indf1	equ	0xFE7
  3096                           postinc1	equ	0xFE6
  3097                           fsr1h	equ	0xFE2
  3098                           fsr1l	equ	0xFE1
  3099                           indf2	equ	0xFDF
  3100                           postinc2	equ	0xFDE
  3101                           postdec2	equ	0xFDD
  3102                           fsr2h	equ	0xFDA
  3103                           fsr2l	equ	0xFD9
  3104                           status	equ	0xFD8
  3105                           
  3106 ;; *************** function _ES_PostToService *****************
  3107 ;; Defined at:
  3108 ;;		line 351 in file "ES_Framework.c"
  3109 ;; Parameters:    Size  Location     Type
  3110 ;;  WhichService    1    wreg     unsigned char 
  3111 ;;  TheEvent        3   23[BANK0 ] struct ES_Event_t
  3112 ;; Auto vars:     Size  Location     Type
  3113 ;;  WhichService    1   28[BANK0 ] unsigned char 
  3114 ;; Return value:  Size  Location     Type
  3115 ;;                  1    wreg      unsigned char 
  3116 ;; Registers used:
  3117 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  3118 ;; Tracked objects:
  3119 ;;		On entry : 0/0
  3120 ;;		On exit  : 0/0
  3121 ;;		Unchanged: 0/0
  3122 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  3123 ;;      Params:         0       3       0       0
  3124 ;;      Locals:         0       1       0       0
  3125 ;;      Temps:          0       2       0       0
  3126 ;;      Totals:         0       6       0       0
  3127 ;;Total ram usage:        6 bytes
  3128 ;; Hardware stack levels used:    1
  3129 ;; Hardware stack levels required when called:    9
  3130 ;; This function calls:
  3131 ;;		_ES_EnQueueFIFO
  3132 ;; This function is called by:
  3133 ;;		_InitCanRX_Service
  3134 ;; This function uses a non-reentrant model
  3135 ;;
  3136                           
  3137                           	psect	text16
  3138  000D72                     __ptext16:
  3139                           	opt stack 0
  3140  000D72                     _ES_PostToService:
  3141                           	opt stack 19
  3142                           
  3143                           ;incstack = 0
  3144                           ;ES_PostToService@WhichService stored from wreg
  3145  000D72  0100               	movlb	0	; () banked
  3146  000D74  6FAB               	movwf	ES_PostToService@WhichService& (0+255),b
  3147                           
  3148                           ;ES_Framework.c: 352: if ((WhichService < (sizeof(EventQueues)/sizeof(EventQueues[0]))) 
      +                          &&
  3149                           ;ES_Framework.c: 353: (ES_EnQueueFIFO( EventQueues[WhichService].pMem, TheEvent) ==
  3150                           ;ES_Framework.c: 354: 1 )){
  3151  000D76  0100               	movlb	0	; () banked
  3152  000D78  51AB               	movf	ES_PostToService@WhichService& (0+255),w,b
  3153  000D7A  0100               	movlb	0	; () banked
  3154  000D7C  A4D8               	btfss	status,2,c
  3155  000D7E  D033               	goto	l1954
  3156                           
  3157                           ; BSR set to: 0
  3158  000D80  0100               	movlb	0	; () banked
  3159  000D82  51AB               	movf	ES_PostToService@WhichService& (0+255),w,b
  3160  000D84  0D03               	mullw	3
  3161  000D86  0E54               	movlw	low _EventQueues
  3162  000D88  24F3               	addwf	prodl,w,c
  3163  000D8A  6EF6               	movwf	tblptrl,c
  3164  000D8C  0E03               	movlw	high _EventQueues
  3165  000D8E  20F4               	addwfc	prodh,w,c
  3166  000D90  6EF7               	movwf	tblptrh,c
  3167  000D92                     	if	0	;There are less than 3 active tblptr bytes
  3168  000D92                     	endif
  3169  000D92  0009               	tblrd		*+
  3170  000D94  CFF5 F09B          	movff	tablat,ES_EnQueueFIFO@pBlock
  3171  000D98  000A               	tblrd		*-
  3172  000D9A  CFF5 F09C          	movff	tablat,ES_EnQueueFIFO@pBlock+1
  3173  000D9E  C0A6  F09D         	movff	ES_PostToService@TheEvent,ES_EnQueueFIFO@Event2Add
  3174  000DA2  C0A7  F09E         	movff	ES_PostToService@TheEvent+1,ES_EnQueueFIFO@Event2Add+1
  3175  000DA6  C0A8  F09F         	movff	ES_PostToService@TheEvent+2,ES_EnQueueFIFO@Event2Add+2
  3176  000DAA  EC5F  F003         	call	_ES_EnQueueFIFO	;wreg free
  3177  000DAE  06E8               	decf	wreg,f,c
  3178  000DB0  A4D8               	btfss	status,2,c
  3179  000DB2  D019               	goto	l1954
  3180                           
  3181                           ;ES_Framework.c: 355: Ready |= BitNum2SetMask[WhichService];
  3182  000DB4  0100               	movlb	0	; () banked
  3183  000DB6  51AB               	movf	ES_PostToService@WhichService& (0+255),w,b
  3184  000DB8  0D02               	mullw	2
  3185  000DBA  0E01               	movlw	low _BitNum2SetMask
  3186  000DBC  24F3               	addwf	prodl,w,c
  3187  000DBE  6EF6               	movwf	tblptrl,c
  3188  000DC0  0E03               	movlw	high _BitNum2SetMask
  3189  000DC2  20F4               	addwfc	prodh,w,c
  3190  000DC4  6EF7               	movwf	tblptrh,c
  3191  000DC6                     	if	0	;There are less than 3 active tblptr bytes
  3192  000DC6                     	endif
  3193  000DC6  0009               	tblrd		*+
  3194  000DC8  CFF5 F0A9          	movff	tablat,??_ES_PostToService
  3195  000DCC  0009               	tblrd		*+
  3196  000DCE  CFF5 F0AA          	movff	tablat,??_ES_PostToService+1
  3197  000DD2  0100               	movlb	0	; () banked
  3198  000DD4  51A9               	movf	??_ES_PostToService& (0+255),w,b
  3199  000DD6  0100               	movlb	0	; () banked
  3200  000DD8  1385               	iorwf	_Ready& (0+255),f,b
  3201  000DDA  0100               	movlb	0	; () banked
  3202  000DDC  51AA               	movf	(??_ES_PostToService+1)& (0+255),w,b
  3203  000DDE  0100               	movlb	0	; () banked
  3204  000DE0  1386               	iorwf	(_Ready+1)& (0+255),f,b
  3205                           
  3206                           ; BSR set to: 0
  3207                           ;ES_Framework.c: 356: return 1;
  3208  000DE2  0E01               	movlw	1
  3209                           
  3210                           ; BSR set to: 0
  3211                           ;ES_Framework.c: 357: } else
  3212                           
  3213                           ; BSR set to: 0
  3214  000DE4  0012               	return	
  3215  000DE6                     l1954:
  3216                           
  3217                           ;ES_Framework.c: 358: return 0;
  3218  000DE6  0E00               	movlw	0
  3219  000DE8  0012               	return	
  3220  000DEA                     __end_of_ES_PostToService:
  3221                           	opt stack 0
  3222                           tosu	equ	0xFFF
  3223                           tosh	equ	0xFFE
  3224                           tosl	equ	0xFFD
  3225                           pclath	equ	0xFFA
  3226                           tblptru	equ	0xFF8
  3227                           tblptrh	equ	0xFF7
  3228                           tblptrl	equ	0xFF6
  3229                           tablat	equ	0xFF5
  3230                           prodh	equ	0xFF4
  3231                           prodl	equ	0xFF3
  3232                           intcon	equ	0xFF2
  3233                           postinc0	equ	0xFEE
  3234                           wreg	equ	0xFE8
  3235                           indf1	equ	0xFE7
  3236                           postinc1	equ	0xFE6
  3237                           fsr1h	equ	0xFE2
  3238                           fsr1l	equ	0xFE1
  3239                           indf2	equ	0xFDF
  3240                           postinc2	equ	0xFDE
  3241                           postdec2	equ	0xFDD
  3242                           fsr2h	equ	0xFDA
  3243                           fsr2l	equ	0xFD9
  3244                           status	equ	0xFD8
  3245                           
  3246 ;; *************** function _ES_EnQueueFIFO *****************
  3247 ;; Defined at:
  3248 ;;		line 85 in file "ES_Queue.c"
  3249 ;; Parameters:    Size  Location     Type
  3250 ;;  pBlock          2   12[BANK0 ] PTR struct ES_Event_t
  3251 ;;		 -> Queue0(12), 
  3252 ;;  Event2Add       3   14[BANK0 ] struct ES_Event_t
  3253 ;; Auto vars:     Size  Location     Type
  3254 ;;  pThisQueue      2   21[BANK0 ] PTR struct .
  3255 ;;		 -> Queue0(12), 
  3256 ;;  SaveCrit        1   20[BANK0 ] unsigned char 
  3257 ;; Return value:  Size  Location     Type
  3258 ;;                  1    wreg      unsigned char 
  3259 ;; Registers used:
  3260 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  3261 ;; Tracked objects:
  3262 ;;		On entry : 0/0
  3263 ;;		On exit  : 0/0
  3264 ;;		Unchanged: 0/0
  3265 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  3266 ;;      Params:         0       5       0       0
  3267 ;;      Locals:         0       3       0       0
  3268 ;;      Temps:          0       3       0       0
  3269 ;;      Totals:         0      11       0       0
  3270 ;;Total ram usage:       11 bytes
  3271 ;; Hardware stack levels used:    1
  3272 ;; Hardware stack levels required when called:    8
  3273 ;; This function calls:
  3274 ;;		___awmod
  3275 ;;		___wmul
  3276 ;; This function is called by:
  3277 ;;		_ES_PostToService
  3278 ;;		_ES_PostAll
  3279 ;; This function uses a non-reentrant model
  3280 ;;
  3281                           
  3282                           	psect	text17
  3283  0006BE                     __ptext17:
  3284                           	opt stack 0
  3285  0006BE                     _ES_EnQueueFIFO:
  3286                           	opt stack 19
  3287                           
  3288                           ;ES_Queue.c: 87: unsigned char SaveCrit;
  3289                           ;ES_Queue.c: 88: pQueue_t pThisQueue;
  3290                           ;ES_Queue.c: 89: pThisQueue = (pQueue_t)pBlock;
  3291                           
  3292                           ;incstack = 0
  3293  0006BE  C09B  F0A4         	movff	ES_EnQueueFIFO@pBlock,ES_EnQueueFIFO@pThisQueue
  3294  0006C2  C09C  F0A5         	movff	ES_EnQueueFIFO@pBlock+1,ES_EnQueueFIFO@pThisQueue+1
  3295                           
  3296                           ;ES_Queue.c: 91: if ( pThisQueue->NumEntries < pThisQueue->QueueSize)
  3297  0006C6  C0A4  FFD9         	movff	ES_EnQueueFIFO@pThisQueue,fsr2l
  3298  0006CA  C0A5  FFDA         	movff	ES_EnQueueFIFO@pThisQueue+1,fsr2h
  3299  0006CE  0100               	movlb	0	; () banked
  3300  0006D0  EE10 F002          	lfsr	1,2
  3301  0006D4  51A4               	movf	ES_EnQueueFIFO@pThisQueue& (0+255),w,b
  3302  0006D6  26E1               	addwf	fsr1l,f,c
  3303  0006D8  51A5               	movf	(ES_EnQueueFIFO@pThisQueue+1)& (0+255),w,b
  3304  0006DA  22E2               	addwfc	fsr1h,f,c
  3305  0006DC  50DE               	movf	postinc2,w,c
  3306  0006DE  5CE6               	subwf	postinc1,w,c
  3307  0006E0  B0D8               	btfsc	status,0,c
  3308  0006E2  D05C               	goto	l1922
  3309                           
  3310                           ; BSR set to: 0
  3311                           
  3312                           ;ES_Queue.c: 92: {
  3313                           ;ES_Queue.c: 95: do{ SaveCrit = INTCON; GIE = 0;}while(0);
  3314  0006E4  CFF2 F0A3          	movff	intcon,ES_EnQueueFIFO@SaveCrit	;volatile
  3315  0006E8  9EF2               	bcf	intcon,7,c	;volatile
  3316                           
  3317                           ; BSR set to: 0
  3318                           ;ES_Queue.c: 96: pBlock[ 1 + ((pThisQueue->CurrentIndex + pThisQueue->NumEntries)
  3319                           ;ES_Queue.c: 97: % pThisQueue->QueueSize)] = Event2Add;
  3320                           
  3321                           ; BSR set to: 0
  3322  0006EA  C0A4  FFD9         	movff	ES_EnQueueFIFO@pThisQueue,fsr2l
  3323  0006EE  C0A5  FFDA         	movff	ES_EnQueueFIFO@pThisQueue+1,fsr2h
  3324  0006F2  50DF               	movf	indf2,w,c
  3325  0006F4  0100               	movlb	0	; () banked
  3326  0006F6  6FA0               	movwf	??_ES_EnQueueFIFO& (0+255),b
  3327  0006F8  0100               	movlb	0	; () banked
  3328  0006FA  51A0               	movf	??_ES_EnQueueFIFO& (0+255),w,b
  3329  0006FC  0100               	movlb	0	; () banked
  3330  0006FE  6F91               	movwf	___awmod@divisor& (0+255),b
  3331  000700  6B92               	clrf	(___awmod@divisor+1)& (0+255),b
  3332  000702  0100               	movlb	0	; () banked
  3333  000704  EE20 F002          	lfsr	2,2
  3334  000708  51A4               	movf	ES_EnQueueFIFO@pThisQueue& (0+255),w,b
  3335  00070A  26D9               	addwf	fsr2l,f,c
  3336  00070C  51A5               	movf	(ES_EnQueueFIFO@pThisQueue+1)& (0+255),w,b
  3337  00070E  22DA               	addwfc	fsr2h,f,c
  3338  000710  50DF               	movf	indf2,w,c
  3339  000712  0100               	movlb	0	; () banked
  3340  000714  6FA1               	movwf	(??_ES_EnQueueFIFO+1)& (0+255),b
  3341  000716  0100               	movlb	0	; () banked
  3342  000718  EE20 F001          	lfsr	2,1
  3343  00071C  51A4               	movf	ES_EnQueueFIFO@pThisQueue& (0+255),w,b
  3344  00071E  26D9               	addwf	fsr2l,f,c
  3345  000720  51A5               	movf	(ES_EnQueueFIFO@pThisQueue+1)& (0+255),w,b
  3346  000722  22DA               	addwfc	fsr2h,f,c
  3347  000724  50DF               	movf	indf2,w,c
  3348  000726  0100               	movlb	0	; () banked
  3349  000728  6FA2               	movwf	(??_ES_EnQueueFIFO+2)& (0+255),b
  3350  00072A  0100               	movlb	0	; () banked
  3351  00072C  51A2               	movf	(??_ES_EnQueueFIFO+2)& (0+255),w,b
  3352  00072E  0100               	movlb	0	; () banked
  3353  000730  25A1               	addwf	(??_ES_EnQueueFIFO+1)& (0+255),w,b
  3354  000732  0100               	movlb	0	; () banked
  3355  000734  6F8F               	movwf	___awmod@dividend& (0+255),b
  3356  000736  0100               	movlb	0	; () banked
  3357  000738  6B90               	clrf	(___awmod@dividend+1)& (0+255),b
  3358  00073A  0100               	movlb	0	; () banked
  3359  00073C  3790               	rlcf	(___awmod@dividend+1)& (0+255),f,b
  3360  00073E  EC9F  F005         	call	___awmod	;wreg free
  3361  000742  0E01               	movlw	1
  3362  000744  0100               	movlb	0	; () banked
  3363  000746  258F               	addwf	?___awmod& (0+255),w,b
  3364  000748  0100               	movlb	0	; () banked
  3365  00074A  6F95               	movwf	___wmul@multiplier& (0+255),b
  3366  00074C  0E00               	movlw	0
  3367  00074E  0100               	movlb	0	; () banked
  3368  000750  2190               	addwfc	(?___awmod+1)& (0+255),w,b
  3369  000752  0100               	movlb	0	; () banked
  3370  000754  6F96               	movwf	(___wmul@multiplier+1)& (0+255),b
  3371  000756  0E00               	movlw	0
  3372  000758  0100               	movlb	0	; () banked
  3373  00075A  6F98               	movwf	(___wmul@multiplicand+1)& (0+255),b
  3374  00075C  0E03               	movlw	3
  3375  00075E  6F97               	movwf	___wmul@multiplicand& (0+255),b
  3376  000760  ECC7  F007         	call	___wmul	;wreg free
  3377  000764  0100               	movlb	0	; () banked
  3378  000766  5195               	movf	?___wmul& (0+255),w,b
  3379  000768  0100               	movlb	0	; () banked
  3380  00076A  259B               	addwf	ES_EnQueueFIFO@pBlock& (0+255),w,b
  3381  00076C  6ED9               	movwf	fsr2l,c
  3382  00076E  0100               	movlb	0	; () banked
  3383  000770  5196               	movf	(?___wmul+1)& (0+255),w,b
  3384  000772  0100               	movlb	0	; () banked
  3385  000774  219C               	addwfc	(ES_EnQueueFIFO@pBlock+1)& (0+255),w,b
  3386  000776  6EDA               	movwf	fsr2h,c
  3387  000778  C09D  FFDE         	movff	ES_EnQueueFIFO@Event2Add,postinc2
  3388  00077C  C09E  FFDE         	movff	ES_EnQueueFIFO@Event2Add+1,postinc2
  3389  000780  C09F  FFDE         	movff	ES_EnQueueFIFO@Event2Add+2,postinc2
  3390                           
  3391                           ; BSR set to: 0
  3392                           ;ES_Queue.c: 98: pThisQueue->NumEntries++;
  3393  000784  0100               	movlb	0	; () banked
  3394  000786  EE20 F002          	lfsr	2,2
  3395  00078A  51A4               	movf	ES_EnQueueFIFO@pThisQueue& (0+255),w,b
  3396  00078C  26D9               	addwf	fsr2l,f,c
  3397  00078E  51A5               	movf	(ES_EnQueueFIFO@pThisQueue+1)& (0+255),w,b
  3398  000790  22DA               	addwfc	fsr2h,f,c
  3399  000792  2ADF               	incf	indf2,f,c
  3400                           
  3401                           ; BSR set to: 0
  3402                           ;ES_Queue.c: 99: {INTCON = SaveCrit;};
  3403  000794  C0A3  FFF2         	movff	ES_EnQueueFIFO@SaveCrit,intcon	;volatile
  3404                           
  3405                           ; BSR set to: 0
  3406                           ;ES_Queue.c: 101: return(1);
  3407  000798  0E01               	movlw	1
  3408                           
  3409                           ; BSR set to: 0
  3410                           ;ES_Queue.c: 102: }else
  3411                           
  3412                           ; BSR set to: 0
  3413  00079A  0012               	return	
  3414  00079C                     l1922:
  3415                           
  3416                           ; BSR set to: 0
  3417                           ;ES_Queue.c: 103: return(0);
  3418  00079C  0E00               	movlw	0
  3419                           
  3420                           ; BSR set to: 0
  3421  00079E  0012               	return	
  3422  0007A0                     __end_of_ES_EnQueueFIFO:
  3423                           	opt stack 0
  3424                           tosu	equ	0xFFF
  3425                           tosh	equ	0xFFE
  3426                           tosl	equ	0xFFD
  3427                           pclath	equ	0xFFA
  3428                           tblptru	equ	0xFF8
  3429                           tblptrh	equ	0xFF7
  3430                           tblptrl	equ	0xFF6
  3431                           tablat	equ	0xFF5
  3432                           prodh	equ	0xFF4
  3433                           prodl	equ	0xFF3
  3434                           intcon	equ	0xFF2
  3435                           postinc0	equ	0xFEE
  3436                           wreg	equ	0xFE8
  3437                           indf1	equ	0xFE7
  3438                           postinc1	equ	0xFE6
  3439                           fsr1h	equ	0xFE2
  3440                           fsr1l	equ	0xFE1
  3441                           indf2	equ	0xFDF
  3442                           postinc2	equ	0xFDE
  3443                           postdec2	equ	0xFDD
  3444                           fsr2h	equ	0xFDA
  3445                           fsr2l	equ	0xFD9
  3446                           status	equ	0xFD8
  3447                           
  3448 ;; *************** function ___wmul *****************
  3449 ;; Defined at:
  3450 ;;		line 15 in file "/Applications/microchip/xc8/v1.38/sources/common/Umul16.c"
  3451 ;; Parameters:    Size  Location     Type
  3452 ;;  multiplier      2    6[BANK0 ] unsigned int 
  3453 ;;  multiplicand    2    8[BANK0 ] unsigned int 
  3454 ;; Auto vars:     Size  Location     Type
  3455 ;;  product         2   10[BANK0 ] unsigned int 
  3456 ;; Return value:  Size  Location     Type
  3457 ;;                  2    6[BANK0 ] unsigned int 
  3458 ;; Registers used:
  3459 ;;		wreg, status,2, status,0, prodl, prodh
  3460 ;; Tracked objects:
  3461 ;;		On entry : 0/0
  3462 ;;		On exit  : 0/0
  3463 ;;		Unchanged: 0/0
  3464 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  3465 ;;      Params:         0       4       0       0
  3466 ;;      Locals:         0       2       0       0
  3467 ;;      Temps:          0       0       0       0
  3468 ;;      Totals:         0       6       0       0
  3469 ;;Total ram usage:        6 bytes
  3470 ;; Hardware stack levels used:    1
  3471 ;; Hardware stack levels required when called:    7
  3472 ;; This function calls:
  3473 ;;		Nothing
  3474 ;; This function is called by:
  3475 ;;		_ES_EnQueueFIFO
  3476 ;;		_ES_DeQueue
  3477 ;;		i2_ES_EnQueueFIFO
  3478 ;;		_ES_EnQueueLIFO
  3479 ;; This function uses a non-reentrant model
  3480 ;;
  3481                           
  3482                           	psect	text18
  3483  000F8E                     __ptext18:
  3484                           	opt stack 0
  3485  000F8E                     ___wmul:
  3486                           	opt stack 21
  3487                           
  3488                           ; BSR set to: 0
  3489                           ;incstack = 0
  3490  000F8E  0100               	movlb	0	; () banked
  3491  000F90  5195               	movf	___wmul@multiplier& (0+255),w,b
  3492  000F92  0100               	movlb	0	; () banked
  3493  000F94  0397               	mulwf	___wmul@multiplicand& (0+255),b
  3494  000F96  CFF3 F099          	movff	prodl,___wmul@product
  3495  000F9A  CFF4 F09A          	movff	prodh,___wmul@product+1
  3496  000F9E  0100               	movlb	0	; () banked
  3497  000FA0  5195               	movf	___wmul@multiplier& (0+255),w,b
  3498  000FA2  0100               	movlb	0	; () banked
  3499  000FA4  0398               	mulwf	(___wmul@multiplicand+1)& (0+255),b
  3500  000FA6  50F3               	movf	prodl,w,c
  3501  000FA8  0100               	movlb	0	; () banked
  3502  000FAA  279A               	addwf	(___wmul@product+1)& (0+255),f,b
  3503  000FAC  0100               	movlb	0	; () banked
  3504  000FAE  5196               	movf	(___wmul@multiplier+1)& (0+255),w,b
  3505  000FB0  0100               	movlb	0	; () banked
  3506  000FB2  0397               	mulwf	___wmul@multiplicand& (0+255),b
  3507  000FB4  50F3               	movf	prodl,w,c
  3508  000FB6  0100               	movlb	0	; () banked
  3509  000FB8  279A               	addwf	(___wmul@product+1)& (0+255),f,b
  3510                           
  3511                           ; BSR set to: 0
  3512  000FBA  C099  F095         	movff	___wmul@product,?___wmul
  3513  000FBE  C09A  F096         	movff	___wmul@product+1,?___wmul+1
  3514  000FC2  0012               	return	
  3515  000FC4                     __end_of___wmul:
  3516                           	opt stack 0
  3517                           tosu	equ	0xFFF
  3518                           tosh	equ	0xFFE
  3519                           tosl	equ	0xFFD
  3520                           pclath	equ	0xFFA
  3521                           tblptru	equ	0xFF8
  3522                           tblptrh	equ	0xFF7
  3523                           tblptrl	equ	0xFF6
  3524                           tablat	equ	0xFF5
  3525                           prodh	equ	0xFF4
  3526                           prodl	equ	0xFF3
  3527                           intcon	equ	0xFF2
  3528                           postinc0	equ	0xFEE
  3529                           wreg	equ	0xFE8
  3530                           indf1	equ	0xFE7
  3531                           postinc1	equ	0xFE6
  3532                           fsr1h	equ	0xFE2
  3533                           fsr1l	equ	0xFE1
  3534                           indf2	equ	0xFDF
  3535                           postinc2	equ	0xFDE
  3536                           postdec2	equ	0xFDD
  3537                           fsr2h	equ	0xFDA
  3538                           fsr2l	equ	0xFD9
  3539                           status	equ	0xFD8
  3540                           
  3541 ;; *************** function ___awmod *****************
  3542 ;; Defined at:
  3543 ;;		line 8 in file "/Applications/microchip/xc8/v1.38/sources/common/awmod.c"
  3544 ;; Parameters:    Size  Location     Type
  3545 ;;  dividend        2    0[BANK0 ] int 
  3546 ;;  divisor         2    2[BANK0 ] int 
  3547 ;; Auto vars:     Size  Location     Type
  3548 ;;  sign            1    5[BANK0 ] unsigned char 
  3549 ;;  counter         1    4[BANK0 ] unsigned char 
  3550 ;; Return value:  Size  Location     Type
  3551 ;;                  2    0[BANK0 ] int 
  3552 ;; Registers used:
  3553 ;;		wreg, status,2, status,0
  3554 ;; Tracked objects:
  3555 ;;		On entry : 0/0
  3556 ;;		On exit  : 0/0
  3557 ;;		Unchanged: 0/0
  3558 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  3559 ;;      Params:         0       4       0       0
  3560 ;;      Locals:         0       2       0       0
  3561 ;;      Temps:          0       0       0       0
  3562 ;;      Totals:         0       6       0       0
  3563 ;;Total ram usage:        6 bytes
  3564 ;; Hardware stack levels used:    1
  3565 ;; Hardware stack levels required when called:    7
  3566 ;; This function calls:
  3567 ;;		Nothing
  3568 ;; This function is called by:
  3569 ;;		_ES_EnQueueFIFO
  3570 ;;		i2_ES_EnQueueFIFO
  3571 ;; This function uses a non-reentrant model
  3572 ;;
  3573                           
  3574                           	psect	text19
  3575  000B3E                     __ptext19:
  3576                           	opt stack 0
  3577  000B3E                     ___awmod:
  3578                           	opt stack 19
  3579                           
  3580                           ; BSR set to: 0
  3581                           ;incstack = 0
  3582  000B3E  0E00               	movlw	0
  3583  000B40  0100               	movlb	0	; () banked
  3584  000B42  6F94               	movwf	___awmod@sign& (0+255),b
  3585                           
  3586                           ; BSR set to: 0
  3587  000B44  0100               	movlb	0	; () banked
  3588  000B46  AF90               	btfss	(___awmod@dividend+1)& (0+255),7,b
  3589  000B48  D008               	goto	l1838
  3590                           
  3591                           ; BSR set to: 0
  3592  000B4A  0100               	movlb	0	; () banked
  3593  000B4C  6D8F               	negf	___awmod@dividend& (0+255),b
  3594  000B4E  1F90               	comf	(___awmod@dividend+1)& (0+255),f,b
  3595  000B50  B0D8               	btfsc	status,0,c
  3596  000B52  2B90               	incf	(___awmod@dividend+1)& (0+255),f,b
  3597                           
  3598                           ; BSR set to: 0
  3599  000B54  0E01               	movlw	1
  3600  000B56  0100               	movlb	0	; () banked
  3601  000B58  6F94               	movwf	___awmod@sign& (0+255),b
  3602  000B5A                     l1838:
  3603                           
  3604                           ; BSR set to: 0
  3605  000B5A  0100               	movlb	0	; () banked
  3606  000B5C  AF92               	btfss	(___awmod@divisor+1)& (0+255),7,b
  3607  000B5E  D005               	goto	l1842
  3608                           
  3609                           ; BSR set to: 0
  3610  000B60  0100               	movlb	0	; () banked
  3611  000B62  6D91               	negf	___awmod@divisor& (0+255),b
  3612  000B64  1F92               	comf	(___awmod@divisor+1)& (0+255),f,b
  3613  000B66  B0D8               	btfsc	status,0,c
  3614  000B68  2B92               	incf	(___awmod@divisor+1)& (0+255),f,b
  3615  000B6A                     l1842:
  3616                           
  3617                           ; BSR set to: 0
  3618  000B6A  0100               	movlb	0	; () banked
  3619  000B6C  5191               	movf	___awmod@divisor& (0+255),w,b
  3620  000B6E  0100               	movlb	0	; () banked
  3621  000B70  1192               	iorwf	(___awmod@divisor+1)& (0+255),w,b
  3622  000B72  B4D8               	btfsc	status,2,c
  3623  000B74  D026               	goto	l1858
  3624                           
  3625                           ; BSR set to: 0
  3626  000B76  0E01               	movlw	1
  3627  000B78  0100               	movlb	0	; () banked
  3628  000B7A  6F93               	movwf	___awmod@counter& (0+255),b
  3629  000B7C  D006               	goto	l1848
  3630  000B7E                     l1846:
  3631                           
  3632                           ; BSR set to: 0
  3633  000B7E  0100               	movlb	0	; () banked
  3634  000B80  90D8               	bcf	status,0,c
  3635  000B82  3791               	rlcf	___awmod@divisor& (0+255),f,b
  3636  000B84  3792               	rlcf	(___awmod@divisor+1)& (0+255),f,b
  3637  000B86  0100               	movlb	0	; () banked
  3638  000B88  2B93               	incf	___awmod@counter& (0+255),f,b
  3639  000B8A                     l1848:
  3640                           
  3641                           ; BSR set to: 0
  3642  000B8A  0100               	movlb	0	; () banked
  3643  000B8C  AF92               	btfss	(___awmod@divisor+1)& (0+255),7,b
  3644  000B8E  D7F7               	goto	l1846
  3645  000B90                     l1850:
  3646                           
  3647                           ; BSR set to: 0
  3648  000B90  0100               	movlb	0	; () banked
  3649  000B92  5191               	movf	___awmod@divisor& (0+255),w,b
  3650  000B94  0100               	movlb	0	; () banked
  3651  000B96  5D8F               	subwf	___awmod@dividend& (0+255),w,b
  3652  000B98  0100               	movlb	0	; () banked
  3653  000B9A  5192               	movf	(___awmod@divisor+1)& (0+255),w,b
  3654  000B9C  0100               	movlb	0	; () banked
  3655  000B9E  5990               	subwfb	(___awmod@dividend+1)& (0+255),w,b
  3656  000BA0  A0D8               	btfss	status,0,c
  3657  000BA2  D008               	goto	l1854
  3658                           
  3659                           ; BSR set to: 0
  3660  000BA4  0100               	movlb	0	; () banked
  3661  000BA6  5191               	movf	___awmod@divisor& (0+255),w,b
  3662  000BA8  0100               	movlb	0	; () banked
  3663  000BAA  5F8F               	subwf	___awmod@dividend& (0+255),f,b
  3664  000BAC  0100               	movlb	0	; () banked
  3665  000BAE  5192               	movf	(___awmod@divisor+1)& (0+255),w,b
  3666  000BB0  0100               	movlb	0	; () banked
  3667  000BB2  5B90               	subwfb	(___awmod@dividend+1)& (0+255),f,b
  3668  000BB4                     l1854:
  3669                           
  3670                           ; BSR set to: 0
  3671  000BB4  0100               	movlb	0	; () banked
  3672  000BB6  90D8               	bcf	status,0,c
  3673  000BB8  3392               	rrcf	(___awmod@divisor+1)& (0+255),f,b
  3674  000BBA  3391               	rrcf	___awmod@divisor& (0+255),f,b
  3675                           
  3676                           ; BSR set to: 0
  3677  000BBC  0100               	movlb	0	; () banked
  3678  000BBE  2F93               	decfsz	___awmod@counter& (0+255),f,b
  3679  000BC0  D7E7               	goto	l1850
  3680  000BC2                     l1858:
  3681                           
  3682                           ; BSR set to: 0
  3683  000BC2  0100               	movlb	0	; () banked
  3684  000BC4  5194               	movf	___awmod@sign& (0+255),w,b
  3685  000BC6  0100               	movlb	0	; () banked
  3686  000BC8  B4D8               	btfsc	status,2,c
  3687  000BCA  D005               	goto	l1862
  3688                           
  3689                           ; BSR set to: 0
  3690  000BCC  0100               	movlb	0	; () banked
  3691  000BCE  6D8F               	negf	___awmod@dividend& (0+255),b
  3692  000BD0  1F90               	comf	(___awmod@dividend+1)& (0+255),f,b
  3693  000BD2  B0D8               	btfsc	status,0,c
  3694  000BD4  2B90               	incf	(___awmod@dividend+1)& (0+255),f,b
  3695  000BD6                     l1862:
  3696                           
  3697                           ; BSR set to: 0
  3698  000BD6  C08F  F08F         	movff	___awmod@dividend,?___awmod
  3699  000BDA  C090  F090         	movff	___awmod@dividend+1,?___awmod+1
  3700  000BDE  0012               	return	
  3701  000BE0                     __end_of___awmod:
  3702                           	opt stack 0
  3703                           tosu	equ	0xFFF
  3704                           tosh	equ	0xFFE
  3705                           tosl	equ	0xFFD
  3706                           pclath	equ	0xFFA
  3707                           tblptru	equ	0xFF8
  3708                           tblptrh	equ	0xFF7
  3709                           tblptrl	equ	0xFF6
  3710                           tablat	equ	0xFF5
  3711                           prodh	equ	0xFF4
  3712                           prodl	equ	0xFF3
  3713                           intcon	equ	0xFF2
  3714                           postinc0	equ	0xFEE
  3715                           wreg	equ	0xFE8
  3716                           indf1	equ	0xFE7
  3717                           postinc1	equ	0xFE6
  3718                           fsr1h	equ	0xFE2
  3719                           fsr1l	equ	0xFE1
  3720                           indf2	equ	0xFDF
  3721                           postinc2	equ	0xFDE
  3722                           postdec2	equ	0xFDD
  3723                           fsr2h	equ	0xFDA
  3724                           fsr2l	equ	0xFD9
  3725                           status	equ	0xFD8
  3726                           
  3727 ;; *************** function _ES_Timer_Init *****************
  3728 ;; Defined at:
  3729 ;;		line 130 in file "ES_Timers.c"
  3730 ;; Parameters:    Size  Location     Type
  3731 ;;  Rate            2    2[BANK0 ] enum E15426
  3732 ;; Auto vars:     Size  Location     Type
  3733 ;;		None
  3734 ;; Return value:  Size  Location     Type
  3735 ;;                  1    wreg      void 
  3736 ;; Registers used:
  3737 ;;		wreg, status,2, cstack
  3738 ;; Tracked objects:
  3739 ;;		On entry : 0/0
  3740 ;;		On exit  : 0/0
  3741 ;;		Unchanged: 0/0
  3742 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  3743 ;;      Params:         0       2       0       0
  3744 ;;      Locals:         0       0       0       0
  3745 ;;      Temps:          0       0       0       0
  3746 ;;      Totals:         0       2       0       0
  3747 ;;Total ram usage:        2 bytes
  3748 ;; Hardware stack levels used:    1
  3749 ;; Hardware stack levels required when called:    8
  3750 ;; This function calls:
  3751 ;;		__HW_Timer_Init
  3752 ;; This function is called by:
  3753 ;;		_ES_Initialize
  3754 ;; This function uses a non-reentrant model
  3755 ;;
  3756                           
  3757                           	psect	text20
  3758  0010DA                     __ptext20:
  3759                           	opt stack 0
  3760  0010DA                     _ES_Timer_Init:
  3761                           	opt stack 21
  3762                           
  3763                           ;ES_Timers.c: 133: _HW_Timer_Init(Rate);
  3764                           
  3765                           ; BSR set to: 0
  3766                           ;incstack = 0
  3767  0010DA  C091  F08F         	movff	ES_Timer_Init@Rate,__HW_Timer_Init@Rate
  3768  0010DE  C092  F090         	movff	ES_Timer_Init@Rate+1,__HW_Timer_Init@Rate+1
  3769  0010E2  EC3A  F008         	call	__HW_Timer_Init	;wreg free
  3770  0010E6  0012               	return		;funcret
  3771  0010E8                     __end_of_ES_Timer_Init:
  3772                           	opt stack 0
  3773                           tosu	equ	0xFFF
  3774                           tosh	equ	0xFFE
  3775                           tosl	equ	0xFFD
  3776                           pclath	equ	0xFFA
  3777                           tblptru	equ	0xFF8
  3778                           tblptrh	equ	0xFF7
  3779                           tblptrl	equ	0xFF6
  3780                           tablat	equ	0xFF5
  3781                           prodh	equ	0xFF4
  3782                           prodl	equ	0xFF3
  3783                           intcon	equ	0xFF2
  3784                           postinc0	equ	0xFEE
  3785                           wreg	equ	0xFE8
  3786                           indf1	equ	0xFE7
  3787                           postinc1	equ	0xFE6
  3788                           fsr1h	equ	0xFE2
  3789                           fsr1l	equ	0xFE1
  3790                           indf2	equ	0xFDF
  3791                           postinc2	equ	0xFDE
  3792                           postdec2	equ	0xFDD
  3793                           fsr2h	equ	0xFDA
  3794                           fsr2l	equ	0xFD9
  3795                           status	equ	0xFD8
  3796                           
  3797 ;; *************** function __HW_Timer_Init *****************
  3798 ;; Defined at:
  3799 ;;		line 71 in file "ES_Port.c"
  3800 ;; Parameters:    Size  Location     Type
  3801 ;;  Rate            2    0[BANK0 ] enum E15412
  3802 ;; Auto vars:     Size  Location     Type
  3803 ;;		None
  3804 ;; Return value:  Size  Location     Type
  3805 ;;                  1    wreg      void 
  3806 ;; Registers used:
  3807 ;;		wreg, status,2
  3808 ;; Tracked objects:
  3809 ;;		On entry : 0/0
  3810 ;;		On exit  : 0/0
  3811 ;;		Unchanged: 0/0
  3812 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  3813 ;;      Params:         0       2       0       0
  3814 ;;      Locals:         0       0       0       0
  3815 ;;      Temps:          0       0       0       0
  3816 ;;      Totals:         0       2       0       0
  3817 ;;Total ram usage:        2 bytes
  3818 ;; Hardware stack levels used:    1
  3819 ;; Hardware stack levels required when called:    7
  3820 ;; This function calls:
  3821 ;;		Nothing
  3822 ;; This function is called by:
  3823 ;;		_ES_Timer_Init
  3824 ;; This function uses a non-reentrant model
  3825 ;;
  3826                           
  3827                           	psect	text21
  3828  001074                     __ptext21:
  3829                           	opt stack 0
  3830  001074                     __HW_Timer_Init:
  3831                           	opt stack 21
  3832                           
  3833                           ;ES_Port.c: 79: PIE1 = 0b00000100;
  3834                           
  3835                           ;incstack = 0
  3836  001074  0E04               	movlw	4
  3837  001076  6E9D               	movwf	3997,c	;volatile
  3838                           
  3839                           ;ES_Port.c: 84: INTCON = 0b01000000;
  3840  001078  0E40               	movlw	64
  3841  00107A  6EF2               	movwf	intcon,c	;volatile
  3842                           
  3843                           ;ES_Port.c: 90: CCP1CON = 0b00001010;
  3844  00107C  0E0A               	movlw	10
  3845  00107E  6EBD               	movwf	4029,c	;volatile
  3846                           
  3847                           ;ES_Port.c: 94: CCPR1L = 0b00000001;
  3848  001080  0E01               	movlw	1
  3849  001082  6EBE               	movwf	4030,c	;volatile
  3850                           
  3851                           ;ES_Port.c: 98: CCPR1H = 0b00000000;
  3852  001084  0E00               	movlw	0
  3853  001086  6EBF               	movwf	4031,c	;volatile
  3854                           
  3855                           ;ES_Port.c: 106: T1CON = 0b00100001;
  3856  001088  0E21               	movlw	33
  3857  00108A  6ECD               	movwf	4045,c	;volatile
  3858                           
  3859                           ;ES_Port.c: 107: PEIE = 1;
  3860  00108C  8CF2               	bsf	intcon,6,c	;volatile
  3861                           
  3862                           ;ES_Port.c: 108: {GIE = 1;};
  3863  00108E  8EF2               	bsf	intcon,7,c	;volatile
  3864  001090  0012               	return		;funcret
  3865  001092                     __end_of__HW_Timer_Init:
  3866                           	opt stack 0
  3867                           tosu	equ	0xFFF
  3868                           tosh	equ	0xFFE
  3869                           tosl	equ	0xFFD
  3870                           pclath	equ	0xFFA
  3871                           tblptru	equ	0xFF8
  3872                           tblptrh	equ	0xFF7
  3873                           tblptrl	equ	0xFF6
  3874                           tablat	equ	0xFF5
  3875                           prodh	equ	0xFF4
  3876                           prodl	equ	0xFF3
  3877                           intcon	equ	0xFF2
  3878                           postinc0	equ	0xFEE
  3879                           wreg	equ	0xFE8
  3880                           indf1	equ	0xFE7
  3881                           postinc1	equ	0xFE6
  3882                           fsr1h	equ	0xFE2
  3883                           fsr1l	equ	0xFE1
  3884                           indf2	equ	0xFDF
  3885                           postinc2	equ	0xFDE
  3886                           postdec2	equ	0xFDD
  3887                           fsr2h	equ	0xFDA
  3888                           fsr2l	equ	0xFD9
  3889                           status	equ	0xFD8
  3890                           
  3891 ;; *************** function _ES_InitQueue *****************
  3892 ;; Defined at:
  3893 ;;		line 58 in file "ES_Queue.c"
  3894 ;; Parameters:    Size  Location     Type
  3895 ;;  pBlock          2    0[BANK0 ] PTR struct ES_Event_t
  3896 ;;		 -> Queue0(12), 
  3897 ;;  BlockSize       1    2[BANK0 ] unsigned char 
  3898 ;; Auto vars:     Size  Location     Type
  3899 ;;  pThisQueue      2    3[BANK0 ] PTR struct .
  3900 ;;		 -> Queue0(12), 
  3901 ;; Return value:  Size  Location     Type
  3902 ;;                  1    wreg      unsigned char 
  3903 ;; Registers used:
  3904 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  3905 ;; Tracked objects:
  3906 ;;		On entry : 0/0
  3907 ;;		On exit  : 0/0
  3908 ;;		Unchanged: 0/0
  3909 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  3910 ;;      Params:         0       3       0       0
  3911 ;;      Locals:         0       2       0       0
  3912 ;;      Temps:          0       0       0       0
  3913 ;;      Totals:         0       5       0       0
  3914 ;;Total ram usage:        5 bytes
  3915 ;; Hardware stack levels used:    1
  3916 ;; Hardware stack levels required when called:    7
  3917 ;; This function calls:
  3918 ;;		Nothing
  3919 ;; This function is called by:
  3920 ;;		_ES_Initialize
  3921 ;; This function uses a non-reentrant model
  3922 ;;
  3923                           
  3924                           	psect	text22
  3925  000F52                     __ptext22:
  3926                           	opt stack 0
  3927  000F52                     _ES_InitQueue:
  3928                           	opt stack 22
  3929                           
  3930                           ;ES_Queue.c: 60: pQueue_t pThisQueue;
  3931                           ;ES_Queue.c: 62: pThisQueue = (pQueue_t)pBlock;
  3932                           
  3933                           ;incstack = 0
  3934  000F52  C08F  F092         	movff	ES_InitQueue@pBlock,ES_InitQueue@pThisQueue
  3935  000F56  C090  F093         	movff	ES_InitQueue@pBlock+1,ES_InitQueue@pThisQueue+1
  3936                           
  3937                           ;ES_Queue.c: 64: pThisQueue->QueueSize = BlockSize - 1;
  3938  000F5A  0100               	movlb	0	; () banked
  3939  000F5C  0591               	decf	ES_InitQueue@BlockSize& (0+255),w,b
  3940  000F5E  C092  FFD9         	movff	ES_InitQueue@pThisQueue,fsr2l
  3941  000F62  C093  FFDA         	movff	ES_InitQueue@pThisQueue+1,fsr2h
  3942  000F66  6EDF               	movwf	indf2,c
  3943                           
  3944                           ; BSR set to: 0
  3945                           ;ES_Queue.c: 65: pThisQueue->CurrentIndex = 0;
  3946  000F68  0100               	movlb	0	; () banked
  3947  000F6A  EE20 F001          	lfsr	2,1
  3948  000F6E  5192               	movf	ES_InitQueue@pThisQueue& (0+255),w,b
  3949  000F70  26D9               	addwf	fsr2l,f,c
  3950  000F72  5193               	movf	(ES_InitQueue@pThisQueue+1)& (0+255),w,b
  3951  000F74  22DA               	addwfc	fsr2h,f,c
  3952  000F76  0E00               	movlw	0
  3953  000F78  6EDF               	movwf	indf2,c
  3954                           
  3955                           ; BSR set to: 0
  3956                           ;ES_Queue.c: 66: pThisQueue->NumEntries = 0;
  3957  000F7A  0100               	movlb	0	; () banked
  3958  000F7C  EE20 F002          	lfsr	2,2
  3959  000F80  5192               	movf	ES_InitQueue@pThisQueue& (0+255),w,b
  3960  000F82  26D9               	addwf	fsr2l,f,c
  3961  000F84  5193               	movf	(ES_InitQueue@pThisQueue+1)& (0+255),w,b
  3962  000F86  22DA               	addwfc	fsr2h,f,c
  3963  000F88  0E00               	movlw	0
  3964  000F8A  6EDF               	movwf	indf2,c
  3965  000F8C  0012               	return	
  3966  000F8E                     __end_of_ES_InitQueue:
  3967                           	opt stack 0
  3968                           tosu	equ	0xFFF
  3969                           tosh	equ	0xFFE
  3970                           tosl	equ	0xFFD
  3971                           pclath	equ	0xFFA
  3972                           tblptru	equ	0xFF8
  3973                           tblptrh	equ	0xFF7
  3974                           tblptrl	equ	0xFF6
  3975                           tablat	equ	0xFF5
  3976                           prodh	equ	0xFF4
  3977                           prodl	equ	0xFF3
  3978                           intcon	equ	0xFF2
  3979                           postinc0	equ	0xFEE
  3980                           wreg	equ	0xFE8
  3981                           indf1	equ	0xFE7
  3982                           postinc1	equ	0xFE6
  3983                           fsr1h	equ	0xFE2
  3984                           fsr1l	equ	0xFE1
  3985                           indf2	equ	0xFDF
  3986                           postinc2	equ	0xFDE
  3987                           postdec2	equ	0xFDD
  3988                           fsr2h	equ	0xFDA
  3989                           fsr2l	equ	0xFD9
  3990                           status	equ	0xFD8
  3991                           
  3992 ;; *************** function _ISR *****************
  3993 ;; Defined at:
  3994 ;;		line 111 in file "ES_Port.c"
  3995 ;; Parameters:    Size  Location     Type
  3996 ;;		None
  3997 ;; Auto vars:     Size  Location     Type
  3998 ;;		None
  3999 ;; Return value:  Size  Location     Type
  4000 ;;                  1    wreg      void 
  4001 ;; Registers used:
  4002 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  4003 ;; Tracked objects:
  4004 ;;		On entry : 0/0
  4005 ;;		On exit  : 0/0
  4006 ;;		Unchanged: 0/0
  4007 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  4008 ;;      Params:         0       0       0       0
  4009 ;;      Locals:         0       0       0       0
  4010 ;;      Temps:         16       0       0       0
  4011 ;;      Totals:        16       0       0       0
  4012 ;;Total ram usage:       16 bytes
  4013 ;; Hardware stack levels used:    1
  4014 ;; Hardware stack levels required when called:    6
  4015 ;; This function calls:
  4016 ;;		_BusErrorResponse
  4017 ;;		_CanErrorResponse
  4018 ;;		_CanRCVResponse
  4019 ;;		_CanXmitResponse
  4020 ;; This function is called by:
  4021 ;;		Interrupt level 2
  4022 ;; This function uses a non-reentrant model
  4023 ;;
  4024                           
  4025                           	psect	intcode
  4026  000008                     __pintcode:
  4027                           	opt stack 0
  4028  000008                     _ISR:
  4029                           	opt stack 19
  4030                           
  4031                           ; BSR set to: 0
  4032                           ;incstack = 0
  4033  000008  8248               	bsf	btemp,1,c	;set compiler interrupt flag (level 2)
  4034  00000A  CFFA F026          	movff	pclath,??_ISR+2
  4035  00000E  CFFB F027          	movff	pclatu,??_ISR+3
  4036  000012  ED3E  F004         	call	int_func,f	;refresh shadow registers
  4037                           tosu	equ	0xFFF
  4038                           tosh	equ	0xFFE
  4039                           tosl	equ	0xFFD
  4040                           pclatu	equ	0xFFB
  4041                           pclath	equ	0xFFA
  4042                           tblptru	equ	0xFF8
  4043                           tblptrh	equ	0xFF7
  4044                           tblptrl	equ	0xFF6
  4045                           tablat	equ	0xFF5
  4046                           prodh	equ	0xFF4
  4047                           prodl	equ	0xFF3
  4048                           intcon	equ	0xFF2
  4049                           postinc0	equ	0xFEE
  4050                           wreg	equ	0xFE8
  4051                           indf1	equ	0xFE7
  4052                           postinc1	equ	0xFE6
  4053                           fsr1h	equ	0xFE2
  4054                           fsr1l	equ	0xFE1
  4055                           indf2	equ	0xFDF
  4056                           postinc2	equ	0xFDE
  4057                           postdec2	equ	0xFDD
  4058                           fsr2h	equ	0xFDA
  4059                           fsr2l	equ	0xFD9
  4060                           status	equ	0xFD8
  4061                           
  4062                           	psect	intcode_body
  4063  00087C                     __pintcode_body:
  4064                           	opt stack 19
  4065  00087C                     int_func:
  4066                           	opt stack 19
  4067  00087C  0006               	pop		; remove dummy address from shadow register refresh
  4068  00087E  CFE9 F028          	movff	fsr0l,??_ISR+4
  4069  000882  CFEA F029          	movff	fsr0h,??_ISR+5
  4070  000886  CFE1 F02A          	movff	fsr1l,??_ISR+6
  4071  00088A  CFE2 F02B          	movff	fsr1h,??_ISR+7
  4072  00088E  CFD9 F02C          	movff	fsr2l,??_ISR+8
  4073  000892  CFDA F02D          	movff	fsr2h,??_ISR+9
  4074  000896  CFF3 F02E          	movff	prodl,??_ISR+10
  4075  00089A  CFF4 F02F          	movff	prodh,??_ISR+11
  4076  00089E  CFF6 F030          	movff	tblptrl,??_ISR+12
  4077  0008A2  CFF7 F031          	movff	tblptrh,??_ISR+13
  4078  0008A6  CFF8 F032          	movff	tblptru,??_ISR+14
  4079  0008AA  CFF5 F033          	movff	tablat,??_ISR+15
  4080                           
  4081                           ;ES_Port.c: 114: static unsigned int LastTime;
  4082                           ;ES_Port.c: 115: static unsigned int NextTime;
  4083                           ;ES_Port.c: 117: if (CCP1IF == 1)
  4084  0008AE  A49E               	btfss	3998,2,c	;volatile
  4085  0008B0  D015               	goto	i2l2340
  4086                           
  4087                           ;ES_Port.c: 118: {
  4088                           ;ES_Port.c: 119: LastTime = ((unsigned int)CCPR1H << 8)+ CCPR1L;
  4089  0008B2  50BF               	movf	4031,w,c	;volatile
  4090  0008B4  6E24               	movwf	??_ISR& (0+255),c
  4091  0008B6  50BE               	movf	4030,w,c	;volatile
  4092  0008B8  6E34               	movwf	ISR@LastTime,c
  4093  0008BA  C024  F035         	movff	??_ISR,ISR@LastTime+1
  4094                           
  4095                           ;ES_Port.c: 120: NextTime = LastTime + ((32000000L/4/4)/100);
  4096  0008BE  0E20               	movlw	32
  4097  0008C0  2434               	addwf	ISR@LastTime,w,c
  4098  0008C2  6E36               	movwf	ISR@NextTime,c
  4099  0008C4  0E4E               	movlw	78
  4100  0008C6  2035               	addwfc	ISR@LastTime+1,w,c
  4101  0008C8  6E37               	movwf	ISR@NextTime+1,c
  4102                           
  4103                           ;ES_Port.c: 121: CCPR1H = (unsigned char)(NextTime >> 8);
  4104  0008CA  5037               	movf	ISR@NextTime+1,w,c
  4105  0008CC  6EBF               	movwf	4031,c	;volatile
  4106                           
  4107                           ;ES_Port.c: 122: CCPR1L = (unsigned char)(NextTime & 0xFF);
  4108  0008CE  C036  FFBE         	movff	ISR@NextTime,4030	;volatile
  4109                           
  4110                           ;ES_Port.c: 123: CCP1IF = 0;
  4111  0008D2  949E               	bcf	3998,2,c	;volatile
  4112                           
  4113                           ;ES_Port.c: 124: TickCount++;
  4114  0008D4  0100               	movlb	0	; () banked
  4115  0008D6  2B8B               	incf	_TickCount& (0+255),f,b	;volatile
  4116                           
  4117                           ; BSR set to: 0
  4118                           ;ES_Port.c: 125: SysTickCounter++;
  4119  0008D8  4A38               	infsnz	_SysTickCounter,f,c	;volatile
  4120  0008DA  2A39               	incf	_SysTickCounter+1,f,c	;volatile
  4121  0008DC                     i2l2340:
  4122                           
  4123                           ;ES_Port.c: 126: }
  4124                           ;ES_Port.c: 128: if (TXB0IF == 1)
  4125  0008DC  A4A4               	btfss	4004,2,c	;volatile
  4126  0008DE  D003               	goto	i2l2346
  4127                           
  4128                           ;ES_Port.c: 129: {
  4129                           ;ES_Port.c: 130: TXB0IF = 0;
  4130  0008E0  94A4               	bcf	4004,2,c	;volatile
  4131                           
  4132                           ;ES_Port.c: 131: CanXmitResponse();
  4133  0008E2  EC7A  F008         	call	_CanXmitResponse	;wreg free
  4134  0008E6                     i2l2346:
  4135                           
  4136                           ;ES_Port.c: 132: }
  4137                           ;ES_Port.c: 133: if (RXB0IF == 1) {
  4138  0008E6  A0A4               	btfss	4004,0,c	;volatile
  4139  0008E8  D003               	goto	i2l2352
  4140                           
  4141                           ;ES_Port.c: 134: RXB0IF = 0;
  4142  0008EA  90A4               	bcf	4004,0,c	;volatile
  4143                           
  4144                           ;ES_Port.c: 135: CanRCVResponse();
  4145  0008EC  EC74  F008         	call	_CanRCVResponse	;wreg free
  4146  0008F0                     i2l2352:
  4147                           
  4148                           ;ES_Port.c: 136: }
  4149                           ;ES_Port.c: 137: if (ERRIF == 1) {
  4150  0008F0  AAA4               	btfss	4004,5,c	;volatile
  4151  0008F2  D003               	goto	i2l2358
  4152                           
  4153                           ;ES_Port.c: 138: ERRIF = 0;
  4154  0008F4  9AA4               	bcf	4004,5,c	;volatile
  4155                           
  4156                           ;ES_Port.c: 139: CanErrorResponse();
  4157  0008F6  EC80  F008         	call	_CanErrorResponse	;wreg free
  4158  0008FA                     i2l2358:
  4159                           
  4160                           ;ES_Port.c: 140: }
  4161                           ;ES_Port.c: 141: if (IRXIF == 1) {
  4162  0008FA  AEA4               	btfss	4004,7,c	;volatile
  4163  0008FC  D003               	goto	i2l160
  4164                           
  4165                           ;ES_Port.c: 142: IRXIF = 0;
  4166  0008FE  9EA4               	bcf	4004,7,c	;volatile
  4167                           
  4168                           ;ES_Port.c: 143: BusErrorResponse();
  4169  000900  EC81  F008         	call	_BusErrorResponse	;wreg free
  4170  000904                     i2l160:
  4171  000904  C033  FFF5         	movff	??_ISR+15,tablat
  4172  000908  C032  FFF8         	movff	??_ISR+14,tblptru
  4173  00090C  C031  FFF7         	movff	??_ISR+13,tblptrh
  4174  000910  C030  FFF6         	movff	??_ISR+12,tblptrl
  4175  000914  C02F  FFF4         	movff	??_ISR+11,prodh
  4176  000918  C02E  FFF3         	movff	??_ISR+10,prodl
  4177  00091C  C02D  FFDA         	movff	??_ISR+9,fsr2h
  4178  000920  C02C  FFD9         	movff	??_ISR+8,fsr2l
  4179  000924  C02B  FFE2         	movff	??_ISR+7,fsr1h
  4180  000928  C02A  FFE1         	movff	??_ISR+6,fsr1l
  4181  00092C  C029  FFEA         	movff	??_ISR+5,fsr0h
  4182  000930  C028  FFE9         	movff	??_ISR+4,fsr0l
  4183  000934  C027  FFFB         	movff	??_ISR+3,pclatu
  4184  000938  C026  FFFA         	movff	??_ISR+2,pclath
  4185  00093C  9248               	bcf	btemp,1,c	;clear compiler interrupt flag (level 2)
  4186  00093E  0011               	retfie		f
  4187  000940                     __end_of_ISR:
  4188                           	opt stack 0
  4189                           tosu	equ	0xFFF
  4190                           tosh	equ	0xFFE
  4191                           tosl	equ	0xFFD
  4192                           pclatu	equ	0xFFB
  4193                           pclath	equ	0xFFA
  4194                           tblptru	equ	0xFF8
  4195                           tblptrh	equ	0xFF7
  4196                           tblptrl	equ	0xFF6
  4197                           tablat	equ	0xFF5
  4198                           prodh	equ	0xFF4
  4199                           prodl	equ	0xFF3
  4200                           intcon	equ	0xFF2
  4201                           postinc0	equ	0xFEE
  4202                           fsr0h	equ	0xFEA
  4203                           fsr0l	equ	0xFE9
  4204                           wreg	equ	0xFE8
  4205                           indf1	equ	0xFE7
  4206                           postinc1	equ	0xFE6
  4207                           fsr1h	equ	0xFE2
  4208                           fsr1l	equ	0xFE1
  4209                           indf2	equ	0xFDF
  4210                           postinc2	equ	0xFDE
  4211                           postdec2	equ	0xFDD
  4212                           fsr2h	equ	0xFDA
  4213                           fsr2l	equ	0xFD9
  4214                           status	equ	0xFD8
  4215                           
  4216 ;; *************** function _CanXmitResponse *****************
  4217 ;; Defined at:
  4218 ;;		line 219 in file "CanRX_Service.c"
  4219 ;; Parameters:    Size  Location     Type
  4220 ;;		None
  4221 ;; Auto vars:     Size  Location     Type
  4222 ;;		None
  4223 ;; Return value:  Size  Location     Type
  4224 ;;                  1    wreg      void 
  4225 ;; Registers used:
  4226 ;;		None
  4227 ;; Tracked objects:
  4228 ;;		On entry : 0/0
  4229 ;;		On exit  : 0/0
  4230 ;;		Unchanged: 0/0
  4231 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  4232 ;;      Params:         0       0       0       0
  4233 ;;      Locals:         0       0       0       0
  4234 ;;      Temps:          0       0       0       0
  4235 ;;      Totals:         0       0       0       0
  4236 ;;Total ram usage:        0 bytes
  4237 ;; Hardware stack levels used:    1
  4238 ;; This function calls:
  4239 ;;		Nothing
  4240 ;; This function is called by:
  4241 ;;		_ISR
  4242 ;; This function uses a non-reentrant model
  4243 ;;
  4244                           
  4245                           	psect	text24
  4246  0010F4                     __ptext24:
  4247                           	opt stack 0
  4248  0010F4                     _CanXmitResponse:
  4249                           	opt stack 24
  4250                           
  4251                           ;CanRX_Service.c: 221: TXB0CONbits.TXREQ = 0;
  4252                           
  4253                           ;incstack = 0
  4254  0010F4  010F               	movlb	15	; () banked
  4255  0010F6  9740               	bcf	64,3,b	;volatile
  4256                           
  4257                           ; BSR set to: 15
  4258  0010F8  0012               	return		;funcret
  4259  0010FA                     __end_of_CanXmitResponse:
  4260                           	opt stack 0
  4261                           tosu	equ	0xFFF
  4262                           tosh	equ	0xFFE
  4263                           tosl	equ	0xFFD
  4264                           pclatu	equ	0xFFB
  4265                           pclath	equ	0xFFA
  4266                           tblptru	equ	0xFF8
  4267                           tblptrh	equ	0xFF7
  4268                           tblptrl	equ	0xFF6
  4269                           tablat	equ	0xFF5
  4270                           prodh	equ	0xFF4
  4271                           prodl	equ	0xFF3
  4272                           intcon	equ	0xFF2
  4273                           postinc0	equ	0xFEE
  4274                           fsr0h	equ	0xFEA
  4275                           fsr0l	equ	0xFE9
  4276                           wreg	equ	0xFE8
  4277                           indf1	equ	0xFE7
  4278                           postinc1	equ	0xFE6
  4279                           fsr1h	equ	0xFE2
  4280                           fsr1l	equ	0xFE1
  4281                           indf2	equ	0xFDF
  4282                           postinc2	equ	0xFDE
  4283                           postdec2	equ	0xFDD
  4284                           fsr2h	equ	0xFDA
  4285                           fsr2l	equ	0xFD9
  4286                           status	equ	0xFD8
  4287                           
  4288 ;; *************** function _CanRCVResponse *****************
  4289 ;; Defined at:
  4290 ;;		line 224 in file "CanRX_Service.c"
  4291 ;; Parameters:    Size  Location     Type
  4292 ;;		None
  4293 ;; Auto vars:     Size  Location     Type
  4294 ;;		None
  4295 ;; Return value:  Size  Location     Type
  4296 ;;                  2  131[None  ] int 
  4297 ;; Registers used:
  4298 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  4299 ;; Tracked objects:
  4300 ;;		On entry : 0/0
  4301 ;;		On exit  : 0/0
  4302 ;;		Unchanged: 0/0
  4303 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  4304 ;;      Params:         0       0       0       0
  4305 ;;      Locals:         0       0       0       0
  4306 ;;      Temps:          0       0       0       0
  4307 ;;      Totals:         0       0       0       0
  4308 ;;Total ram usage:        0 bytes
  4309 ;; Hardware stack levels used:    1
  4310 ;; Hardware stack levels required when called:    5
  4311 ;; This function calls:
  4312 ;;		_ProcessReceive
  4313 ;; This function is called by:
  4314 ;;		_ISR
  4315 ;; This function uses a non-reentrant model
  4316 ;;
  4317                           
  4318                           	psect	text25
  4319  0010E8                     __ptext25:
  4320                           	opt stack 0
  4321  0010E8                     _CanRCVResponse:
  4322                           	opt stack 19
  4323                           
  4324                           ;CanRX_Service.c: 226: if (RXB0CONbits.RXFUL == 1) {
  4325                           
  4326                           ; BSR set to: 15
  4327                           ;incstack = 0
  4328  0010E8  AE60               	btfss	3936,7,c	;volatile
  4329  0010EA  0012               	return	
  4330                           
  4331                           ;CanRX_Service.c: 227: ProcessReceive();
  4332  0010EC  EC7C  F006         	call	_ProcessReceive	;wreg free
  4333                           
  4334                           ;CanRX_Service.c: 228: RXB0CONbits.RXFUL = 0;
  4335  0010F0  9E60               	bcf	3936,7,c	;volatile
  4336  0010F2  0012               	return	
  4337  0010F4                     __end_of_CanRCVResponse:
  4338                           	opt stack 0
  4339                           tosu	equ	0xFFF
  4340                           tosh	equ	0xFFE
  4341                           tosl	equ	0xFFD
  4342                           pclatu	equ	0xFFB
  4343                           pclath	equ	0xFFA
  4344                           tblptru	equ	0xFF8
  4345                           tblptrh	equ	0xFF7
  4346                           tblptrl	equ	0xFF6
  4347                           tablat	equ	0xFF5
  4348                           prodh	equ	0xFF4
  4349                           prodl	equ	0xFF3
  4350                           intcon	equ	0xFF2
  4351                           postinc0	equ	0xFEE
  4352                           fsr0h	equ	0xFEA
  4353                           fsr0l	equ	0xFE9
  4354                           wreg	equ	0xFE8
  4355                           indf1	equ	0xFE7
  4356                           postinc1	equ	0xFE6
  4357                           fsr1h	equ	0xFE2
  4358                           fsr1l	equ	0xFE1
  4359                           indf2	equ	0xFDF
  4360                           postinc2	equ	0xFDE
  4361                           postdec2	equ	0xFDD
  4362                           fsr2h	equ	0xFDA
  4363                           fsr2l	equ	0xFD9
  4364                           status	equ	0xFD8
  4365                           
  4366 ;; *************** function _ProcessReceive *****************
  4367 ;; Defined at:
  4368 ;;		line 329 in file "CanRX_Service.c"
  4369 ;; Parameters:    Size  Location     Type
  4370 ;;		None
  4371 ;; Auto vars:     Size  Location     Type
  4372 ;;  Event2Post      3   32[COMRAM] struct ES_Event_t
  4373 ;; Return value:  Size  Location     Type
  4374 ;;                  1    wreg      void 
  4375 ;; Registers used:
  4376 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  4377 ;; Tracked objects:
  4378 ;;		On entry : 0/0
  4379 ;;		On exit  : 0/0
  4380 ;;		Unchanged: 0/0
  4381 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  4382 ;;      Params:         0       0       0       0
  4383 ;;      Locals:         3       0       0       0
  4384 ;;      Temps:          0       0       0       0
  4385 ;;      Totals:         3       0       0       0
  4386 ;;Total ram usage:        3 bytes
  4387 ;; Hardware stack levels used:    1
  4388 ;; Hardware stack levels required when called:    4
  4389 ;; This function calls:
  4390 ;;		_PostCanRX_Service
  4391 ;; This function is called by:
  4392 ;;		_CanRCVResponse
  4393 ;; This function uses a non-reentrant model
  4394 ;;
  4395                           
  4396                           	psect	text26
  4397  000CF8                     __ptext26:
  4398                           	opt stack 0
  4399  000CF8                     _ProcessReceive:
  4400                           	opt stack 19
  4401                           
  4402                           ;CanRX_Service.c: 332: if (RXB0SIDH == 0x00 && RXB0SIDL == 0x18 && RXB0EIDH == 0x00 && R
      +                          XB0EIDL == 0x01) {
  4403                           
  4404                           ;incstack = 0
  4405  000CF8  5061               	movf	3937,w,c	;volatile
  4406  000CFA  A4D8               	btfss	status,2,c
  4407  000CFC  0012               	return	
  4408  000CFE  0E18               	movlw	24
  4409  000D00  1862               	xorwf	3938,w,c	;volatile
  4410  000D02  A4D8               	btfss	status,2,c
  4411  000D04  0012               	return	
  4412  000D06  5063               	movf	3939,w,c	;volatile
  4413  000D08  A4D8               	btfss	status,2,c
  4414  000D0A  0012               	return	
  4415  000D0C  0464               	decf	3940,w,c	;volatile
  4416  000D0E  A4D8               	btfss	status,2,c
  4417  000D10  0012               	return	
  4418  000D12  D019               	goto	i2l2184
  4419  000D14                     i2l2162:
  4420                           
  4421                           ;CanRX_Service.c: 336: Event2Post.EventType = IDLE_EVENT;
  4422  000D14  0E05               	movlw	5
  4423  000D16  D015               	goto	L12
  4424  000D18                     i2l2164:
  4425                           
  4426                           ;CanRX_Service.c: 339: Event2Post.EventType = SPEAKING_EVENT;
  4427  000D18  0E06               	movlw	6
  4428  000D1A  D013               	goto	L12
  4429  000D1C                     i2l2166:
  4430                           
  4431                           ;CanRX_Service.c: 342: Event2Post.EventType = LOADING_EVENT;
  4432  000D1C  0E07               	movlw	7
  4433  000D1E  D011               	goto	L12
  4434  000D20                     i2l2168:
  4435                           
  4436                           ;CanRX_Service.c: 345: if (RXB0D1 == 0x00) {
  4437  000D20  5067               	movf	3943,w,c	;volatile
  4438  000D22  A4D8               	btfss	status,2,c
  4439  000D24  D002               	goto	i2l2172
  4440                           
  4441                           ;CanRX_Service.c: 346: Event2Post.EventType = LISTENING_IDLE_EVENT;
  4442  000D26  0E08               	movlw	8
  4443  000D28  D00C               	goto	L12
  4444  000D2A                     i2l2172:
  4445  000D2A  0E02               	movlw	2
  4446  000D2C  1867               	xorwf	3943,w,c	;volatile
  4447  000D2E  A4D8               	btfss	status,2,c
  4448  000D30  D002               	goto	i2l2176
  4449                           
  4450                           ;CanRX_Service.c: 348: Event2Post.EventType = LISTENING_LEFT_EVENT;
  4451  000D32  0E09               	movlw	9
  4452  000D34  D006               	goto	L12
  4453  000D36                     i2l2176:
  4454  000D36  0467               	decf	3943,w,c	;volatile
  4455  000D38  A4D8               	btfss	status,2,c
  4456  000D3A  D002               	goto	i2l2180
  4457                           
  4458                           ;CanRX_Service.c: 350: Event2Post.EventType = LISTENING_RIGHT_EVENT;
  4459  000D3C  0E0A               	movlw	10
  4460  000D3E  D001               	goto	L12
  4461  000D40                     i2l2180:
  4462                           
  4463                           ;CanRX_Service.c: 352: Event2Post.EventType = LISTENING_CENTER_EVENT;
  4464  000D40  0E0B               	movlw	11
  4465  000D42                     L12:
  4466  000D42  6E21               	movwf	ProcessReceive@Event2Post,c
  4467                           
  4468                           ;CanRX_Service.c: 355: }
  4469                           
  4470                           ;CanRX_Service.c: 353: }
  4471                           ;CanRX_Service.c: 354: break;
  4472  000D44  D00D               	goto	i2l2186
  4473  000D46                     i2l2184:
  4474  000D46  5066               	movf	3942,w,c	;volatile
  4475                           
  4476                           ; Switch size 1, requested type "space"
  4477                           ; Number of cases is 4, Range of values is 0 to 3
  4478                           ; switch strategies available:
  4479                           ; Name         Instructions Cycles
  4480                           ; simple_byte           13     7 (average)
  4481                           ;	Chosen strategy is simple_byte
  4482  000D48  0A00               	xorlw	0	; case 0
  4483  000D4A  B4D8               	btfsc	status,2,c
  4484  000D4C  D7E3               	goto	i2l2162
  4485  000D4E  0A01               	xorlw	1	; case 1
  4486  000D50  B4D8               	btfsc	status,2,c
  4487  000D52  D7E4               	goto	i2l2166
  4488  000D54  0A03               	xorlw	3	; case 2
  4489  000D56  B4D8               	btfsc	status,2,c
  4490  000D58  D7DF               	goto	i2l2164
  4491  000D5A  0A01               	xorlw	1	; case 3
  4492  000D5C  B4D8               	btfsc	status,2,c
  4493  000D5E  D7E0               	goto	i2l2168
  4494  000D60                     i2l2186:
  4495                           
  4496                           ;CanRX_Service.c: 356: PostCanRX_Service(Event2Post);
  4497  000D60  C021  F01E         	movff	ProcessReceive@Event2Post,PostCanRX_Service@ThisEvent
  4498  000D64  C022  F01F         	movff	ProcessReceive@Event2Post+1,PostCanRX_Service@ThisEvent+1
  4499  000D68  C023  F020         	movff	ProcessReceive@Event2Post+2,PostCanRX_Service@ThisEvent+2
  4500  000D6C  EC62  F008         	call	_PostCanRX_Service	;wreg free
  4501  000D70  0012               	return	
  4502  000D72                     __end_of_ProcessReceive:
  4503                           	opt stack 0
  4504                           tosu	equ	0xFFF
  4505                           tosh	equ	0xFFE
  4506                           tosl	equ	0xFFD
  4507                           pclatu	equ	0xFFB
  4508                           pclath	equ	0xFFA
  4509                           tblptru	equ	0xFF8
  4510                           tblptrh	equ	0xFF7
  4511                           tblptrl	equ	0xFF6
  4512                           tablat	equ	0xFF5
  4513                           prodh	equ	0xFF4
  4514                           prodl	equ	0xFF3
  4515                           intcon	equ	0xFF2
  4516                           postinc0	equ	0xFEE
  4517                           fsr0h	equ	0xFEA
  4518                           fsr0l	equ	0xFE9
  4519                           wreg	equ	0xFE8
  4520                           indf1	equ	0xFE7
  4521                           postinc1	equ	0xFE6
  4522                           fsr1h	equ	0xFE2
  4523                           fsr1l	equ	0xFE1
  4524                           indf2	equ	0xFDF
  4525                           postinc2	equ	0xFDE
  4526                           postdec2	equ	0xFDD
  4527                           fsr2h	equ	0xFDA
  4528                           fsr2l	equ	0xFD9
  4529                           status	equ	0xFD8
  4530                           
  4531 ;; *************** function _PostCanRX_Service *****************
  4532 ;; Defined at:
  4533 ;;		line 122 in file "CanRX_Service.c"
  4534 ;; Parameters:    Size  Location     Type
  4535 ;;  ThisEvent       3   29[COMRAM] struct ES_Event_t
  4536 ;; Auto vars:     Size  Location     Type
  4537 ;;		None
  4538 ;; Return value:  Size  Location     Type
  4539 ;;                  1    wreg      unsigned char 
  4540 ;; Registers used:
  4541 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  4542 ;; Tracked objects:
  4543 ;;		On entry : 0/0
  4544 ;;		On exit  : 0/0
  4545 ;;		Unchanged: 0/0
  4546 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  4547 ;;      Params:         3       0       0       0
  4548 ;;      Locals:         0       0       0       0
  4549 ;;      Temps:          0       0       0       0
  4550 ;;      Totals:         3       0       0       0
  4551 ;;Total ram usage:        3 bytes
  4552 ;; Hardware stack levels used:    1
  4553 ;; Hardware stack levels required when called:    3
  4554 ;; This function calls:
  4555 ;;		i2_ES_PostToService
  4556 ;; This function is called by:
  4557 ;;		_ProcessReceive
  4558 ;;		_PostToList
  4559 ;; This function uses a non-reentrant model
  4560 ;;
  4561                           
  4562                           	psect	text27
  4563  0010C4                     __ptext27:
  4564                           	opt stack 0
  4565  0010C4                     _PostCanRX_Service:
  4566                           	opt stack 19
  4567                           
  4568                           ;CanRX_Service.c: 124: return ES_PostToService( MyPriority, ThisEvent);
  4569                           
  4570                           ;incstack = 0
  4571  0010C4  C01E  F018         	movff	PostCanRX_Service@ThisEvent,i2ES_PostToService@TheEvent
  4572  0010C8  C01F  F019         	movff	PostCanRX_Service@ThisEvent+1,i2ES_PostToService@TheEvent+1
  4573  0010CC  C020  F01A         	movff	PostCanRX_Service@ThisEvent+2,i2ES_PostToService@TheEvent+2
  4574  0010D0  0100               	movlb	0	; () banked
  4575  0010D2  518A               	movf	_MyPriority& (0+255),w,b
  4576  0010D4  EC2D  F007         	call	i2_ES_PostToService
  4577  0010D8  0012               	return	
  4578  0010DA                     __end_of_PostCanRX_Service:
  4579                           	opt stack 0
  4580                           tosu	equ	0xFFF
  4581                           tosh	equ	0xFFE
  4582                           tosl	equ	0xFFD
  4583                           pclatu	equ	0xFFB
  4584                           pclath	equ	0xFFA
  4585                           tblptru	equ	0xFF8
  4586                           tblptrh	equ	0xFF7
  4587                           tblptrl	equ	0xFF6
  4588                           tablat	equ	0xFF5
  4589                           prodh	equ	0xFF4
  4590                           prodl	equ	0xFF3
  4591                           intcon	equ	0xFF2
  4592                           postinc0	equ	0xFEE
  4593                           fsr0h	equ	0xFEA
  4594                           fsr0l	equ	0xFE9
  4595                           wreg	equ	0xFE8
  4596                           indf1	equ	0xFE7
  4597                           postinc1	equ	0xFE6
  4598                           fsr1h	equ	0xFE2
  4599                           fsr1l	equ	0xFE1
  4600                           indf2	equ	0xFDF
  4601                           postinc2	equ	0xFDE
  4602                           postdec2	equ	0xFDD
  4603                           fsr2h	equ	0xFDA
  4604                           fsr2l	equ	0xFD9
  4605                           status	equ	0xFD8
  4606                           
  4607 ;; *************** function i2_ES_PostToService *****************
  4608 ;; Defined at:
  4609 ;;		line 351 in file "ES_Framework.c"
  4610 ;; Parameters:    Size  Location     Type
  4611 ;;  WhichService    1    wreg     unsigned char 
  4612 ;;  TheEvent        3   23[COMRAM] struct ES_Event_t
  4613 ;; Auto vars:     Size  Location     Type
  4614 ;;  WhichService    1   28[COMRAM] unsigned char 
  4615 ;; Return value:  Size  Location     Type
  4616 ;;                  1    wreg      unsigned char 
  4617 ;; Registers used:
  4618 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  4619 ;; Tracked objects:
  4620 ;;		On entry : 0/0
  4621 ;;		On exit  : 0/0
  4622 ;;		Unchanged: 0/0
  4623 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  4624 ;;      Params:         3       0       0       0
  4625 ;;      Locals:         1       0       0       0
  4626 ;;      Temps:          2       0       0       0
  4627 ;;      Totals:         6       0       0       0
  4628 ;;Total ram usage:        6 bytes
  4629 ;; Hardware stack levels used:    1
  4630 ;; Hardware stack levels required when called:    2
  4631 ;; This function calls:
  4632 ;;		i2_ES_EnQueueFIFO
  4633 ;; This function is called by:
  4634 ;;		_PostCanRX_Service
  4635 ;; This function uses a non-reentrant model
  4636 ;;
  4637                           
  4638                           	psect	text28
  4639  000E5A                     __ptext28:
  4640                           	opt stack 0
  4641  000E5A                     i2_ES_PostToService:
  4642                           	opt stack 19
  4643                           
  4644                           ;incstack = 0
  4645                           ;i2ES_PostToService@WhichService stored from wreg
  4646  000E5A  6E1D               	movwf	i2ES_PostToService@WhichService,c
  4647                           
  4648                           ;ES_Framework.c: 352: if ((WhichService < (sizeof(EventQueues)/sizeof(EventQueues[0]))) 
      +                          &&
  4649                           ;ES_Framework.c: 353: (ES_EnQueueFIFO( EventQueues[WhichService].pMem, TheEvent) ==
  4650                           ;ES_Framework.c: 354: 1 )){
  4651  000E5C  501D               	movf	i2ES_PostToService@WhichService,w,c
  4652  000E5E  A4D8               	btfss	status,2,c
  4653  000E60  D02F               	goto	i2l1938
  4654  000E62  501D               	movf	i2ES_PostToService@WhichService,w,c
  4655  000E64  0D03               	mullw	3
  4656  000E66  0E54               	movlw	low _EventQueues
  4657  000E68  24F3               	addwf	prodl,w,c
  4658  000E6A  6EF6               	movwf	tblptrl,c
  4659  000E6C  0E03               	movlw	high _EventQueues
  4660  000E6E  20F4               	addwfc	prodh,w,c
  4661  000E70  6EF7               	movwf	tblptrh,c
  4662  000E72                     	if	0	;There are less than 3 active tblptr bytes
  4663  000E72                     	endif
  4664  000E72  0009               	tblrd		*+
  4665  000E74  CFF5 F00D          	movff	tablat,i2ES_EnQueueFIFO@pBlock
  4666  000E78  000A               	tblrd		*-
  4667  000E7A  CFF5 F00E          	movff	tablat,i2ES_EnQueueFIFO@pBlock+1
  4668  000E7E  C018  F00F         	movff	i2ES_PostToService@TheEvent,i2ES_EnQueueFIFO@Event2Add
  4669  000E82  C019  F010         	movff	i2ES_PostToService@TheEvent+1,i2ES_EnQueueFIFO@Event2Add+1
  4670  000E86  C01A  F011         	movff	i2ES_PostToService@TheEvent+2,i2ES_EnQueueFIFO@Event2Add+2
  4671  000E8A  ECA0  F004         	call	i2_ES_EnQueueFIFO	;wreg free
  4672  000E8E  06E8               	decf	wreg,f,c
  4673  000E90  A4D8               	btfss	status,2,c
  4674  000E92  D016               	goto	i2l1938
  4675                           
  4676                           ;ES_Framework.c: 355: Ready |= BitNum2SetMask[WhichService];
  4677  000E94  501D               	movf	i2ES_PostToService@WhichService,w,c
  4678  000E96  0D02               	mullw	2
  4679  000E98  0E01               	movlw	low _BitNum2SetMask
  4680  000E9A  24F3               	addwf	prodl,w,c
  4681  000E9C  6EF6               	movwf	tblptrl,c
  4682  000E9E  0E03               	movlw	high _BitNum2SetMask
  4683  000EA0  20F4               	addwfc	prodh,w,c
  4684  000EA2  6EF7               	movwf	tblptrh,c
  4685  000EA4                     	if	0	;There are less than 3 active tblptr bytes
  4686  000EA4                     	endif
  4687  000EA4  0009               	tblrd		*+
  4688  000EA6  CFF5 F01B          	movff	tablat,??i2_ES_PostToService
  4689  000EAA  0009               	tblrd		*+
  4690  000EAC  CFF5 F01C          	movff	tablat,??i2_ES_PostToService+1
  4691  000EB0  501B               	movf	??i2_ES_PostToService,w,c
  4692  000EB2  0100               	movlb	0	; () banked
  4693  000EB4  1385               	iorwf	_Ready& (0+255),f,b
  4694  000EB6  501C               	movf	??i2_ES_PostToService+1,w,c
  4695  000EB8  0100               	movlb	0	; () banked
  4696  000EBA  1386               	iorwf	(_Ready+1)& (0+255),f,b
  4697                           
  4698                           ; BSR set to: 0
  4699                           ;ES_Framework.c: 356: return 1;
  4700  000EBC  0E01               	movlw	1
  4701                           
  4702                           ; BSR set to: 0
  4703                           ;ES_Framework.c: 357: } else
  4704                           
  4705                           ; BSR set to: 0
  4706  000EBE  0012               	return	
  4707  000EC0                     i2l1938:
  4708                           
  4709                           ;ES_Framework.c: 358: return 0;
  4710  000EC0  0E00               	movlw	0
  4711  000EC2  0012               	return	
  4712  000EC4                     __end_ofi2_ES_PostToService:
  4713                           	opt stack 0
  4714                           tosu	equ	0xFFF
  4715                           tosh	equ	0xFFE
  4716                           tosl	equ	0xFFD
  4717                           pclatu	equ	0xFFB
  4718                           pclath	equ	0xFFA
  4719                           tblptru	equ	0xFF8
  4720                           tblptrh	equ	0xFF7
  4721                           tblptrl	equ	0xFF6
  4722                           tablat	equ	0xFF5
  4723                           prodh	equ	0xFF4
  4724                           prodl	equ	0xFF3
  4725                           intcon	equ	0xFF2
  4726                           postinc0	equ	0xFEE
  4727                           fsr0h	equ	0xFEA
  4728                           fsr0l	equ	0xFE9
  4729                           wreg	equ	0xFE8
  4730                           indf1	equ	0xFE7
  4731                           postinc1	equ	0xFE6
  4732                           fsr1h	equ	0xFE2
  4733                           fsr1l	equ	0xFE1
  4734                           indf2	equ	0xFDF
  4735                           postinc2	equ	0xFDE
  4736                           postdec2	equ	0xFDD
  4737                           fsr2h	equ	0xFDA
  4738                           fsr2l	equ	0xFD9
  4739                           status	equ	0xFD8
  4740                           
  4741 ;; *************** function i2_ES_EnQueueFIFO *****************
  4742 ;; Defined at:
  4743 ;;		line 85 in file "ES_Queue.c"
  4744 ;; Parameters:    Size  Location     Type
  4745 ;;  pBlock          2   12[COMRAM] PTR struct ES_Event_t
  4746 ;;		 -> Queue0(12), 
  4747 ;;  Event2Add       3   14[COMRAM] struct ES_Event_t
  4748 ;; Auto vars:     Size  Location     Type
  4749 ;;  ES_EnQueueFI    2   21[COMRAM] PTR struct .
  4750 ;;		 -> Queue0(12), 
  4751 ;;  ES_EnQueueFI    1   20[COMRAM] unsigned char 
  4752 ;; Return value:  Size  Location     Type
  4753 ;;                  1    wreg      unsigned char 
  4754 ;; Registers used:
  4755 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  4756 ;; Tracked objects:
  4757 ;;		On entry : 0/0
  4758 ;;		On exit  : 0/0
  4759 ;;		Unchanged: 0/0
  4760 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  4761 ;;      Params:         5       0       0       0
  4762 ;;      Locals:         3       0       0       0
  4763 ;;      Temps:          3       0       0       0
  4764 ;;      Totals:        11       0       0       0
  4765 ;;Total ram usage:       11 bytes
  4766 ;; Hardware stack levels used:    1
  4767 ;; Hardware stack levels required when called:    1
  4768 ;; This function calls:
  4769 ;;		i2___awmod
  4770 ;;		i2___wmul
  4771 ;; This function is called by:
  4772 ;;		i2_ES_PostToService
  4773 ;; This function uses a non-reentrant model
  4774 ;;
  4775                           
  4776                           	psect	text29
  4777  000940                     __ptext29:
  4778                           	opt stack 0
  4779  000940                     i2_ES_EnQueueFIFO:
  4780                           	opt stack 19
  4781                           
  4782                           ;ES_Queue.c: 87: unsigned char SaveCrit;
  4783                           ;ES_Queue.c: 88: pQueue_t pThisQueue;
  4784                           ;ES_Queue.c: 89: pThisQueue = (pQueue_t)pBlock;
  4785                           
  4786                           ;incstack = 0
  4787  000940  C00D  F016         	movff	i2ES_EnQueueFIFO@pBlock,i2ES_EnQueueFIFO@pThisQueue
  4788  000944  C00E  F017         	movff	i2ES_EnQueueFIFO@pBlock+1,i2ES_EnQueueFIFO@pThisQueue+1
  4789                           
  4790                           ;ES_Queue.c: 91: if ( pThisQueue->NumEntries < pThisQueue->QueueSize)
  4791  000948  C016  FFD9         	movff	i2ES_EnQueueFIFO@pThisQueue,fsr2l
  4792  00094C  C017  FFDA         	movff	i2ES_EnQueueFIFO@pThisQueue+1,fsr2h
  4793  000950  EE10 F002          	lfsr	1,2
  4794  000954  5016               	movf	i2ES_EnQueueFIFO@pThisQueue,w,c
  4795  000956  26E1               	addwf	fsr1l,f,c
  4796  000958  5017               	movf	i2ES_EnQueueFIFO@pThisQueue+1,w,c
  4797  00095A  22E2               	addwfc	fsr1h,f,c
  4798  00095C  50DE               	movf	postinc2,w,c
  4799  00095E  5CE6               	subwf	postinc1,w,c
  4800  000960  B0D8               	btfsc	status,0,c
  4801  000962  D046               	goto	i2l1882
  4802                           
  4803                           ;ES_Queue.c: 92: {
  4804                           ;ES_Queue.c: 95: do{ SaveCrit = INTCON; GIE = 0;}while(0);
  4805  000964  CFF2 F015          	movff	intcon,i2ES_EnQueueFIFO@SaveCrit	;volatile
  4806  000968  9EF2               	bcf	intcon,7,c	;volatile
  4807                           
  4808                           ;ES_Queue.c: 96: pBlock[ 1 + ((pThisQueue->CurrentIndex + pThisQueue->NumEntries)
  4809                           ;ES_Queue.c: 97: % pThisQueue->QueueSize)] = Event2Add;
  4810  00096A  C016  FFD9         	movff	i2ES_EnQueueFIFO@pThisQueue,fsr2l
  4811  00096E  C017  FFDA         	movff	i2ES_EnQueueFIFO@pThisQueue+1,fsr2h
  4812  000972  50DF               	movf	indf2,w,c
  4813  000974  6E12               	movwf	??i2_ES_EnQueueFIFO& (0+255),c
  4814  000976  5012               	movf	??i2_ES_EnQueueFIFO,w,c
  4815  000978  6E03               	movwf	i2___awmod@divisor,c
  4816  00097A  6A04               	clrf	i2___awmod@divisor+1,c
  4817  00097C  EE20 F002          	lfsr	2,2
  4818  000980  5016               	movf	i2ES_EnQueueFIFO@pThisQueue,w,c
  4819  000982  26D9               	addwf	fsr2l,f,c
  4820  000984  5017               	movf	i2ES_EnQueueFIFO@pThisQueue+1,w,c
  4821  000986  22DA               	addwfc	fsr2h,f,c
  4822  000988  50DF               	movf	indf2,w,c
  4823  00098A  6E13               	movwf	(??i2_ES_EnQueueFIFO+1)& (0+255),c
  4824  00098C  EE20 F001          	lfsr	2,1
  4825  000990  5016               	movf	i2ES_EnQueueFIFO@pThisQueue,w,c
  4826  000992  26D9               	addwf	fsr2l,f,c
  4827  000994  5017               	movf	i2ES_EnQueueFIFO@pThisQueue+1,w,c
  4828  000996  22DA               	addwfc	fsr2h,f,c
  4829  000998  50DF               	movf	indf2,w,c
  4830  00099A  6E14               	movwf	(??i2_ES_EnQueueFIFO+2)& (0+255),c
  4831  00099C  5014               	movf	??i2_ES_EnQueueFIFO+2,w,c
  4832  00099E  2413               	addwf	??i2_ES_EnQueueFIFO+1,w,c
  4833  0009A0  6E01               	movwf	i2___awmod@dividend,c
  4834  0009A2  6A02               	clrf	i2___awmod@dividend+1,c
  4835  0009A4  3602               	rlcf	i2___awmod@dividend+1,f,c
  4836  0009A6  ECF5  F006         	call	i2___awmod	;wreg free
  4837  0009AA  0E01               	movlw	1
  4838  0009AC  2401               	addwf	?i2___awmod,w,c
  4839  0009AE  6E07               	movwf	i2___wmul@multiplier,c
  4840  0009B0  0E00               	movlw	0
  4841  0009B2  2002               	addwfc	?i2___awmod+1,w,c
  4842  0009B4  6E08               	movwf	i2___wmul@multiplier+1,c
  4843  0009B6  0E00               	movlw	0
  4844  0009B8  6E0A               	movwf	i2___wmul@multiplicand+1,c
  4845  0009BA  0E03               	movlw	3
  4846  0009BC  6E09               	movwf	i2___wmul@multiplicand,c
  4847  0009BE  EC27  F008         	call	i2___wmul	;wreg free
  4848  0009C2  5007               	movf	?i2___wmul,w,c
  4849  0009C4  240D               	addwf	i2ES_EnQueueFIFO@pBlock,w,c
  4850  0009C6  6ED9               	movwf	fsr2l,c
  4851  0009C8  5008               	movf	?i2___wmul+1,w,c
  4852  0009CA  200E               	addwfc	i2ES_EnQueueFIFO@pBlock+1,w,c
  4853  0009CC  6EDA               	movwf	fsr2h,c
  4854  0009CE  C00F  FFDE         	movff	i2ES_EnQueueFIFO@Event2Add,postinc2
  4855  0009D2  C010  FFDE         	movff	i2ES_EnQueueFIFO@Event2Add+1,postinc2
  4856  0009D6  C011  FFDE         	movff	i2ES_EnQueueFIFO@Event2Add+2,postinc2
  4857                           
  4858                           ;ES_Queue.c: 98: pThisQueue->NumEntries++;
  4859  0009DA  EE20 F002          	lfsr	2,2
  4860  0009DE  5016               	movf	i2ES_EnQueueFIFO@pThisQueue,w,c
  4861  0009E0  26D9               	addwf	fsr2l,f,c
  4862  0009E2  5017               	movf	i2ES_EnQueueFIFO@pThisQueue+1,w,c
  4863  0009E4  22DA               	addwfc	fsr2h,f,c
  4864  0009E6  2ADF               	incf	indf2,f,c
  4865                           
  4866                           ;ES_Queue.c: 99: {INTCON = SaveCrit;};
  4867  0009E8  C015  FFF2         	movff	i2ES_EnQueueFIFO@SaveCrit,intcon	;volatile
  4868                           
  4869                           ;ES_Queue.c: 101: return(1);
  4870  0009EC  0E01               	movlw	1
  4871                           
  4872                           ;ES_Queue.c: 102: }else
  4873  0009EE  0012               	return	
  4874  0009F0                     i2l1882:
  4875                           
  4876                           ;ES_Queue.c: 103: return(0);
  4877  0009F0  0E00               	movlw	0
  4878  0009F2  0012               	return	
  4879  0009F4                     __end_ofi2_ES_EnQueueFIFO:
  4880                           	opt stack 0
  4881                           tosu	equ	0xFFF
  4882                           tosh	equ	0xFFE
  4883                           tosl	equ	0xFFD
  4884                           pclatu	equ	0xFFB
  4885                           pclath	equ	0xFFA
  4886                           tblptru	equ	0xFF8
  4887                           tblptrh	equ	0xFF7
  4888                           tblptrl	equ	0xFF6
  4889                           tablat	equ	0xFF5
  4890                           prodh	equ	0xFF4
  4891                           prodl	equ	0xFF3
  4892                           intcon	equ	0xFF2
  4893                           postinc0	equ	0xFEE
  4894                           fsr0h	equ	0xFEA
  4895                           fsr0l	equ	0xFE9
  4896                           wreg	equ	0xFE8
  4897                           indf1	equ	0xFE7
  4898                           postinc1	equ	0xFE6
  4899                           fsr1h	equ	0xFE2
  4900                           fsr1l	equ	0xFE1
  4901                           indf2	equ	0xFDF
  4902                           postinc2	equ	0xFDE
  4903                           postdec2	equ	0xFDD
  4904                           fsr2h	equ	0xFDA
  4905                           fsr2l	equ	0xFD9
  4906                           status	equ	0xFD8
  4907                           
  4908 ;; *************** function i2___wmul *****************
  4909 ;; Defined at:
  4910 ;;		line 15 in file "/Applications/microchip/xc8/v1.38/sources/common/Umul16.c"
  4911 ;; Parameters:    Size  Location     Type
  4912 ;;  multiplier      2    6[COMRAM] unsigned int 
  4913 ;;  multiplicand    2    8[COMRAM] unsigned int 
  4914 ;; Auto vars:     Size  Location     Type
  4915 ;;  __wmul          2   10[COMRAM] unsigned int 
  4916 ;; Return value:  Size  Location     Type
  4917 ;;                  2    6[COMRAM] unsigned int 
  4918 ;; Registers used:
  4919 ;;		wreg, status,2, status,0, prodl, prodh
  4920 ;; Tracked objects:
  4921 ;;		On entry : 0/0
  4922 ;;		On exit  : 0/0
  4923 ;;		Unchanged: 0/0
  4924 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  4925 ;;      Params:         4       0       0       0
  4926 ;;      Locals:         2       0       0       0
  4927 ;;      Temps:          0       0       0       0
  4928 ;;      Totals:         6       0       0       0
  4929 ;;Total ram usage:        6 bytes
  4930 ;; Hardware stack levels used:    1
  4931 ;; This function calls:
  4932 ;;		Nothing
  4933 ;; This function is called by:
  4934 ;;		i2_ES_EnQueueFIFO
  4935 ;; This function uses a non-reentrant model
  4936 ;;
  4937                           
  4938                           	psect	text30
  4939  00104E                     __ptext30:
  4940                           	opt stack 0
  4941  00104E                     i2___wmul:
  4942                           	opt stack 19
  4943                           
  4944                           ;incstack = 0
  4945  00104E  5007               	movf	i2___wmul@multiplier,w,c
  4946  001050  0209               	mulwf	i2___wmul@multiplicand,c
  4947  001052  CFF3 F00B          	movff	prodl,i2___wmul@product
  4948  001056  CFF4 F00C          	movff	prodh,i2___wmul@product+1
  4949  00105A  5007               	movf	i2___wmul@multiplier,w,c
  4950  00105C  020A               	mulwf	i2___wmul@multiplicand+1,c
  4951  00105E  50F3               	movf	prodl,w,c
  4952  001060  260C               	addwf	i2___wmul@product+1,f,c
  4953  001062  5008               	movf	i2___wmul@multiplier+1,w,c
  4954  001064  0209               	mulwf	i2___wmul@multiplicand,c
  4955  001066  50F3               	movf	prodl,w,c
  4956  001068  260C               	addwf	i2___wmul@product+1,f,c
  4957  00106A  C00B  F007         	movff	i2___wmul@product,?i2___wmul
  4958  00106E  C00C  F008         	movff	i2___wmul@product+1,?i2___wmul+1
  4959  001072  0012               	return	
  4960  001074                     __end_ofi2___wmul:
  4961                           	opt stack 0
  4962                           tosu	equ	0xFFF
  4963                           tosh	equ	0xFFE
  4964                           tosl	equ	0xFFD
  4965                           pclatu	equ	0xFFB
  4966                           pclath	equ	0xFFA
  4967                           tblptru	equ	0xFF8
  4968                           tblptrh	equ	0xFF7
  4969                           tblptrl	equ	0xFF6
  4970                           tablat	equ	0xFF5
  4971                           prodh	equ	0xFF4
  4972                           prodl	equ	0xFF3
  4973                           intcon	equ	0xFF2
  4974                           postinc0	equ	0xFEE
  4975                           fsr0h	equ	0xFEA
  4976                           fsr0l	equ	0xFE9
  4977                           wreg	equ	0xFE8
  4978                           indf1	equ	0xFE7
  4979                           postinc1	equ	0xFE6
  4980                           fsr1h	equ	0xFE2
  4981                           fsr1l	equ	0xFE1
  4982                           indf2	equ	0xFDF
  4983                           postinc2	equ	0xFDE
  4984                           postdec2	equ	0xFDD
  4985                           fsr2h	equ	0xFDA
  4986                           fsr2l	equ	0xFD9
  4987                           status	equ	0xFD8
  4988                           
  4989 ;; *************** function i2___awmod *****************
  4990 ;; Defined at:
  4991 ;;		line 8 in file "/Applications/microchip/xc8/v1.38/sources/common/awmod.c"
  4992 ;; Parameters:    Size  Location     Type
  4993 ;;  dividend        2    0[COMRAM] int 
  4994 ;;  divisor         2    2[COMRAM] int 
  4995 ;; Auto vars:     Size  Location     Type
  4996 ;;  __awmod         1    5[COMRAM] unsigned char 
  4997 ;;  __awmod         1    4[COMRAM] unsigned char 
  4998 ;; Return value:  Size  Location     Type
  4999 ;;                  2    0[COMRAM] int 
  5000 ;; Registers used:
  5001 ;;		wreg, status,2, status,0
  5002 ;; Tracked objects:
  5003 ;;		On entry : 0/0
  5004 ;;		On exit  : 0/0
  5005 ;;		Unchanged: 0/0
  5006 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  5007 ;;      Params:         4       0       0       0
  5008 ;;      Locals:         2       0       0       0
  5009 ;;      Temps:          0       0       0       0
  5010 ;;      Totals:         6       0       0       0
  5011 ;;Total ram usage:        6 bytes
  5012 ;; Hardware stack levels used:    1
  5013 ;; This function calls:
  5014 ;;		Nothing
  5015 ;; This function is called by:
  5016 ;;		i2_ES_EnQueueFIFO
  5017 ;; This function uses a non-reentrant model
  5018 ;;
  5019                           
  5020                           	psect	text31
  5021  000DEA                     __ptext31:
  5022                           	opt stack 0
  5023  000DEA                     i2___awmod:
  5024                           	opt stack 19
  5025                           
  5026                           ;incstack = 0
  5027  000DEA  0E00               	movlw	0
  5028  000DEC  6E06               	movwf	i2___awmod@sign,c
  5029  000DEE  AE02               	btfss	i2___awmod@dividend+1,7,c
  5030  000DF0  D006               	goto	i2l1796
  5031  000DF2  6C01               	negf	i2___awmod@dividend,c
  5032  000DF4  1E02               	comf	i2___awmod@dividend+1,f,c
  5033  000DF6  B0D8               	btfsc	status,0,c
  5034  000DF8  2A02               	incf	i2___awmod@dividend+1,f,c
  5035  000DFA  0E01               	movlw	1
  5036  000DFC  6E06               	movwf	i2___awmod@sign,c
  5037  000DFE                     i2l1796:
  5038  000DFE  AE04               	btfss	i2___awmod@divisor+1,7,c
  5039  000E00  D004               	goto	i2l1800
  5040  000E02  6C03               	negf	i2___awmod@divisor,c
  5041  000E04  1E04               	comf	i2___awmod@divisor+1,f,c
  5042  000E06  B0D8               	btfsc	status,0,c
  5043  000E08  2A04               	incf	i2___awmod@divisor+1,f,c
  5044  000E0A                     i2l1800:
  5045  000E0A  5003               	movf	i2___awmod@divisor,w,c
  5046  000E0C  1004               	iorwf	i2___awmod@divisor+1,w,c
  5047  000E0E  B4D8               	btfsc	status,2,c
  5048  000E10  D018               	goto	i2l1816
  5049  000E12  0E01               	movlw	1
  5050  000E14  6E05               	movwf	i2___awmod@counter,c
  5051  000E16  D004               	goto	i2l1806
  5052  000E18                     i2l1804:
  5053  000E18  90D8               	bcf	status,0,c
  5054  000E1A  3603               	rlcf	i2___awmod@divisor,f,c
  5055  000E1C  3604               	rlcf	i2___awmod@divisor+1,f,c
  5056  000E1E  2A05               	incf	i2___awmod@counter,f,c
  5057  000E20                     i2l1806:
  5058  000E20  AE04               	btfss	i2___awmod@divisor+1,7,c
  5059  000E22  D7FA               	goto	i2l1804
  5060  000E24                     i2l1808:
  5061  000E24  5003               	movf	i2___awmod@divisor,w,c
  5062  000E26  5C01               	subwf	i2___awmod@dividend,w,c
  5063  000E28  5004               	movf	i2___awmod@divisor+1,w,c
  5064  000E2A  5802               	subwfb	i2___awmod@dividend+1,w,c
  5065  000E2C  A0D8               	btfss	status,0,c
  5066  000E2E  D004               	goto	i2l1812
  5067  000E30  5003               	movf	i2___awmod@divisor,w,c
  5068  000E32  5E01               	subwf	i2___awmod@dividend,f,c
  5069  000E34  5004               	movf	i2___awmod@divisor+1,w,c
  5070  000E36  5A02               	subwfb	i2___awmod@dividend+1,f,c
  5071  000E38                     i2l1812:
  5072  000E38  90D8               	bcf	status,0,c
  5073  000E3A  3204               	rrcf	i2___awmod@divisor+1,f,c
  5074  000E3C  3203               	rrcf	i2___awmod@divisor,f,c
  5075  000E3E  2E05               	decfsz	i2___awmod@counter,f,c
  5076  000E40  D7F1               	goto	i2l1808
  5077  000E42                     i2l1816:
  5078  000E42  5006               	movf	i2___awmod@sign,w,c
  5079  000E44  B4D8               	btfsc	status,2,c
  5080  000E46  D004               	goto	i2l1820
  5081  000E48  6C01               	negf	i2___awmod@dividend,c
  5082  000E4A  1E02               	comf	i2___awmod@dividend+1,f,c
  5083  000E4C  B0D8               	btfsc	status,0,c
  5084  000E4E  2A02               	incf	i2___awmod@dividend+1,f,c
  5085  000E50                     i2l1820:
  5086  000E50  C001  F001         	movff	i2___awmod@dividend,?i2___awmod
  5087  000E54  C002  F002         	movff	i2___awmod@dividend+1,?i2___awmod+1
  5088  000E58  0012               	return	
  5089  000E5A                     __end_ofi2___awmod:
  5090                           	opt stack 0
  5091                           tosu	equ	0xFFF
  5092                           tosh	equ	0xFFE
  5093                           tosl	equ	0xFFD
  5094                           pclatu	equ	0xFFB
  5095                           pclath	equ	0xFFA
  5096                           tblptru	equ	0xFF8
  5097                           tblptrh	equ	0xFF7
  5098                           tblptrl	equ	0xFF6
  5099                           tablat	equ	0xFF5
  5100                           prodh	equ	0xFF4
  5101                           prodl	equ	0xFF3
  5102                           intcon	equ	0xFF2
  5103                           postinc0	equ	0xFEE
  5104                           fsr0h	equ	0xFEA
  5105                           fsr0l	equ	0xFE9
  5106                           wreg	equ	0xFE8
  5107                           indf1	equ	0xFE7
  5108                           postinc1	equ	0xFE6
  5109                           fsr1h	equ	0xFE2
  5110                           fsr1l	equ	0xFE1
  5111                           indf2	equ	0xFDF
  5112                           postinc2	equ	0xFDE
  5113                           postdec2	equ	0xFDD
  5114                           fsr2h	equ	0xFDA
  5115                           fsr2l	equ	0xFD9
  5116                           status	equ	0xFD8
  5117                           
  5118 ;; *************** function _CanErrorResponse *****************
  5119 ;; Defined at:
  5120 ;;		line 233 in file "CanRX_Service.c"
  5121 ;; Parameters:    Size  Location     Type
  5122 ;;		None
  5123 ;; Auto vars:     Size  Location     Type
  5124 ;;		None
  5125 ;; Return value:  Size  Location     Type
  5126 ;;                  1    wreg      void 
  5127 ;; Registers used:
  5128 ;;		None
  5129 ;; Tracked objects:
  5130 ;;		On entry : 0/0
  5131 ;;		On exit  : 0/0
  5132 ;;		Unchanged: 0/0
  5133 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  5134 ;;      Params:         0       0       0       0
  5135 ;;      Locals:         0       0       0       0
  5136 ;;      Temps:          0       0       0       0
  5137 ;;      Totals:         0       0       0       0
  5138 ;;Total ram usage:        0 bytes
  5139 ;; Hardware stack levels used:    1
  5140 ;; This function calls:
  5141 ;;		Nothing
  5142 ;; This function is called by:
  5143 ;;		_ISR
  5144 ;; This function uses a non-reentrant model
  5145 ;;
  5146                           
  5147                           	psect	text32
  5148  001100                     __ptext32:
  5149                           	opt stack 0
  5150  001100                     _CanErrorResponse:
  5151                           	opt stack 24
  5152                           
  5153                           ;incstack = 0
  5154  001100  0012               	return		;funcret
  5155  001102                     __end_of_CanErrorResponse:
  5156                           	opt stack 0
  5157                           tosu	equ	0xFFF
  5158                           tosh	equ	0xFFE
  5159                           tosl	equ	0xFFD
  5160                           pclatu	equ	0xFFB
  5161                           pclath	equ	0xFFA
  5162                           tblptru	equ	0xFF8
  5163                           tblptrh	equ	0xFF7
  5164                           tblptrl	equ	0xFF6
  5165                           tablat	equ	0xFF5
  5166                           prodh	equ	0xFF4
  5167                           prodl	equ	0xFF3
  5168                           intcon	equ	0xFF2
  5169                           postinc0	equ	0xFEE
  5170                           fsr0h	equ	0xFEA
  5171                           fsr0l	equ	0xFE9
  5172                           wreg	equ	0xFE8
  5173                           indf1	equ	0xFE7
  5174                           postinc1	equ	0xFE6
  5175                           fsr1h	equ	0xFE2
  5176                           fsr1l	equ	0xFE1
  5177                           indf2	equ	0xFDF
  5178                           postinc2	equ	0xFDE
  5179                           postdec2	equ	0xFDD
  5180                           fsr2h	equ	0xFDA
  5181                           fsr2l	equ	0xFD9
  5182                           status	equ	0xFD8
  5183                           
  5184 ;; *************** function _BusErrorResponse *****************
  5185 ;; Defined at:
  5186 ;;		line 238 in file "CanRX_Service.c"
  5187 ;; Parameters:    Size  Location     Type
  5188 ;;		None
  5189 ;; Auto vars:     Size  Location     Type
  5190 ;;		None
  5191 ;; Return value:  Size  Location     Type
  5192 ;;                  1    wreg      void 
  5193 ;; Registers used:
  5194 ;;		None
  5195 ;; Tracked objects:
  5196 ;;		On entry : 0/0
  5197 ;;		On exit  : 0/0
  5198 ;;		Unchanged: 0/0
  5199 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  5200 ;;      Params:         0       0       0       0
  5201 ;;      Locals:         0       0       0       0
  5202 ;;      Temps:          0       0       0       0
  5203 ;;      Totals:         0       0       0       0
  5204 ;;Total ram usage:        0 bytes
  5205 ;; Hardware stack levels used:    1
  5206 ;; This function calls:
  5207 ;;		Nothing
  5208 ;; This function is called by:
  5209 ;;		_ISR
  5210 ;; This function uses a non-reentrant model
  5211 ;;
  5212                           
  5213                           	psect	text33
  5214  001102                     __ptext33:
  5215                           	opt stack 0
  5216  001102                     _BusErrorResponse:
  5217                           	opt stack 24
  5218                           
  5219                           ;incstack = 0
  5220  001102  0012               	return		;funcret
  5221  001104                     __end_of_BusErrorResponse:
  5222                           	opt stack 0
  5223                           tosu	equ	0xFFF
  5224                           tosh	equ	0xFFE
  5225                           tosl	equ	0xFFD
  5226                           pclatu	equ	0xFFB
  5227                           pclath	equ	0xFFA
  5228                           tblptru	equ	0xFF8
  5229                           tblptrh	equ	0xFF7
  5230                           tblptrl	equ	0xFF6
  5231                           tablat	equ	0xFF5
  5232                           prodh	equ	0xFF4
  5233                           prodl	equ	0xFF3
  5234                           intcon	equ	0xFF2
  5235                           postinc0	equ	0xFEE
  5236                           fsr0h	equ	0xFEA
  5237                           fsr0l	equ	0xFE9
  5238                           wreg	equ	0xFE8
  5239                           indf1	equ	0xFE7
  5240                           postinc1	equ	0xFE6
  5241                           fsr1h	equ	0xFE2
  5242                           fsr1l	equ	0xFE1
  5243                           indf2	equ	0xFDF
  5244                           postinc2	equ	0xFDE
  5245                           postdec2	equ	0xFDD
  5246                           fsr2h	equ	0xFDA
  5247                           fsr2l	equ	0xFD9
  5248                           status	equ	0xFD8
  5249                           tosu	equ	0xFFF
  5250                           tosh	equ	0xFFE
  5251                           tosl	equ	0xFFD
  5252                           pclatu	equ	0xFFB
  5253                           pclath	equ	0xFFA
  5254                           tblptru	equ	0xFF8
  5255                           tblptrh	equ	0xFF7
  5256                           tblptrl	equ	0xFF6
  5257                           tablat	equ	0xFF5
  5258                           prodh	equ	0xFF4
  5259                           prodl	equ	0xFF3
  5260                           intcon	equ	0xFF2
  5261                           postinc0	equ	0xFEE
  5262                           fsr0h	equ	0xFEA
  5263                           fsr0l	equ	0xFE9
  5264                           wreg	equ	0xFE8
  5265                           indf1	equ	0xFE7
  5266                           postinc1	equ	0xFE6
  5267                           fsr1h	equ	0xFE2
  5268                           fsr1l	equ	0xFE1
  5269                           indf2	equ	0xFDF
  5270                           postinc2	equ	0xFDE
  5271                           postdec2	equ	0xFDD
  5272                           fsr2h	equ	0xFDA
  5273                           fsr2l	equ	0xFD9
  5274                           status	equ	0xFD8
  5275                           
  5276                           	psect	text34
  5277  000000                     __ptext34:
  5278                           	opt stack 0
  5279                           tosu	equ	0xFFF
  5280                           tosh	equ	0xFFE
  5281                           tosl	equ	0xFFD
  5282                           pclatu	equ	0xFFB
  5283                           pclath	equ	0xFFA
  5284                           tblptru	equ	0xFF8
  5285                           tblptrh	equ	0xFF7
  5286                           tblptrl	equ	0xFF6
  5287                           tablat	equ	0xFF5
  5288                           prodh	equ	0xFF4
  5289                           prodl	equ	0xFF3
  5290                           intcon	equ	0xFF2
  5291                           postinc0	equ	0xFEE
  5292                           fsr0h	equ	0xFEA
  5293                           fsr0l	equ	0xFE9
  5294                           wreg	equ	0xFE8
  5295                           indf1	equ	0xFE7
  5296                           postinc1	equ	0xFE6
  5297                           fsr1h	equ	0xFE2
  5298                           fsr1l	equ	0xFE1
  5299                           indf2	equ	0xFDF
  5300                           postinc2	equ	0xFDE
  5301                           postdec2	equ	0xFDD
  5302                           fsr2h	equ	0xFDA
  5303                           fsr2l	equ	0xFD9
  5304                           status	equ	0xFD8
  5305                           
  5306                           	psect	rparam
  5307  0000                     tosu	equ	0xFFF
  5308                           tosh	equ	0xFFE
  5309                           tosl	equ	0xFFD
  5310                           pclatu	equ	0xFFB
  5311                           pclath	equ	0xFFA
  5312                           tblptru	equ	0xFF8
  5313                           tblptrh	equ	0xFF7
  5314                           tblptrl	equ	0xFF6
  5315                           tablat	equ	0xFF5
  5316                           prodh	equ	0xFF4
  5317                           prodl	equ	0xFF3
  5318                           intcon	equ	0xFF2
  5319                           postinc0	equ	0xFEE
  5320                           fsr0h	equ	0xFEA
  5321                           fsr0l	equ	0xFE9
  5322                           wreg	equ	0xFE8
  5323                           indf1	equ	0xFE7
  5324                           postinc1	equ	0xFE6
  5325                           fsr1h	equ	0xFE2
  5326                           fsr1l	equ	0xFE1
  5327                           indf2	equ	0xFDF
  5328                           postinc2	equ	0xFDE
  5329                           postdec2	equ	0xFDD
  5330                           fsr2h	equ	0xFDA
  5331                           fsr2l	equ	0xFD9
  5332                           status	equ	0xFD8
  5333                           
  5334                           	psect	temp
  5335  000048                     btemp:
  5336                           	opt stack 0
  5337  000048                     	ds	1
  5338  0000                     int$flags	set	btemp
  5339                           tosu	equ	0xFFF
  5340                           tosh	equ	0xFFE
  5341                           tosl	equ	0xFFD
  5342                           pclatu	equ	0xFFB
  5343                           pclath	equ	0xFFA
  5344                           tblptru	equ	0xFF8
  5345                           tblptrh	equ	0xFF7
  5346                           tblptrl	equ	0xFF6
  5347                           tablat	equ	0xFF5
  5348                           prodh	equ	0xFF4
  5349                           prodl	equ	0xFF3
  5350                           intcon	equ	0xFF2
  5351                           postinc0	equ	0xFEE
  5352                           fsr0h	equ	0xFEA
  5353                           fsr0l	equ	0xFE9
  5354                           wreg	equ	0xFE8
  5355                           indf1	equ	0xFE7
  5356                           postinc1	equ	0xFE6
  5357                           fsr1h	equ	0xFE2
  5358                           fsr1l	equ	0xFE1
  5359                           indf2	equ	0xFDF
  5360                           postinc2	equ	0xFDE
  5361                           postdec2	equ	0xFDD
  5362                           fsr2h	equ	0xFDA
  5363                           fsr2l	equ	0xFD9
  5364                           status	equ	0xFD8


Data Sizes:
    Strings     89
    Constant    90
    Data        0
    BSS         67
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           94     51      71
    BANK0           160     37      84
    BANK1           256      0       0
    BANK2           256      0       0

Pointer List with Targets:

    printf@f	PTR const unsigned char  size(2) Largest target is 27
		 -> STR_4(CODE[15]), STR_3(CODE[23]), STR_2(CODE[24]), STR_1(CODE[27]), 

    printf@ap	PTR void [1] size(2) Largest target is 2
		 -> ?_printf(BANK0[2]), 

    Timer2PostFunc	const PTR FTN(struct ES_Event_t,)unsigned char [16] size(2) Largest target is 1
		 -> Absolute function(), 

    ES_DeQueue@pReturnEvent	PTR struct ES_Event_t size(2) Largest target is 3
		 -> ES_Run@ThisEvent(BANK0[3]), ES_RecallEvents@RecalledEvent(COMRAM[3]), 

    ES_DeQueue@pBlock	PTR struct ES_Event_t size(2) Largest target is 12
		 -> Queue0(COMRAM[12]), 

    ES_DeQueue@pThisQueue	PTR struct . size(2) Largest target is 12
		 -> Queue0(COMRAM[12]), 

    ES_EnQueueFIFO@pBlock	PTR struct ES_Event_t size(2) Largest target is 12
		 -> Queue0(COMRAM[12]), 

    ES_EnQueueFIFO@pThisQueue	PTR struct . size(2) Largest target is 12
		 -> Queue0(COMRAM[12]), 

    ES_InitQueue@pBlock	PTR struct ES_Event_t size(2) Largest target is 12
		 -> Queue0(COMRAM[12]), 

    ES_InitQueue@pThisQueue	PTR struct . size(2) Largest target is 12
		 -> Queue0(COMRAM[12]), 

    DistList00	const PTR FTN(struct ES_Event_t,)unsigned char [1] size(2) Largest target is 1
		 -> PostCanRX_Service(), 

    S105$pMem	PTR struct ES_Event_t size(2) Largest target is 12
		 -> Queue0(COMRAM[12]), 

    EventQueues.pMem	PTR struct ES_Event_t size(2) Largest target is 12
		 -> Queue0(COMRAM[12]), 

    S84$RunFunc	PTR FTN(struct ES_Event_t,)struct ES_Event_t size(2) Largest target is 3
		 -> RunCanRX_Service(), 

    ServDescList.RunFunc	PTR FTN(struct ES_Event_t,)struct ES_Event_t size(2) Largest target is 3
		 -> RunCanRX_Service(), 

    S84$InitFunc	PTR FTN(unsigned char ,)unsigned char  size(2) Largest target is 1
		 -> InitCanRX_Service(), 

    ServDescList.InitFunc	PTR FTN(unsigned char ,)unsigned char  size(2) Largest target is 1
		 -> InitCanRX_Service(), 

    ES_EventList	const PTR FTN()unsigned char [1] size(2) Largest target is 1
		 -> Check4Keystroke(), 


Critical Paths under _main in COMRAM

    None.

Critical Paths under _ISR in COMRAM

    _CanRCVResponse->_ProcessReceive
    _ProcessReceive->_PostCanRX_Service
    _PostCanRX_Service->i2_ES_PostToService
    i2_ES_PostToService->i2_ES_EnQueueFIFO
    i2_ES_EnQueueFIFO->i2___wmul
    i2___wmul->i2___awmod

Critical Paths under _main in BANK0

    _main->_ES_Initialize
    _ES_Run->_ES_DeQueue
    __HW_Process_Pending_Ints->_ES_Timer_Tick_Resp
    _ES_Timer_Tick_Resp->_ES_GetMSBitSet
    _ES_DeQueue->___wmul
    _ES_Initialize->_InitCanRX_Service
    _InitCanRX_Service->_ES_PostToService
    _ES_PostToService->_ES_EnQueueFIFO
    _ES_EnQueueFIFO->___wmul
    ___wmul->___awmod
    _ES_Timer_Init->__HW_Timer_Init

Critical Paths under _ISR in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _ISR in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _ISR in BANK2

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 1     1      0    6835
                                             36 BANK0      1     1      0
                      _ES_Initialize
                             _ES_Run
                             _printf
 ---------------------------------------------------------------------------------
 (1) _printf                                              18    16      2     350
                                              0 BANK0      5     3      2
                              _putch
 ---------------------------------------------------------------------------------
 (2) _putch                                                1     1      0       0
 ---------------------------------------------------------------------------------
 (1) _ES_Run                                               5     5      0    3158
                                             22 BANK0      5     5      0
                 _ES_CheckUserEvents
                         _ES_DeQueue
                     _ES_GetMSBitSet
                   _RunCanRX_Service *
           __HW_Process_Pending_Ints
 ---------------------------------------------------------------------------------
 (2) __HW_Process_Pending_Ints                             0     0      0     333
                 _ES_Timer_Tick_Resp
 ---------------------------------------------------------------------------------
 (3) _ES_Timer_Tick_Resp                                   4     4      0     333
                                             10 BANK0      4     4      0
                     _ES_GetMSBitSet
 ---------------------------------------------------------------------------------
 (4) _ES_GetMSBitSet                                      10     8      2     333
                                              0 BANK0     10     8      2
 ---------------------------------------------------------------------------------
 (2) _RunCanRX_Service                                     6     3      3      98
                                              0 BANK0      6     3      3
                    _InitCanHardware
                           _InitPins
 ---------------------------------------------------------------------------------
 (3) _InitPins                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _InitCanHardware                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _ES_DeQueue                                          10     6      4    2237
                                             12 BANK0     10     6      4
                            ___lbmod
                             ___wmul
 ---------------------------------------------------------------------------------
 (3) ___lbmod                                              4     3      1     208
                                              0 BANK0      4     3      1
 ---------------------------------------------------------------------------------
 (2) _ES_CheckUserEvents                                   1     1      0      90
                                              0 BANK0      1     1      0
                    _Check4Keystroke *
 ---------------------------------------------------------------------------------
 (3) _Check4Keystroke                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _ES_Initialize                                        3     1      2    3281
                                             33 BANK0      3     1      2
                       _ES_InitQueue
                      _ES_Timer_Init
                  _InitCanRX_Service *
 ---------------------------------------------------------------------------------
 (2) _InitCanRX_Service                                    4     4      0    2562
                                             29 BANK0      4     4      0
                   _ES_PostToService
 ---------------------------------------------------------------------------------
 (3) _ES_PostToService                                     6     3      3    2517
                                             23 BANK0      6     3      3
                     _ES_EnQueueFIFO
 ---------------------------------------------------------------------------------
 (4) _ES_EnQueueFIFO                                      11     6      5    2303
                                             12 BANK0     11     6      5
                            ___awmod
                             ___wmul
 ---------------------------------------------------------------------------------
 (3) ___wmul                                               6     2      4    1369
                                              6 BANK0      6     2      4
                            ___awmod (ARG)
 ---------------------------------------------------------------------------------
 (5) ___awmod                                              6     2      4     408
                                              0 BANK0      6     2      4
 ---------------------------------------------------------------------------------
 (2) _ES_Timer_Init                                        2     0      2     174
                                              2 BANK0      2     0      2
                     __HW_Timer_Init
 ---------------------------------------------------------------------------------
 (3) __HW_Timer_Init                                       2     0      2      76
                                              0 BANK0      2     0      2
 ---------------------------------------------------------------------------------
 (2) _ES_InitQueue                                         5     2      3     269
                                              0 BANK0      5     2      3
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 5
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (6) _ISR                                                 16    16      0     950
                                             35 COMRAM    16    16      0
                   _BusErrorResponse
                   _CanErrorResponse
                     _CanRCVResponse
                    _CanXmitResponse
 ---------------------------------------------------------------------------------
 (7) _CanXmitResponse                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (7) _CanRCVResponse                                       0     0      0     950
                     _ProcessReceive
 ---------------------------------------------------------------------------------
 (8) _ProcessReceive                                       3     3      0     950
                                             32 COMRAM     3     3      0
                  _PostCanRX_Service
 ---------------------------------------------------------------------------------
 (9) _PostCanRX_Service                                    3     0      3     921
                                             29 COMRAM     3     0      3
                 i2_ES_PostToService
 ---------------------------------------------------------------------------------
 (10) i2_ES_PostToService                                  6     3      3     797
                                             23 COMRAM     6     3      3
                   i2_ES_EnQueueFIFO
 ---------------------------------------------------------------------------------
 (11) i2_ES_EnQueueFIFO                                   11     6      5     683
                                             12 COMRAM    11     6      5
                          i2___awmod
                           i2___wmul
 ---------------------------------------------------------------------------------
 (12) i2___wmul                                            6     2      4     153
                                              6 COMRAM     6     2      4
                          i2___awmod (ARG)
 ---------------------------------------------------------------------------------
 (12) i2___awmod                                           6     2      4     256
                                              0 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (7) _CanErrorResponse                                     0     0      0       0
 ---------------------------------------------------------------------------------
 (7) _BusErrorResponse                                     0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 12
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _ES_Initialize
     _ES_InitQueue
     _ES_Timer_Init
       __HW_Timer_Init
     _InitCanRX_Service *
       _ES_PostToService
         _ES_EnQueueFIFO
           ___awmod
           ___wmul
             ___awmod (ARG)
   _ES_Run
     _ES_CheckUserEvents
       _Check4Keystroke *
     _ES_DeQueue
       ___lbmod
       ___wmul
         ___awmod (ARG)
     _ES_GetMSBitSet
     _RunCanRX_Service *
       _InitCanHardware
       _InitPins
     __HW_Process_Pending_Ints *
       _ES_Timer_Tick_Resp
         _ES_GetMSBitSet
   _printf
     _putch

 _ISR (ROOT)
   _BusErrorResponse
   _CanErrorResponse
   _CanRCVResponse
     _ProcessReceive
       _PostCanRX_Service
         i2_ES_PostToService
           i2_ES_EnQueueFIFO
             i2___awmod
             i2___wmul
               i2___awmod (ARG)
   _CanXmitResponse

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             2FF      0       0      10        0.0%
EEDATA             100      0       0       0        0.0%
BITBANK2           100      0       0       7        0.0%
BANK2              100      0       0       8        0.0%
BITBANK1           100      0       0       5        0.0%
BANK1              100      0       0       6        0.0%
BITBANK0            A0      0       0       3        0.0%
BANK0               A0     25      54       4       52.5%
BITCOMRAM           5E      0       0       0        0.0%
COMRAM              5E     33      47       1       75.5%
BITSFR_3             0      0       0      40        0.0%
SFR_3                0      0       0      40        0.0%
BITSFR_2             0      0       0      40        0.0%
SFR_2                0      0       0      40        0.0%
BITSFR_1             0      0       0      40        0.0%
SFR_1                0      0       0      40        0.0%
BITSFR               0      0       0      40        0.0%
SFR                  0      0       0      40        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0      9B       9        0.0%
DATA                 0      0      9B      11        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.38 build -256452561 
Symbol Table                                                                                   Thu Nov 24 04:03:00 2016

                   ??__HW_Timer_Init 0091                  ES_CheckUserEvents@i 008F  
                __HW_Timer_Init@Rate 008F                  ___wmul@multiplicand 0097  
          __size_of_BusErrorResponse 0002                                  l307 0C72  
                                l421 0A00                                  l422 0A06  
                                l423 0A0E                                  l424 0A18  
                                l425 0A24                                  l426 0A32  
                                l427 0A42                                  l444 0C78  
                                l447 0CDC                __end_of_ES_Initialize 06BE  
                                _GIE 007F97                                  _ISR 0008  
                                u994 0ACC                                  u995 0AC4  
                       ___awmod@sign 0094              __end_of_Check4Keystroke 10FE  
                                prod 000FF3                                  tosl 000FFD  
                                wreg 000FE8               ES_EnQueueFIFO@SaveCrit 00A3  
            ES_EnQueueFIFO@Event2Add 009D                    ?_ES_PostToService 00A6  
                               ?_ISR 0001           i2ES_EnQueueFIFO@pThisQueue 0016  
                       __CFG_WDT$OFF 000000           ES_Timer_Tick_Resp@NewEvent 0080  
                               l2200 0632                                 l2040 0F1E  
                               l2112 10B0                                 l2212 06B4  
                               l2204 0636                                 l2140 09F6  
                               l2116 10B8                                 l2220 04E0  
                               l2134 1024                                 l2216 06BA  
                               l2048 0F46                                 l2144 0A52  
                               l2232 05B6                                 l2146 0A86  
                               l2226 0562                                 l2084 0494  
                               l2236 05CC                                 l2252 0FD2  
                               l2094 04D8                                 l2254 0FDA  
                               l2192 05E4                                 l2088 04B0  
                               l2440 0C24                                 l2442 0C36  
                               l2444 0C48                                 l1902 0B38  
                               l2438 0C12                                 l2448 0C5A  
                               l1850 0B90                                 l1842 0B6A  
                               l1922 079C                                 l1862 0BD6  
                               l1854 0BB4                                 l1846 0B7E  
                               l1838 0B5A                                 l1848 0B8A  
                               l1858 0BC2                                 l1954 0DE6  
                               l1888 0AA6                                 l1968 07B4  
                               l1898 0B32                                 l1978 0830  
                               STR_1 035B                                 STR_2 0376  
                               STR_3 038E                                 STR_4 03A5  
                               u1148 0EEA                                 u1149 0F02  
                               _LATA 000F89                                 u1318 068E  
                               _LATB 000F8A                                 u1319 06AA  
                               u1358 058C                                 u1359 05A4  
                               _PIE1 000F9D                                 _PEIE 007F96  
                               _SCS1 007E99                     ?_CanXmitResponse 0001  
                 ??_ES_PostToService 00A9                                 _main 0BE0  
                        ?_ES_DeQueue 009B                                 fsr0h 000FEA  
                               fsr1h 000FE2                                 fsr0l 000FE9  
                               fsr2h 000FDA                                 indf1 000FE7  
                               fsr1l 000FE1                                 indf2 000FDF  
                               fsr2l 000FD9                                 btemp 0048  
                      main@ErrorType 00B3                                 pclat 000FFA  
                               prodh 000FF4                                 prodl 000FF3  
                               start 0016                        __CFG_MCLRE$ON 000000  
                       ___param_bank 000010                     _RunCanRX_Service 09F4  
            __end_of_InitCanHardware 0CF8                                ??_ISR 0024  
                 ES_Run@HighestPrior 00A9                                ?_main 0001  
              __end_of_ES_Timer_Init 10E8                      __end_of___awmod 0BE0  
                    __end_of___lbmod 0F52                                _T1CON 000FCD  
                         _DistList00 0359                                _LATA0 007C48  
                              _LATA1 007C49                                _LATB0 007C50  
                              _LATA2 007C4A                                _LATA3 007C4B  
                              _LATA4 007C4C                                _LATA5 007C4D  
                              _IRCF0 007E9C                                _IRCF1 007E9D  
                              _IRCF2 007E9E                                _ERRIE 007D1D  
                              _ERRIF 007D25                                i2l160 0904  
                              _IRXIE 007D1F                                _IRXIF 007D27  
                              _PORTA 000F80                                _PORTB 000F81  
                              _TRISA 000F92                        __CFG_PWRT$OFF 000000  
                              _Ready 0085                                _putch 10FE  
                     __CFG_BOREN$OFF 000000                                pclath 000FFA  
                              tablat 000FF5                     __end_ofi2___wmul 1074  
                              status 000FD8                   __size_ofi2___awmod 0070  
         PostCanRX_Service@ThisEvent 001E                      __initialization 1028  
             ES_GetMSBitSet@LoopCntr 0098            RunCanRX_Service@ThisEvent 008F  
         __end_of_ES_CheckUserEvents 0F0E                         __end_of_main 0C74  
                  ES_Timer_Init@Rate 0091                     __end_of_InitPins 10AE  
                __end_of_EventQueues 0357                               ??_main 00B3  
                  ?i2_ES_EnQueueFIFO 000D                        __activetblptr 000002  
                __size_of_ES_DeQueue 0128                      _Nybble2MSBitNum 0341  
        RunCanRX_Service@ReturnEvent 0092     __end_of__HW_Process_Pending_Ints 10C4  
           ProcessReceive@Event2Post 0021                     ?_Check4Keystroke 0001  
                 ??i2_ES_EnQueueFIFO 0012                    ?_CanErrorResponse 0001  
                             _ADCON1 000FC1                               _CCP1IF 007CF2  
                             _CANCON 000F6F                               _CCPR1H 000FBF  
                             _CCPR1L 000FBE                   ??_CanErrorResponse 0001  
                             _CIOCON 000F73                           _MyPriority 008A  
                             ?_putch 0001                     ??_ES_GetMSBitSet 0091  
                             i2l2162 0D14                               i2l2180 0D40  
                             i2l2172 0D2A                               i2l2164 0D18  
                             i2l2340 08DC                               i2l2166 0D1C  
                             i2l1800 0E0A                               i2l2176 0D36  
                             i2l2168 0D20                               i2l2184 0D46  
                             i2l2352 08F0                               i2l2186 0D60  
                             i2l2346 08E6                               i2l1820 0E50  
                             i2l1812 0E38                               i2l1804 0E18  
                             i2l1806 0E20                               i2l2358 08FA  
                             i2l1808 0E24                               i2l1816 0E42  
                             i2l1882 09F0                               i2l1938 0EC0  
                             i2l1796 0DFE                               _INTCON 000FF2  
                             _RXB0D0 000F66                               _RXB0D1 000F67  
                             _RXB0IE 007D18                               _RXB0IF 007D20  
                             _ES_Run 04DE                               _TXB0IE 007D1A  
                             _TXB0IF 007D22                     ??_CanRCVResponse 0024  
                   ??_ES_EnQueueFIFO 00A0                       _Timer2PostFunc 0321  
                             _Queue0 003C                       _SysTickCounter 0038  
                             ___wmul 0F8E                            ??___awmod 0093  
                          ??___lbmod 0090                     ?_InitCanHardware 0001  
                             clear_0 102E                               clear_1 103A  
                   _BusErrorResponse 1102                      ___awmod@divisor 0091  
                    ___awmod@counter 0093                               _printf 0FC4  
                        ISR@LastTime 0034               ES_InitQueue@pThisQueue 0092  
                  __end_ofi2___awmod 0E5A                         __mediumconst 0000  
                        ISR@NextTime 0036                               tblptrh 000FF7  
                             tblptrl 000FF6                               tblptru 000FF8  
                             putch@c 0001                       i2___awmod@sign 0006  
        __size_of_ES_Timer_Tick_Resp 00DC                 ES_DeQueue@pThisQueue 00A3  
            ES_GetMSBitSet@Val2Check 008F            InitCanRX_Service@Priority 00AF  
                    ___lbmod@divisor 008F                           __accesstop 0060  
            __end_of__initialization 1040               __end_of_Timer2PostFunc 0341  
                    ___lbmod@counter 0091                      __CFG_PBADEN$OFF 000000  
                      ___rparam_used 000001                          _EventQueues 0354  
        __size_ofi2_ES_PostToService 006A                       __pcstackCOMRAM 0001  
                      ?_ES_InitQueue 008F              __end_of_Nybble2MSBitNum 0350  
                      __end_of_putch 1100                      _TMR_ActiveFlags 0087  
                          ?i2___wmul 0007              ES_GetMSBitSet@ReturnVal 0096  
            __size_of_ProcessReceive 007A                       _TMR_TimerArray 0060  
           __end_of_RunCanRX_Service 0A9A             ES_EnQueueFIFO@pThisQueue 00A4  
                            ??_putch 008F             __HW_Process_Pending_Ints 10AE  
                         __pbssBANK0 0060                            ?_InitPins 0001  
                            ?_ES_Run 0001                         ??_ES_DeQueue 009F  
          __size_of_ES_PostToService 0078                       ??_ES_InitQueue 0092  
                            ?___wmul 0095                              _CCP1CON 000FBD  
                            _ECANCON 000F77                              ?_printf 008F  
                         ??i2___wmul 000B                   __end_of_ES_DeQueue 04DE  
             i2ES_EnQueueFIFO@pBlock 000D                           ??_InitPins 008F  
                    __size_of_ES_Run 00F4               __size_of_ES_Initialize 00EC  
                            __Hparam 0000                              __Lparam 0000  
           __size_of_CanXmitResponse 0006            i2ES_EnQueueFIFO@Event2Add 000F  
                            ___awmod 0B3E                              ___lbmod 0F0E  
                    __size_of___wmul 0036                         __psmallconst 0300  
         i2ES_PostToService@TheEvent 0018                              __pcinit 1028  
                            __ramtop 0300                              __ptext0 0BE0  
                            __ptext1 0FC4                              __ptext2 10FE  
                            __ptext3 04DE                              __ptext4 10AE  
                            __ptext5 07A0                              __ptext6 0A9A  
                            __ptext7 09F4                              __ptext8 1092  
                            __ptext9 0C74             i2ES_EnQueueFIFO@SaveCrit 0015  
                    __size_of_printf 0034                         __size_of_ISR 0938  
            __size_of__HW_Timer_Init 001E                     ___awmod@dividend 008F  
                 _ES_CheckUserEvents 0EC4                      ES_Run@ThisEvent 008C  
                     __pintcode_body 087C                 end_of_initialization 1040  
                ?_ES_CheckUserEvents 0001             __end_of_BusErrorResponse 1104  
          __size_ofi2_ES_EnQueueFIFO 00B4                        __Lmediumconst 0000  
                            int_func 087C                  i2___wmul@multiplier 0007  
       ES_PostToService@WhichService 00AB               __size_of_ES_Timer_Init 000E  
          __size_of_CanErrorResponse 0002                              printf@c 0093  
                            printf@f 008F                              postdec2 000FDD  
                            postinc0 000FEE                              postinc1 000FE6  
                            postinc2 000FDE           InitCanRX_Service@ThisEvent 00AC  
               ??_ES_CheckUserEvents 008F                        _ES_Initialize 05D2  
                     _ProcessReceive 0CF8                     ___lbmod@dividend 0090  
                          _TRISBbits 000F93                 __end_of_ES_EventList 0359  
               __end_of_ES_InitQueue 0F8E                            i2___awmod 0DEA  
                     ES_Initialize@i 00B2                          ___lbmod@rem 0092  
           __size_of_Check4Keystroke 0004                       __end_of_ES_Run 05D2  
                 __end_of_DistList00 035B                     _ES_PostToService 0D72  
               __end_of_ServDescList 0354                       __end_of___wmul 0FC4  
                  ??_CanXmitResponse 0001               __end_of_ProcessReceive 0D72  
                     ?_ES_Initialize 00B0           ??__HW_Process_Pending_Ints 009D  
                      _ES_Timer_Init 10DA                     i2___wmul@product 000B  
                     __end_of_printf 0FF8             __size_of_InitCanHardware 0084  
         __end_of_ES_Timer_Tick_Resp 087C                  start_initialization 1028  
                        __end_of_ISR 0940                    __size_ofi2___wmul 0026  
                         ?i2___awmod 0001                    ?_RunCanRX_Service 008F  
                        _CANSTATbits 000F6E                             ??_ES_Run 00A5  
                 ??_RunCanRX_Service 0092                     __CFG_OSC$IRCIO67 000000  
                          _TickCount 008B           __end_ofi2_ES_PostToService 0EC4  
                  __size_of_InitPins 001C              __size_of_ES_GetMSBitSet 00A4  
                           ??___wmul 0099              __size_of_CanRCVResponse 000C  
            __size_of_ES_EnQueueFIFO 00E2                             ??_printf 0091  
                     ?_ES_Timer_Init 0091                      ?_ProcessReceive 0001  
                     __HW_Timer_Init 1074                          __pbssCOMRAM 0034  
                      __pcstackBANK0 008F                          _BRGCON1bits 000F70  
                        _BRGCON2bits 000F71                   ES_InitQueue@pBlock 008F  
                        _BRGCON3bits 000F72                    _PostCanRX_Service 10C4  
                 ?_PostCanRX_Service 001E                     i2_ES_EnQueueFIFO 0940  
                      __PRIMASK_temp 003A                     _CanErrorResponse 1100  
                ??_PostCanRX_Service 0021                    ??_Check4Keystroke 008F  
                          __pintcode 0008                             ?___awmod 008F  
                           ?___lbmod 008F                      ??_ES_Initialize 00B2  
           ES_PostToService@TheEvent 00A6               __end_of__HW_Timer_Init 1092  
                        __smallconst 0300                __size_of_ES_InitQueue 003C  
          __end_of_PostCanRX_Service 10DA                          ??i2___awmod 0005  
                     __size_of_putch 0002                 ES_Initialize@NewRate 00B0  
                  ??_InitCanHardware 008F            ES_GetMSBitSet@Nybble2Test 0097  
                  ?_BusErrorResponse 0001                       ___wmul@product 0099  
                 ??_BusErrorResponse 0001                             _RXB0EIDH 000F63  
                           _RXB0EIDL 000F64                             _RXB0SIDH 000F61  
                           _RXB0SIDL 000F62                             _RXF0EIDH 000F02  
                           _RXF0EIDL 000F03                             _RXF0SIDH 000F00  
                       _ES_EventList 0357                             _RXF0SIDL 000F01  
                           _RXM0EIDH 000F1A                             _RXM0EIDL 000F1B  
                       _ES_InitQueue 0F52                             _RXM0SIDH 000F18  
                           _RXM0SIDL 000F19                      ??_ES_Timer_Init 0093  
     i2ES_PostToService@WhichService 001D                      ?__HW_Timer_Init 008F  
                  ___wmul@multiplier 0095                             i2___wmul 104E  
                 ES_DeQueue@SaveCrit 00A1                 ES_EnQueueFIFO@pBlock 009B  
           __end_of_ES_PostToService 0DEA                       _BitNum2SetMask 0301  
                       _ServDescList 0350                   i2___awmod@dividend 0001  
                           _InitPins 1092                      _CanXmitResponse 10F4  
                           __Hrparam 0000                       _ES_GetMSBitSet 0A9A  
                           __Lrparam 0000                    _InitCanRX_Service 0FF8  
                   __size_of___awmod 00A2                     __size_of___lbmod 0044  
              i2___wmul@multiplicand 0009          __size_of_ES_CheckUserEvents 004A  
                     _CanRCVResponse 10E8                       _ES_EnQueueFIFO 06BE  
                 ?_InitCanRX_Service 0001                  ??_InitCanRX_Service 00AC  
         __size_of_PostCanRX_Service 0016               __end_of_BitNum2SetMask 0321  
                           __ptext10 03B6                             __ptext11 0F0E  
                           __ptext20 10DA                             __ptext12 0EC4  
                           __ptext21 1074                             __ptext13 10FA  
                           __ptext30 104E                             __ptext22 0F52  
                           __ptext14 05D2                             __ptext31 0DEA  
                           __ptext15 0FF8                             __ptext32 1100  
                           __ptext24 10F4                             __ptext16 0D72  
                           __ptext33 1102                             __ptext25 10E8  
                           __ptext17 06BE                             __ptext34 0000  
                           __ptext26 0CF8                             __ptext18 0F8E  
                           __ptext27 10C4                             __ptext19 0B3E  
                           __ptext28 0E5A                             __ptext29 0940  
  ES_Timer_Tick_Resp@NeedsProcessing 0083                        __size_of_main 0094  
                 _ES_Timer_Tick_Resp 07A0               __end_of_ES_GetMSBitSet 0B3E  
          __end_of_InitCanRX_Service 1028                  ?_ES_Timer_Tick_Resp 0001  
             __end_of_CanRCVResponse 10F4               __end_of_ES_EnQueueFIFO 07A0  
                   ??_ProcessReceive 0021                             int$flags 0048  
          __size_of_RunCanRX_Service 00A6                    ES_DeQueue@NumLeft 00A2  
                 i2_ES_PostToService 0E5A             __end_ofi2_ES_EnQueueFIFO 09F4  
                        _RXB0CONbits 000F60                    i2___awmod@divisor 0003  
                  i2___awmod@counter 0005             __end_of_CanErrorResponse 1102  
                ?i2_ES_PostToService 0018                 ??_ES_Timer_Tick_Resp 0099  
            __end_of_CanXmitResponse 10FA                      _Check4Keystroke 10FA  
                           intlevel2 0000                           _ES_DeQueue 03B6  
  __size_of__HW_Process_Pending_Ints 0016            ?__HW_Process_Pending_Ints 0001  
                        _TXB0CONbits 000F40                      ?_ES_GetMSBitSet 008F  
               ??i2_ES_PostToService 001B  ES_Timer_Tick_Resp@NextTimer2Process 0089  
                           printf@ap 0091                      ?_CanRCVResponse 0001  
                    ?_ES_EnQueueFIFO 009B                     ES_DeQueue@pBlock 009B  
                    _InitCanHardware 0C74               ES_DeQueue@pReturnEvent 009D  
              ES_InitQueue@BlockSize 0091           __size_of_InitCanRX_Service 0030  
